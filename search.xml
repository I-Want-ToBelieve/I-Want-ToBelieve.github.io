<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>致敬乔布斯</title>
    <url>/2017/10/24/%E8%87%B4%E6%95%AC%E4%B9%94%E5%B8%83%E6%96%AF/</url>
    <content><![CDATA[<div class="container">
  <div class="jumbotron">
    <div class="row">
      <div class="col-xs-12">
        <h1 class="text-center">史蒂夫·乔布斯</h1>
        <h2 class="text-center"><em>美国苹果公司联合创始人</em></h2>
        <div class="thumbnail full-image"><img src="http://oy9dwtsnx.bkt.clouddn.com/%E4%B9%94%E5%B8%83%E6%96%AF.jpg">
          <div class="caption text-center">上图是乔布斯在斯坦福大学演讲</div>
        </div>
        <span id="more"></span>
        <div class="col-xs-12 col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2">
          <h3 class="text-center">这是乔布斯的生平:</h3>
          <ul>
            <li><strong>1955年</strong> 史蒂夫·乔布斯出生在美国旧金山。刚刚出世就被父母遗弃了。幸运的是,一对好心的夫妻领养了他.乔布斯生活在美国“硅谷“附近，邻居都是惠普公司的职员。在这些人的影响下，乔布斯从小迷恋电子学。上初中时，乔布斯在一次同学聚会上与斯蒂夫·沃兹尼亚克见面，两人一见如故。斯蒂夫·沃兹尼亚克是学校电子俱乐部的会长，对电子有很大的兴趣.
            </li>
            <li><strong>1974年</strong> 乔布斯只念了一学期就因为经济因素而休学，成为雅达利电视游戏机公司的一名职员。借住沃兹家的车库，常到社区大学旁听书法课等课程。</li></br>
            <li><strong>1976年</strong> 在旧金山威斯康星计算机产品展销会上买到了6502芯片，带着6502芯片，乔布斯和沃兹尼亚克在乔布斯家的车库里装好了第一台电脑。乔布斯为筹集批量生产的资金，卖掉了自己的大众牌小汽车，同时沃兹也卖掉了他的惠普65型计算器。就这样，他们有了1300美元。</li></br>
            <li><strong>1976年4月</strong> 乔布斯、沃兹及乔布斯的朋友龙·韦恩签署了一份合同，决定成立一家电脑公司。随后，21岁的乔布斯与26岁的斯蒂夫·沃兹尼亚克在自家的车房里成立了苹果公司。公司的名称由乔布斯定为苹果。而他们的自制电脑则被追认为“苹果Ⅰ号“电脑了。苹果公司成立初期，“苹果“机的生意清淡。</li></br>
            <li><strong>1976年7月</strong> 一个偶然的机遇给“苹果“公司带来了转机。零售商保罗·特雷尔（Paul Jay Terrell）来到了乔布斯的车库，当看完乔布斯演示完电脑后，决定订购50台整机，这是做成的第一笔生意。之后“苹果“公司开始了小批量生产。</li>  </br>
            <li><strong>1976年10月</strong> 马尔库拉前来拜访沃兹和他们的车库工场。马尔库拉是位电气工程师，擅长推销工作，他主动帮助他们制定一份商业计划，给他们贷款69万美元，有了这笔资金，“苹果“公司的发展速度大大加快了。</li>  </br>
            <li><strong>1977年4月</strong> 乔布斯在美国第一次计算机展览会展示了苹果Ⅱ号样机。</li>
            <li><strong>1980年12月</strong> 苹果公司股票公开上市，在不到一个小时内，460万股全被抢购一空，当日以每股29美元收市。按这个收盘价计算，苹果公司高层产生了4名亿万富翁和40名以上的百万富翁。乔布斯作为公司创办人排名第一。</li>
            <li><strong>1983年</strong> Lisa数据库和Apple Iie发布，售价分别为9998美元和1395美元。但是Lisa的昂贵的售价是没有多少市场的，而Lisa又侵吞了Apple大量研发经费。由于乔布斯经营理念与当时大多数管理人员不同，加上IBM公司推出个人电脑，抢占大片市场，总经理和董事们便把这一失败归罪于董事长乔布斯</li>
            <li><strong>1985年4月</strong> 董事会决议撤销了他的经营大权。乔布斯几次想夺回权力均未成功，便在1985年9月17日离开苹果公司。</li>
            <li><strong>1986年</strong> 乔布斯花1000万美元从乔治·卢卡斯手中收购了Lucasfilm旗下位于加利福尼亚州Emeryville的电脑动画效果工作室，并成立独立公司皮克斯动画工作室。之后该公司成为了众所周知的3D电脑动画公司</li>
            <li><strong>1995年</strong> 推出全球首部全3D立体动画电影《玩具总动员》。公司在2006年被迪士尼收购，乔布斯也因此成为迪斯尼最大个人股东。</li>
            <li><strong>1996年</strong> 苹果公司经营陷入困局，其市场份额也由鼎盛的16%跌到4%。与之相对应的是乔布斯公司由于《玩具总动员》而名声大振，个人身价达到10亿美元。但是乔布斯还是于苹果危难之中重新回来，回来后的乔布斯大刀阔斧改革，停止了不合理的研发和生产，结束了微软和苹果多年的专利纷争，并开始研发新产品iMac和OS X操作系统。</li>
            <li><strong>1997年</strong> 苹果推出iMac，创新的外壳颜色透明设计使得产品大卖，并让苹果度过财政危机。随后苹果又推出Mac OS X操作系统。</li>
            <li><strong>2000年</strong> 科技股泡沫，乔布斯又提出将PC设计成“数字中枢“先进理念，并先后开发出iTunes和iPod，同时也开始在黄金地段开设专卖店并大获成功。随后Apple TV和iTunes Store等一系列产品受到了市场的好评和认可。</li>
            <li><strong>2007年6月</strong> 苹果公司又推出自有设计的iPhone手机，使用iOS系统，随后发布新一代iPhone 3G以及iPhone 3GS。</li>
            <li><strong>2010年6月</strong> 发布第四代产品iPhone 4，每次上市都引得了世界极大的疯狂和销售热潮。
            除了iPhone系列之外，发布使用iOS系统的iPad平板电脑，这一起先不被众人看好的产品，最后获得了巨大的成功。</li>
            <li><strong>2011年8月24日</strong> 史蒂夫·乔布斯向苹果董事会提交辞职申请。他还在辞职信中建议由首席营运长蒂姆·库克接替他的职位。乔布斯在辞职信中表示，自己无法继续担任行政总裁，不过自己愿意担任公司董事长、董事或普通职员。苹果公司股票暂停盘后交易。乔布斯在信中并没有指明辞职原因，但他一直都在与胰腺癌作斗争。</li>
            <li><strong>2011年8月25日</strong> 苹果宣布他辞职，并立即生效，职位由蒂姆·库克接任。同时苹果宣布任命史蒂夫·乔布斯为公司董事长，蒂姆·库克担任CEO。</li>
             <li><strong>2011年10月5日</strong> 苹果董事会宣布前行政总裁乔布斯逝世，，终年56岁，葬礼于10月7日举行。</li>
          </ul>
          <!--<blockquote>
            <p>"Borlaug's life and achievement are testimony to the far-reaching contribution that one man's towering intellect, persistence and scientific vision can make to human peace and progress."</p>
            <footer><cite>Indian Prime Minister Manmohan Singh</cite></footer>
          </blockquote>
          -->
          <h3>关于乔布斯在斯坦福大学演讲视频，你可以在这看到他 <a href="https://www.bilibili.com/video/av4832217/?from=search&seid=3858014814852675633" target="_blank">乔布斯斯坦福大学演讲（高清 中英文字幕）</a>.</h3>
        </div>
      </div>
    </div>
  </div>
  <footer class="text-center">
    <hr>
    <p>coded by <a href="https://www.freecodecamp.com/quincylarson" target="_blank">Quincy Larson</a>.</p>
  </footer>
</div>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>乔布斯</tag>
      </tags>
  </entry>
  <entry>
    <title>快捷启动之Win+R</title>
    <url>/2017/11/02/%E5%BF%AB%E6%8D%B7%E5%90%AF%E5%8A%A8%E4%B9%8BWin+R/</url>
    <content><![CDATA[<p><strong>建议放大到1.5倍观看（ <code>Ctrl + + + +</code> ）</strong></p>
<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>为了方便你阅读本文档，我们先约定以下几点</p>
<ol>
<li>被方括号<code>&lt;&gt;</code>包裹的内容为假设条件，你需要根据你的实际情况替换。</li>
<li>被小括号<code>()</code>包括的内容为实现前项操作的快捷键。</li>
<li>如有标明 <code>TODO</code> 字样，表示内容未补充。</li>
</ol>
<h2 id="快速打开程序-文件-网站之Win-R"><a href="#快速打开程序-文件-网站之Win-R" class="headerlink" title="快速打开程序\文件\网站之Win+R"></a>快速打开程序\文件\网站之Win+R</h2></br>

<p>这是效果演示：</p>
<p><img src="http://oy9dwtsnx.bkt.clouddn.com/WinRDemo.gif" alt="DemoWinR" title="WinRDemo.gif"></p>
<span id="more"></span>
<h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="添加用户环境变量"><a href="#添加用户环境变量" class="headerlink" title="添加用户环境变量"></a>添加用户环境变量</h4><p>&lt;这里 **假设** 你的非系统盘的盘符为 **X**,用户名为 **Admin** &gt;</p>
<ol>
<li><p>打开你的资源管理器(<em>Win+E</em> )在 <strong>X</strong> 盘的 <strong>根目录</strong> 新建文件夹(<em>菜单键+W+F</em> 菜单键在右Ctrl的左边)  <strong>=&gt;</strong> 重命名(<em>F2</em> )为 <em>lnkSet</em> 然后打开 <em>lnkSet</em> 文件夹，在里面新建3个文件夹，分别重命名为 <strong>bat</strong> <strong>vbs</strong> <strong>reg</strong></p>
</li>
<li><p>打开系统设置(<em>Win+Pause</em> ) <strong>=&gt;</strong> 左侧高级系统设置 <strong>=&gt;</strong> 环境变量(<em>N</em> ) <strong>=&gt;</strong> 在 <strong>Admin 的用户变量</strong>(<em>U</em> )中找到Path(<em>P</em> ) 或者 PATH(<em>P</em> )</p>
</li>
</ol>
<ul>
<li>若有则编辑(<em>Alt+E</em> ):在变量值列的最下行依次添加(<em>Alt+N</em> ) <strong>X:\lnkSet</strong> <strong>X:\lnkSet\bat</strong> <strong>X:\lnkSet\vbs</strong> <strong>X:\lnkSet\reg</strong></li>
<li>若无则新建(<em>Alt+N</em> )：变量名填: <strong>PATH</strong> 或者 <strong>path</strong> 都行，变量值填:<strong>X:\lnkSet;X:\lnkSet\bat;X:\lnkSet\vbs;X:\lnkSet\reg</strong></li>
</ul>
<ol start="3">
<li>你还需要在 <strong>Admin 的用户变量</strong>(<em>U</em> )中找到 <strong>PATHEXT</strong></li>
</ol>
<ul>
<li>若有则编辑(<em>Alt+E</em> )：在变量值末尾添加： <strong>;.LNK;.REG;.BAT;.VBS</strong></li>
<li>若无则新建(<em>Alt+N</em> )：变量名填: <strong>PATHEXT</strong>，变量值填:<strong>.LNK;.REG;.BAT;.VBS</strong>。</li>
</ul>
<ol start="4">
<li>添加完毕后点击确定(<em>Enter</em> ) <strong>=&gt;</strong> 确定 <strong>=&gt;</strong> 应用 <strong>=&gt;</strong> 确定。</li>
</ol>
<h4 id="自定义命令名"><a href="#自定义命令名" class="headerlink" title="自定义命令名"></a>自定义命令名</h4><ol>
<li><p>将需要通过 <em>Win+R</em> <strong>=&gt;</strong>  键入命令名 <strong>=&gt;</strong> 回车快速打开的程序或文件的快捷方式重命名为你为其定义的命令名，并将其拖放至 <strong>X:\lnkSet</strong> 文件夹中。如将桌面的 <strong>腾讯QQ</strong> 快捷方式重命名为 <strong>QQ</strong> 并拖放至 <strong>X:\lnkSet</strong> 文件夹。</p>
</li>
<li><p>你可以通过 <em>Win+R</em> <strong>=&gt;</strong>  <em>QQ</em> <strong>=&gt;</strong> 然后回车 QQ登陆程序将会被执行。</p>
</li>
<li><p>如果提示 <strong>Windows找不到文件”QQ”</strong> 你可以注销你的账户然后重新登陆重新测试<br>如果还是不行请仔细核对以上步骤，有无遗漏。</p>
</li>
</ol>
<h4 id="Win-R的高级应用之Listary"><a href="#Win-R的高级应用之Listary" class="headerlink" title="Win+R的高级应用之Listary"></a>Win+R的高级应用之Listary</h4><p>这是效果演示：</p>
<p><img src="http://oy9dwtsnx.bkt.clouddn.com/ListaryDemo.gif" alt="DemoListary" title="ListaryDemo.gif"></p>
<p>需要下载的软件:</p>
<ul>
<li><a href="http://www.listary.com/" title="Listary官网">Listary</a></li>
</ul>
<p>可选的软件(建议下载)：</p>
<ul>
<li><a href="https://www.autohotkey.com/" title="AutoHotkey官网">AutoHotkey</a></li>
</ul>
<p><strong>几点建议</strong></p>
<ul>
<li><p>建议你新建专门存储此类辅助程序的文件夹，如：<em>Download</em></p>
</li>
<li><p>建议你新建专门安装此类辅助程序的文件夹，如：<em>auxiliaryProgram</em></p>
</li>
<li><p>如果你的系统盘是固态硬盘建议将下载的软件安装在系统盘，如果不是建议安装在非系统盘<br>这是一个取舍问题。</p>
</li>
<li><p>如果你的系统盘是固态硬盘，建议你设置Listary开机自启动，这仍是一个取舍问题。</p>
</li>
</ul>
<p><strong>关于Listary</strong></p>
<p>你可以在这里获取更多关于 <a href="http://floatsyi.com/2017/11/05/%E4%B8%80%E5%88%87%E7%9A%84%E5%85%A5%E5%8F%A3%E4%B9%8BListary/" title="Listary技巧">Listary的使用技巧</a>  <code>TODO</code></p>
<p>本篇只实现Win+R启动Listary快速打开程序、网页、文档。</p>
<h5 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h5><p><strong>设置Listary的快捷键</strong></p>
<ol>
<li>右键Listary的托盘图标 <strong>=&gt;</strong> 选项 <strong>=&gt;</strong> 选中左侧快捷键 <strong>=&gt;</strong> 在显示Listary工具条 设置 <em>Win+Y</em> 如此你就可以通过 <em>双击Ctrl</em> 或者 <em>Win+Y</em> 在任何地方显示\隐藏Listary工具条。</li>
</ol>
<p><strong>将我们的快捷方式库：</strong>X:\lnkSet** 添加至 Listary**</p>
<ol>
<li><p>同样在Listary选项中 <strong>=&gt;</strong>  选中左侧的启动程序 <strong>=&gt;</strong> 点击左下角的 <strong>+</strong> 按钮，将我们的快捷方式库：<strong>X:\lnkSet</strong> 添加进去。</p>
</li>
<li><p>在底部扩展名的文本框中添加：<strong>lnk;exe;bat;ahk</strong></p>
</li>
</ol>
<p><strong>你可以通过快捷键Win+Y或者双击Ctrl 然后在Listary工具条中键入 QQ 回车来快速启动QQ登陆程序</strong></p>
<h3 id="扩展与维护"><a href="#扩展与维护" class="headerlink" title="扩展与维护"></a>扩展与维护</h3><p><strong>如果你需要添加其他程序的快捷启动命令，你只需要将快捷方式重命名并放置到我们的快捷方式库：X:\lnkSet中</strong></p>
<p>你可以为你的快捷方式库：<strong>X:\lnkSet</strong> 新建快捷方式，并重命名为 <em>ls</em>，将其拖放到你的快捷方式库：<strong>X:\lnkSet</strong> 中，你就可以通过命令 <em>ls</em> 来快速打开你的快捷方式库。</p>
<p>使用下面这个方法你可以快速的将你已经重命名的快捷方式右键发送到快捷方式库：X:\lnkSet中**<br>你可以在这里获取 <a href="http://floatsyi.com/2017/11/05/%E6%89%A9%E5%B1%95%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E5%8F%91%E9%80%81%E5%88%B0%E4%B9%8BSendTo/" title="扩展鼠标右键菜单：发送到你指定的文件夹">扩展鼠标右键菜单：发送到你指定的文件夹</a></p>
<p>我们还在 <strong>lnkSet</strong> 中新建了三个文件夹，他们主要是分别用来存储一些脚本文件和注册表文件。<br>你可以在这里了解一些我在网上收集的[脚本库][jiaobeset]，如果你喜欢，你可以得到他。</p>
<h3 id="如果你下载了AutoHotkey"><a href="#如果你下载了AutoHotkey" class="headerlink" title="如果你下载了AutoHotkey"></a>如果你下载了AutoHotkey</h3><p><strong>如果你不知道AutoHotkey脚本程序基本的使用</strong><br>你可以在这了解他<a href="http://floatsyi.com/2017/12/31/%E7%83%AD%E9%94%AE%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E4%B9%8BAutoHotKey/" title="热键脚本语言之AutoHotkey">热键脚本语言之AutoHotkey</a><br><strong>你可以通过以下AHK脚本将你Listary快捷键改为被Windows系统占用的Win+R</strong></p>
<figure class="highlight ahk"><table><tr><td class="code"><pre><span class="line"><span class="comment">; 识别隐藏的窗口</span></span><br><span class="line"><span class="built_in">DetectHiddenWindows,</span> on</span><br><span class="line"></span><br><span class="line"><span class="comment">; 声明函数</span></span><br><span class="line">RunListary(WinTitle)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">; 置顶</span></span><br><span class="line"><span class="built_in">    WinSet,</span> AlwaysOnTop, on, <span class="variable">%WinTitle%</span></span><br><span class="line">    <span class="comment">; 检查 Listary是否运行</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">    Process,</span> Exist, Listary.exe</span><br><span class="line"></span><br><span class="line">    <span class="comment">; 由于 ErrorLevel 会经常发生改变, 所以要立即保存这个值</span></span><br><span class="line">    ListaryPID = <span class="variable">%ErrorLevel%</span>  </span><br><span class="line"></span><br><span class="line">    <span class="comment">; 如果ListaryPID = 0,即Listary没运行</span></span><br><span class="line">    if ListaryPID = <span class="number">0</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">; 那就运行Listary</span></span><br><span class="line">    Run <span class="string">&quot;S:\Program Files\Listary\Listary.exe&quot;</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; 定义热键</span></span><br><span class="line"><span class="title">#R::</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 转发热键</span></span><br><span class="line"><span class="built_in">Send,</span> #&#123;y&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; 调用函数</span></span><br><span class="line">RunListary(<span class="keyword">ahk_class</span> Listary_WidgetWin_0)</span><br><span class="line"></span><br><span class="line"><span class="comment">; 等待Listary 8秒</span></span><br><span class="line"><span class="built_in">WinWait,</span> <span class="keyword">ahk_class</span> Listary_WidgetWin_0, , <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 如果Listary没运行或失去响应</span></span><br><span class="line">if <span class="built_in">ErrorLevel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">; 弹窗提示</span></span><br><span class="line"><span class="built_in">    MsgBox,</span> 超时,也许你的listary未运行或失去响应,请检查并重试</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong> 其中关于Run “S:\Program Files\Listary\Listary.exe” 中的路径 请更改为你Listary安装的路径。</p>
<p>这句代码主要是为了将Listary设置为开机不自动启动的时候，仍然可以通过快捷键 <em>Win+R</em> 快速使用Listary启动程序。</p>
<p>你可以在这获取更多<a href="#" title="AutoHotkey实例">我的AutoHotkey实例</a> <code>TODO</code><br>你还可以访问<a href="https://ahkcn.github.io/docs/scripts/index.htm" title="AutoHotkey脚本展示">AutoHotkey中文文档之脚本展示</a>获取更多实例</p>
<p><strong>本文迭代于(FloatingShuYin@2017-11-05 11:56:01)</strong></p>
]]></content>
      <categories>
        <category>Win10-15063</category>
        <category>技巧篇</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Win10</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10-15063 技巧与美化 目录</title>
    <url>/2017/11/03/Win10-15063-%E6%8A%80%E5%B7%A7%E4%B8%8E%E7%BE%8E%E5%8C%96-%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<div class="parent">
    <div class="child">
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" height=86 src="//music.163.com/outchain/player?type=2&id=468340531&auto=0&height=66"></iframe>
    </div>
</div>

<p>更新<a href="http://floatsyi.com/2017/12/31/%E7%83%AD%E9%94%AE%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E4%B9%8BAutoHotKey/" title="热键脚本语言之AutoHotkey">热键脚本语言之AutoHotkey</a>于(FloatingShuYin@2017-12-31 14:57:05)<br>更新<a href="http://floatsyi.com/2017/12/31/%E8%A7%A3%E5%8E%8B%E7%BC%A9%E8%BD%AF%E4%BB%B6%E7%9A%84%E6%9C%80%E4%BC%98%E9%80%89%E6%8B%A9%E4%B9%8BBandizip/" title="解压缩软件的最优选择之Bandizip">解压缩软件的最优选择之Bandizip</a>于(FloatingShuYin@2017-12-31 14:56:35)<br>更新<a href="http://floatsyi.com/2017/11/05/%E4%B8%80%E5%88%87%E7%9A%84%E5%85%A5%E5%8F%A3%E4%B9%8BListary/" title="一切的入口之Listary">一切的入口之Listary</a>于(FloatingShuYin@2017-11-19 17:56:09)<br>更新<a href="http://floatsyi.com/2017/11/05/%E6%89%A9%E5%B1%95%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E5%8F%91%E9%80%81%E5%88%B0%E4%B9%8BSendTo/" title="扩展右键菜单发送到之SendTo">扩展右键菜单发送到之SendTo</a>于(FloatingShuYin@2017-11-05 12:04:14)<br>更新<a href="http://floatsyi.com/2017/11/02/%E5%BF%AB%E6%8D%B7%E5%90%AF%E5%8A%A8%E4%B9%8BWin+R/" title="快捷启动之Win+R">快捷启动之Win+R</a>于(FloatingShuYin@2017-11-03 13:14:46)<br><strong>建议按照目录顺序阅读，避免在这些页面中来回跳转。<br>建议放大到1.5倍观看（ <code>Ctrl + + + +</code> ）</strong></p>
<span id="more"></span>

<h2 id="技巧篇"><a href="#技巧篇" class="headerlink" title="技巧篇"></a>技巧篇</h2><ul>
<li><a href="http://floatsyi.com/2017/11/02/%E5%BF%AB%E6%8D%B7%E5%90%AF%E5%8A%A8%E4%B9%8BWin+R/" title="快捷启动之Win+R">快捷启动之Win+R</a></li>
<li><a href="http://floatsyi.com/2017/11/05/%E6%89%A9%E5%B1%95%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E5%8F%91%E9%80%81%E5%88%B0%E4%B9%8BSendTo/" title="扩展右键菜单发送到之SendTo">扩展右键菜单发送到之SendTo</a></li>
<li><a href="http://floatsyi.com/2017/11/05/%E4%B8%80%E5%88%87%E7%9A%84%E5%85%A5%E5%8F%A3%E4%B9%8BListary/" title="一切的入口之Listary">一切的入口之Listary</a></li>
<li><a href="http://floatsyi.com/2017/12/31/%E8%A7%A3%E5%8E%8B%E7%BC%A9%E8%BD%AF%E4%BB%B6%E7%9A%84%E6%9C%80%E4%BC%98%E9%80%89%E6%8B%A9%E4%B9%8BBandizip/" title="解压缩软件的最优选择之Bandizip">解压缩软件的最优选择之Bandizip</a></li>
<li><a href="http://floatsyi.com/2017/12/31/%E7%83%AD%E9%94%AE%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E4%B9%8BAutoHotKey/" title="热键脚本语言之AutoHotkey">热键脚本语言之AutoHotkey</a></li>
<li>[ADSafe净化网络][ADSafe]</li>
<li>[Snipaste强大而小巧的截图工具][Snipaste]</li>
<li>[QTTabBar扩展资源管理器][QTTabBar]</li>
<li>[Everything快速检索文件][Everything]</li>
<li>[Ditto扩展你的剪切板][Ditto]</li>
<li>[FreeDownload 强大的HTTP下载工具][FreeDownload]</li>
<li>[Defraggler磁盘碎片整理][Defraggler]</li>
<li>[CCleaner系统垃圾注册表清理][CCleaner]</li>
<li>[Total Uninstall 6软件安装卸载监控][TotalUninstall]</li>
<li>[Q-Dir四窗口资源管理器][Q-Dir]</li>
<li>[Bandicam视频录制][Bandicam]</li>
<li>[ScreenToGif动图录制][ScreenToGif]</li>
<li>[rEFInd多系统引导工具][rEFInd]</li>
<li>[IObit Unlocker解除占用][Unlocker]</li>
<li>[Seer文件快速预览][Seer]</li>
<li>[Icaros缩略图管理][Icaros]</li>
<li>[Honeyview图片浏览器][Honeyview]</li>
</ul>
<h2 id="美化篇"><a href="#美化篇" class="headerlink" title="美化篇"></a>美化篇</h2><ul>
<li>[UltraUXThemePatcher第三方主题破解][Theme]</li>
<li>[StartlsBack开始菜单][StartlsBack]</li>
<li>[iPack主题图标][iPack]</li>
<li>[Rainmater][Rainmater]</li>
<li>[Wallpaper Engine][WallpaperEngine]</li>
<li>[Dexpot 虚拟桌面工具][Dexpot]</li>
<li>[WindowsFx][WindowsFx6]</li>
<li>[noMeiryoUI系统文字热替换][noMeiryoUI]</li>
<li>[MacType字体渲染][MacType]</li>
<li>[OldNewExplorer去掉资源管理器菜单栏][OldNewExplorer]</li>
<li>[鼠标指针][CursorsSet]</li>
<li>[FreeLaunchBar改变任务栏图标起始位置][FreeLaunchBar]</li>
</ul>
<h2 id="奇淫巧技篇"><a href="#奇淫巧技篇" class="headerlink" title="奇淫巧技篇"></a>奇淫巧技篇</h2><ul>
<li>[Tickey按键发声][Tickey]</li>
<li>[Carnac按键演示][Carnac]</li>
<li>[LeDimmer专心工具][LeDimmer]</li>
<li>[iFocuzOn屏幕遮挡板][iFocuzOn]</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>目录</category>
      </categories>
      <tags>
        <tag>目录</tag>
        <tag>Win10-15063</tag>
      </tags>
  </entry>
  <entry>
    <title>一切的入口之Listary</title>
    <url>/2017/11/05/%E4%B8%80%E5%88%87%E7%9A%84%E5%85%A5%E5%8F%A3%E4%B9%8BListary/</url>
    <content><![CDATA[<h2 id="一切的入口之Listary"><a href="#一切的入口之Listary" class="headerlink" title="一切的入口之Listary"></a>一切的入口之Listary</h2><p>你可以在这看到效果演示视频：<code>TODO</code><br>[一切的入口之Listary][ListaryVideo]</p>
<span id="more"></span>

<h2 id="Listary简介"><a href="#Listary简介" class="headerlink" title="Listary简介"></a>Listary简介</h2><p>Listary是一款非常强大的文件管理系统增强工具，占用系统资源非常少，而且最重要的是，他支持自定义外观XD。<br>使用Listary可以让你不用再面对桌面杂乱的图标，外观上相比Windows原生的运行窗口，更优雅，而功能也更强大。</p>
<p>Listary分为个人免费版 和专业版。免费版与专业版的详细区别你可以在 <a href="http://www.listary.com/" title="Listary官网">Listary官网</a> 看到。<br>你可以先使用免费版，再决定是否购买专业版，专业版的价格是 <strong>120RMB左右</strong>。</p>
<hr>
<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>如果你是资金不是很充裕的学生，而你又确实希望使用专业版的功能，你可以在这得到<a href="https://share.weiyun.com/eb96da3c7b44f678e91b0ddf7bdbedaf">破解版</a>。但仍希望你能在有资金来源的时候，<strong>入正</strong> 。这不是是道德问题，这是一个好的软件公司能够生存下去的根本。</p>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p><strong>本文提供的资源，仅供学习参考使用，请你在24小时内删除。</strong></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Listary-拼音首字母搜索"><a href="#Listary-拼音首字母搜索" class="headerlink" title="Listary 拼音首字母搜索"></a>Listary 拼音首字母搜索</h3><div class="note default">
            <p>Listary支持拼音首字母搜索</p>
          </div>

<p>演示：</p>
<p><img src="http://oy9dwtsnx.bkt.clouddn.com/ListaryPYSearch.gif" alt="ListaryPYSearch" title="ListaryPYSearch.gif"></p>
<h3 id="关闭Listary-对开始菜单的检索"><a href="#关闭Listary-对开始菜单的检索" class="headerlink" title="关闭Listary 对开始菜单的检索"></a>关闭Listary 对开始菜单的检索</h3><div class="note default">
            <p>Listary会给开始菜单文件夹下的快捷方式建立索引，而且优先级高于我们自己定义的 <strong>lnkSet</strong> 快捷方式库，这会导致匹配精度降低。所以我们禁用他。</p>
          </div>

<p>** 实现步骤 **</p>
<ul>
<li>打开Listary选项 <strong>=&gt;</strong> 左侧 启动程序菜单  <strong>=&gt;</strong> 取消这两项的勾选： <strong>%start_menu%</strong> <strong>%common_start_menu%</strong> 。</li>
</ul>
<p>如图：</p>
<p><img src="http://oy9dwtsnx.bkt.clouddn.com/ListaryCTR.png" alt="ListaryCTR" title="ListaryCTR.png"></p>
<h3 id="Listary-Web搜索"><a href="#Listary-Web搜索" class="headerlink" title="Listary Web搜索"></a>Listary Web搜索</h3><div class="note default">
            <p>Listary支持给 URL 传参的方式来搜索那些网络上的资源。</p>
          </div>

<p>演示：</p>
<p><img src="http://oy9dwtsnx.bkt.clouddn.com/ListaryWebSearch.gif" alt="ListaryWebSearch" title="ListaryWebSearch.gif"></p>
<h4 id="自定义web-搜索命令"><a href="#自定义web-搜索命令" class="headerlink" title="自定义web 搜索命令"></a>自定义web 搜索命令</h4><p>** 实现步骤 **</p>
<ol>
<li>打开Listary选项 <strong>=&gt;</strong> 左侧 关键字  <strong>=&gt;</strong> 点击左下绿色加号按钮。</li>
<li>关键字尽量填简单点 比如知乎就填拼音首字母：<strong>zh</strong> 好了。  </li>
<li>显示名称：Search 知乎 for ‘{query}’</li>
<li>URL： <a href="https://www.zhihu.com/search?type=content&amp;q=%7Bquery%7D">https://www.zhihu.com/search?type=content&amp;q={query}</a></li>
</ol>
<p>如图：</p>
<p><img src="http://oy9dwtsnx.bkt.clouddn.com/listarywebsetting.png" alt="listaryWeBSetting" title="listaryWeBSetting.png"></p>
<p>其他网站类似，你只需要用浏览器打开你想定义的网站，然后使用该网站的搜索功能后，复制浏览器地址栏的URL将其中的参数用 <code>&#123;query&#125;</code> 替换就好了。</p>
<p>如图：</p>
<p><img src="http://oy9dwtsnx.bkt.clouddn.com/666.png" alt="GetUrl" title="GetUrl.png"></p>
<h3 id="Listary-工程（项目文件夹）"><a href="#Listary-工程（项目文件夹）" class="headerlink" title="Listary 工程（项目文件夹）"></a>Listary 工程（项目文件夹）</h3><div class="note default">
            <p>Listary允许你给你的项目文件夹添加关键字，然后你就可以通过自定义的关键字来快速检索项目文件夹中的子目录或文件。</p>
          </div>

<p>演示：</p>
<p><img src="http://oy9dwtsnx.bkt.clouddn.com/Listaryr%20Poject.gif" alt="ListaryrPoject.gif" title="ListaryrPoject.gif"></p>
<h4 id="自定义-项目文件夹-搜索命令"><a href="#自定义-项目文件夹-搜索命令" class="headerlink" title="自定义 项目文件夹 搜索命令"></a>自定义 项目文件夹 搜索命令</h4><p>就拿我这个博客项目举例吧。</p>
<p>** 实现步骤 **</p>
<ol>
<li>打开Listary选项 <strong>=&gt;</strong> 左侧 工程  <strong>=&gt;</strong> 点击左下绿色加号按钮。</li>
<li>名称就填你项目所在根目录的文件名好了</li>
<li>关键字尽量填简单点，比如我的这个博客项目我就填的是博客的英文：<strong>blog</strong>。</li>
</ol>
<h4 id="临时禁用即时搜索"><a href="#临时禁用即时搜索" class="headerlink" title="临时禁用即时搜索"></a>临时禁用即时搜索</h4><p>在资源管理器中 按下 shift + ! 可以临时禁用即时搜索.</p>
<p>如图：<br><img src="http://oy9dwtsnx.bkt.clouddn.com/blogDemo.png" alt="Pojectfloder" title="Pojectfloder.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> ██████████ ██████   █████ ██████████</span><br><span class="line">░░███░░░░░█░░██████ ░░███ ░░███░░░░███</span><br><span class="line"> ░███  █ ░  ░███░███ ░███  ░███   ░░███</span><br><span class="line"> ░██████    ░███░░███░███  ░███    ░███</span><br><span class="line"> ░███░░█    ░███ ░░██████  ░███    ░███</span><br><span class="line"> ░███ ░   █ ░███  ░░█████  ░███    ███</span><br><span class="line"> ██████████ █████  ░░█████ ██████████</span><br><span class="line">░░░░░░░░░░ ░░░░░    ░░░░░ ░░░░░░░░░░</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Win10-15063</category>
        <category>技巧篇</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Win10</tag>
        <tag>Listary</tag>
      </tags>
  </entry>
  <entry>
    <title>扩展右键菜单发送到之SendTo</title>
    <url>/2017/11/05/%E6%89%A9%E5%B1%95%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E5%8F%91%E9%80%81%E5%88%B0%E4%B9%8BSendTo/</url>
    <content><![CDATA[<h2 id="扩展右键菜单发送到之SendTo"><a href="#扩展右键菜单发送到之SendTo" class="headerlink" title="扩展右键菜单发送到之SendTo"></a>扩展右键菜单发送到之SendTo</h2><p>Windows系统本身就有这样一个功能，可以通过右键菜单快速的发送到蓝牙设备或者邮件收件人。<br>我们可以通过以下步骤，将我们需要频繁接纳文件的文件夹添加进 <strong>发送到列表</strong>。<br>这样我们在扩展快捷方式库的时候就会方便许多。</p>
<p>你可以在这看到效果演示视频：<code>TODO</code><br>[扩展右键菜单发送到之SendTo][SendToVideo]</p>
<span id="more"></span>
<h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="添加到发送到列表"><a href="#添加到发送到列表" class="headerlink" title="添加到发送到列表"></a>添加到发送到列表</h4><ol>
<li><p>复制右边这段路径 ： <code>%APPDATA%\Microsoft\Windows\SendTo</code></p>
</li>
<li><p>打开你的资源管理器(<em>Win+E</em> ) <strong>=&gt;</strong> 定位到地址栏(<em>F4</em> ) <strong>=&gt;</strong> 全选然后替换成你刚才复制的那段地址(<em>Ctrl+A</em> )(<em>Ctrl+V</em> )  <strong>=&gt;</strong> 然后回车</p>
</li>
</ol>
<p>呈现在你眼前的正是 <strong>发送到列表所有的列</strong> 聪明的你肯定已经想到，我们只需要将我们指定的文件夹的快捷方式，拖入到这里就可以将其添加到 <strong>发送到列表</strong> 了</p>
<p>在这之前我们先把SendTo文件夹本身的快捷方式，添加进 <strong>发送到列表</strong><br>3. 按退格键定位到当前文件夹的的父文件夹(<em>BackSpace</em> ) <strong>=&gt;</strong> 定位到SendTo文件夹(<em>S</em> )，并新建快捷方式(<em>菜单键+S</em> )  <strong>=&gt;</strong> 将快捷方式重命名为 <strong>SendTO</strong> <strong>=&gt;</strong> 然后将其剪切到 <strong>SendTO文件夹</strong> 中。</p>
<ol start="4">
<li>然后定位(<em>F4</em> )到我们的快捷方式库 <strong>X:\lnkSet</strong> 并为其新建快捷方式(<em>菜单键+S</em> )，重名为 <strong>lnkSet</strong> 然后发送到 <strong>SendTo</strong> (<em>菜单键+N+S</em>)</li>
</ol>
<p>如果你需要经常修改你的 <strong>发送到列表</strong> 你可以将 <strong>SendTo文件夹</strong> 的 <strong>快捷方式</strong> 重命名为 <em>ST</em> 发送到快捷方式库 <strong>lnkSet</strong> 中，这样你就可以通过 <em>Win+R + ST + 回车</em> 快速的打开SendTo文件夹。</p>
<p><strong>本文迭代于(FloatingShuYin@2017-11-05 11:55:33)</strong></p>
]]></content>
      <categories>
        <category>Win10-15063</category>
        <category>技巧篇</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Win10</tag>
        <tag>SendTo</tag>
      </tags>
  </entry>
  <entry>
    <title>热键脚本语言之AutoHotKey</title>
    <url>/2017/12/31/%E7%83%AD%E9%94%AE%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E4%B9%8BAutoHotKey/</url>
    <content><![CDATA[<ul>
<li><a href="https://www.autohotkey.com/" title="AutoHotKey官网">AutoHotKey官网</a></li>
<li>知乎专栏<a href="https://zhuanlan.zhihu.com/autohotkey">AutoHotkey 之美</a> (AutoHotkey 之美)</li>
<li><a href="https://sourceforge.net/projects/ahkcn/">AutoHotkey中文chm文档</a></li>
<li>[AutoHotkey中文在线文档][<a href="https://ahkcn.github.io/docs/AutoHotkey.htm]">https://ahkcn.github.io/docs/AutoHotkey.htm]</a></li>
</ul>
<p>马上就2018年了.最近为了能在2018年找到一份工作,一直在忙于学习前端的知识.<br>想想好久都没更新了,所以更新一篇吧,也算是休息一下.</p>
<h2 id="热键脚本语言之AutoHotKey"><a href="#热键脚本语言之AutoHotKey" class="headerlink" title="热键脚本语言之AutoHotKey"></a>热键脚本语言之AutoHotKey</h2><p>你可以在这看到效果演示视频：<code>TODO</code></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>AutoHotKey是一款免费的、Windows平台下开放源代码的热键脚本语言，是为游戏操纵杆和鼠标创建的热键，是自动按键。也可以通过命令调用系统接口及程序，并创建基于简单语言的图形化界面的执行程序。</p>
<p>简而言之,就是你可以用AutoHotKey来封装你在使用计算机时的频繁操作,然后给他定义热键,当你按下你定义的热键时,这些频繁操作将自动执行.</p>
<p>需要说在前面的是,AutoHotKey是一门脚本语言,有些脚本你直接拿来就可以用,而有些个性化的需求就需要你自己改写代码了.不过不用担心,AutoHotKey的语法非常简单,你肯定可以轻易学会.</p>
<span id="more"></span>

<h2 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h2><p><strong>下载</strong></p>
<ol>
<li>进入<a href="https://www.autohotkey.com/" title="AutoHotKey官网">AutoHotKey官网</a></li>
<li>点击绿色的 <strong>Download</strong> 按钮</li>
<li>标题为 <strong>Other Releases</strong> 下的 <em><em>AutoHotkey 1.1.</em> - previously known as AutoHotkey_L</em>*  就是了.点击即可下载.</li>
</ol>
<p><strong>安装</strong></p>
<ol>
<li>按照[快捷启动之Win+R][Win+R]这篇教程里说的,将下载下来的压缩包解压到 <strong>auxiliaryProgram</strong> 文件夹,就算安装完毕了</li>
</ol>
<p><strong>使用</strong></p>
<ul>
<li><p>安装好后我们还需要在非系统盘的根目录新建一个名为 <strong>AHKSet</strong> 的文件夹<br>该文件夹将专门存储后续编写的AHK脚本文件</p>
</li>
<li><p>在 <strong>auxiliaryProgram</strong> 文件夹,找到并打开刚才解压出来的子目录 <strong>AutoHotKey</strong></p>
</li>
</ul>
<p>该目录下应有以下文件:</p>
<p><img src="http://oy9dwtsnx.bkt.clouddn.com/autohotkeyfl.png" alt="AutoHotKeyfl" title="AutoHotKeyfl"></p>
<p>其中</p>
<p>第一个是<a href="https://www.autohotkey.com/" title="AutoHotKey官网">AutoHotKey官网</a>的url文件</p>
<p>第二个是AutoHotKey的英文文档.点击<a href="https://sourceforge.net/projects/ahkcn/">下载中文文档</a>.</p>
<p>第三个是AutoHotKey卸载以及升级的脚本</p>
<p>第四个是一个模板脚本,我们可以复制这个模板脚本到 <strong>AHKSet</strong> 文件夹<br>也可以通过在 <strong>AHKSet</strong> 文件夹空白处  <strong>&lt;=&gt;</strong>  右键 <strong>&lt;=&gt;</strong> 新建  <strong>&lt;=&gt;</strong>  AutoHotkey Script的方式创建一个空白的脚本.</p>
<ul>
<li>现在我们找到 <strong>AHKSet</strong> 文件夹 <strong>&lt;=&gt;</strong> 并为其新建快捷方式 <strong>&lt;=&gt;</strong> 将AHKSet文件夹的快捷方式重命名为 <strong>AS</strong> 或者 <strong>as</strong> 或者 <strong>ahkset</strong> 都行</li>
</ul>
<p><strong>&lt;=&gt;</strong> 重命名后右键选中 <strong>&lt;=&gt;</strong> 发送到  <strong>&lt;=&gt;</strong> 选中lnkSet.</p>
<p>Tips:<br>别选错了,是选AHKSet文件夹的  <strong>快捷方式</strong> . <strong>其后缀为.lnk</strong></p>
<p> 做完上步我们就可以通过 <strong>Win+R</strong> 热键  <strong>&lt;=&gt;</strong>  呼出运行窗口  <strong>&lt;=&gt;</strong>  键入上面定义的命令名  <strong>&lt;=&gt;</strong>  回车. 快速的打开我们的autohotkey脚本库了.如果有不知道这是在干嘛的,请移步看看下<a href="http://floatsyi.com/2017/11/02/%E5%BF%AB%E6%8D%B7%E5%90%AF%E5%8A%A8%E4%B9%8BWin+R/" title="快捷启动之Win+R">这篇教程</a>吧.</p>
<p> 现在让我们开始写第一个ahk脚本吧</p>
<h2 id="第一个ahk脚本"><a href="#第一个ahk脚本" class="headerlink" title="第一个ahk脚本"></a>第一个ahk脚本</h2><ol>
<li><p>在 <strong>AHKSet</strong> 文件夹中 <strong>&lt;=&gt;</strong> 右键 <strong>&lt;=&gt;</strong> 新建  <strong>&lt;=&gt;</strong>  AutoHotkey Script  <strong>&lt;=&gt;</strong>  重名为 MoveRunWindow</p>
</li>
<li><p>选中 MoveRunWindow.ahk <strong>&lt;=&gt;</strong> 右键  <strong>&lt;=&gt;</strong> Edit Script <strong>&lt;=&gt;</strong> 然后删除其中的内容</p>
</li>
<li><p>复制以下代码并粘贴到你脚本文档中</p>
</li>
</ol>
<figure class="highlight ahk"><table><tr><td class="code"><pre><span class="line">WindowToCenter(WinTitle)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">    WinGetPos,</span>,, Width, Height, <span class="variable">%WinTitle%</span></span><br><span class="line"><span class="built_in">    WinMove,</span> <span class="variable">%WinTitle%</span>,, (<span class="built_in">A_ScreenWidth</span>/<span class="number">2</span>)-(Width/<span class="number">2</span>), (<span class="built_in">A_ScreenHeight</span>/<span class="number">2</span>)-(Height/<span class="number">2</span>)</span><br><span class="line"><span class="built_in">    WinSet,</span> Transparent, <span class="number">220</span>, <span class="variable">%WinTitle%</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#r::</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">Send,</span> #&#123;r&#125;</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">WinWait,</span> 运行, , <span class="number">3</span></span><br><span class="line">if <span class="built_in">ErrorLevel</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">    MsgBox,</span> WinWait timed out.</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">WindowToCenter(运行)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>按CTRL+S 保存当前文档 <strong>&lt;=&gt;</strong> 然后再右键选中该脚本 <strong>&lt;=&gt;</strong> 选择 Run Script</p>
</li>
<li><p>现在按 Win+R 试试.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Win10-15063</category>
        <category>技巧篇</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Win10</tag>
        <tag>AutoHotKey</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub指令速查</title>
    <url>/2018/01/02/GitHub%E6%8C%87%E4%BB%A4%E9%80%9F%E6%9F%A5/</url>
    <content><![CDATA[<ul>
<li><a href="http://iissnan.com/progit/">《pro git》</a></li>
<li>关于.gitignore文件的配置 <a href="https://www.cnblogs.com/kevingrace/p/5690241.html">https://www.cnblogs.com/kevingrace/p/5690241.html</a></li>
</ul>
<h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><h3 id="创建本地分支"><a href="#创建本地分支" class="headerlink" title="创建本地分支"></a>创建本地分支</h3><ol>
<li><p>查看有哪些分支： <code>git branch</code></p>
</li>
<li><p>创建一个分支： <code>git branch name</code>  ，其中<code>name</code>是分支名</p>
</li>
<li><p>切换到分支： <code>git checkout name</code></p>
</li>
</ol>
<p>说明：可以将2和3合起来操作，创建+切换分支： <code>git checkout -b name</code></p>
<p>下面就可以在当前分支上进行相关的文件操作了。</p>
<h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><p>查看本地分支<br><code>git branch</code></p>
<p>查看远程分支<br><code>git branch -r</code></p>
<span id="more"></span>

<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><p><code> git checkout name</code></p>
<p>可以用 <code>git checkout path</code> 撤销未 <code>commit</code> 的更改,</p>
<h3 id="提交分支到github服务器"><a href="#提交分支到github服务器" class="headerlink" title="提交分支到github服务器"></a>提交分支到github服务器</h3><p><code>git push origin name</code></p>
<p>说明：分支提交到服务器上后，如果在本地对分支进行变更后，同样可以执行该操作,<br>将变更信息更新到github的分支上。</p>
<h3 id="将分支的更新内容合并到master分支"><a href="#将分支的更新内容合并到master分支" class="headerlink" title="将分支的更新内容合并到master分支"></a>将分支的更新内容合并到master分支</h3><p>切换到master分支， <code>git checkout master</code></p>
<p>合并name分支到当前mater分支： <code>git merge name</code></p>
<p>注意：这时合并到master上内容还没有提交到github上，需要push操作。</p>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>删除本地分支： <code>git branch -d name</code></p>
<p>删除服务器上的分支： <code>git push origin :name</code>   (分支名前的冒号代表删除)</p>
<h3 id="clone分支"><a href="#clone分支" class="headerlink" title="clone分支"></a>clone分支</h3><p>git clone</p>
<p>克隆github上的仓库到本地，默认会把仓库的所有内容clone到本地。</p>
<p>但只会在本地默认创建一个master分支。这时需要用 <code>git branch -r</code> 才能看到所有分支名字。</p>
<p>这时用 <code>git checkout</code> 分支名 操作就把远程分支取到本地。</p>
<p>这时再用不带-r的 <code>git branch</code> 命令就能看到刚才操作的分支名了。</p>
<h2 id="gh-pages"><a href="#gh-pages" class="headerlink" title="gh-pages"></a>gh-pages</h2><p>将当前dist目录下的所有文件 推送到远程分支gh-pages（如果没有远程分支gh-pages就创建，如果有，会推送失败，需要先删除远程分支gh-pages）</p>
<ol>
<li><code>git add -A</code></li>
<li><code>git commit -m &quot;...&quot; </code></li>
<li><code>git subtree push --prefix dist origin gh-pages</code></li>
</ol>
<p>将所有文件都推送到远程分支gh-pages（如果没有远程分支gh-pages就会创建，如果有，会推送失败，需要先删除远程分支gh-pages）</p>
<ol>
<li><code>git symbolic-ref HEAD refs/heads/gh-pages</code></li>
<li><code>git add -A</code></li>
<li><code>git commit -m &quot;...&quot;</code></li>
<li><code>git push origin gh-pages</code></li>
</ol>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>git clone  git address   克隆项目</p>
<p>git status   查看状态</p>
<p>git add -A  提交所有变化  到缓存区<br>git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)   到缓存区<br>git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件  到缓存区</p>
<p>git commit -m “注释”  将缓存区文件提交到本地仓库</p>
<p>git push origin master 把当前分支推送到远程仓库： master</p>
<p>Git基本常用命令如下：</p>
<p>mkdir： XX (创建一个空目录 XX指目录名)</p>
<p>pwd： 显示当前目录的路径。</p>
<p>git init 把当前的目录变成可以管理的git仓库，生成隐藏.git文件。</p>
<p>git add XX 把xx文件添加到暂存区去。</p>
<p>git commit –m “XX” 提交文件 –m 后面的是注释。</p>
<p>git status 查看仓库状态</p>
<p>git diff XX 查看XX文件修改了那些内容</p>
<p>git log 查看历史记录</p>
<p>git reset –hard HEAD^ 或者 git reset –hard HEAD~ 回退到上一个版本</p>
<pre><code>                (如果想回退到100个版本，使用git reset –hard HEAD~100 )
</code></pre>
<p>cat XX 查看XX文件内容</p>
<p>git reflog 查看历史记录的版本号id</p>
<p>git checkout — XX 把XX文件在工作区的修改全部撤销。</p>
<p>git rm XX 删除XX文件</p>
<p>git remote add origin <a href="https://github.com/zongyunqingfeng/testgit">https://github.com/zongyunqingfeng/testgit</a> 关联一个远程库</p>
<p>git push –u(第一次要用-u 以后不需要) origin master 把当前master分支推送到远程库</p>
<p>git clone <a href="https://github.com/zongyunqingfeng/testgit">https://github.com/zongyunqingfeng/testgit</a> 从远程库中克隆</p>
<p>git checkout –b dev 创建dev分支 并切换到dev分支上</p>
<p>git branch 查看当前所有的分支</p>
<p>git checkout master 切换回master分支</p>
<p>git merge dev 在当前的分支上合并dev分支</p>
<p>git branch –d dev 删除dev分支</p>
<p>git branch name 创建分支</p>
<p>git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作</p>
<p>git stash list 查看所有被隐藏的文件列表</p>
<p>git stash apply 恢复被隐藏的文件，但是内容不删除</p>
<p>git stash drop 删除文件</p>
<p>git stash pop 恢复文件的同时 也删除文件</p>
<p>git remote 查看远程库的信息</p>
<p>git remote –v 查看远程库的详细信息</p>
<p>git push origin master Git会把master分支推送到远程库对应的远程分支上</p>
]]></content>
      <categories>
        <category>速查</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>速查</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入理解</title>
    <url>/2018/01/25/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="立即执行函数-模拟块级作用域（私有作用域）"><a href="#立即执行函数-模拟块级作用域（私有作用域）" class="headerlink" title="立即执行函数 模拟块级作用域（私有作用域）"></a>立即执行函数 模拟块级作用域（私有作用域）</h2><p>这是一种常用的写法（起手式），将匿名函数用括号括起来形成函数表达式<br>在该函数表达式后使用括号立即调用该函数表达式<br>前面的分号，是为了避免代码压缩后，前边的代码结尾没写分号。</p>
<p>使用立即执行函数 模拟出来的块级作用域，可以避免污染全局变量<br>而且还可以减少闭包占用的内存问题，因为没有指向匿名函数的引用，<br>只要函数执行完毕，就可以立即销毁其作用域了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;( <span class="function"><span class="keyword">function</span>(<span class="params"> args </span>) </span>&#123;</span><br><span class="line"><span class="meta">  &#x27;use strict&#x27;</span></span><br><span class="line">  <span class="comment">// 这里是块级作用域（私有作用域）</span></span><br><span class="line">&#125; )( args );</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="私有变量-静态私有变量"><a href="#私有变量-静态私有变量" class="headerlink" title="私有变量 静态私有变量"></a>私有变量 静态私有变量</h2><p>利用 构造函数的块级作用域 实现私有变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ObjName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 函数内部的私有变量</span></span><br><span class="line">  <span class="keyword">var</span> privateVariable = <span class="number">10</span>;</span><br><span class="line">  <span class="comment">// 私有函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">privateFunction</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 公有、特权方法 有权访问私有变量和函数</span></span><br><span class="line">  <span class="built_in">this</span>.publicMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 访问私有变量 自加一</span></span><br><span class="line">    privateVariable++;</span><br><span class="line">    <span class="comment">// 调用私有函数 并return结果</span></span><br><span class="line">    <span class="keyword">return</span> privateFunction(privateVariable);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">this</span>.getPrivateVariable = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PrivateVariable;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> ObjName();</span><br><span class="line"><span class="comment">// 私有变量、函数，外界无法直接访问、调用</span></span><br><span class="line">instance.privateVariable; <span class="comment">// undefined</span></span><br><span class="line">instance.privateFunction(); <span class="comment">// TypeError: instance.privateFunction is not a function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 公开的特权函数 间接操纵</span></span><br><span class="line">instance.getPrivateVariable(); <span class="comment">//10</span></span><br><span class="line">instance.publicMethod(); <span class="comment">// 12</span></span><br><span class="line"><span class="comment">// 再实例化一个对象</span></span><br><span class="line"><span class="keyword">var</span> oo = <span class="keyword">new</span> ObjName();</span><br><span class="line"><span class="comment">// 结果返回 10</span></span><br><span class="line">oo.getPrivateVariable(); <span class="comment">// 10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>利用 立即执行函数的块级作用域 实现<span class="fontred">静态</span>私有变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// defind 定义</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 私有变量、函数</span></span><br><span class="line">  <span class="keyword">var</span> privateVariable = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">privateFunction</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 全局构造函数 不能使用 Var 声明</span></span><br><span class="line">  ObjName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 共有、特权函数</span></span><br><span class="line">  ObjName.prototype.publicMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 访问私有变量 自加一</span></span><br><span class="line">    privateVariable++;</span><br><span class="line">    <span class="comment">// 调用私有函数 并return结果</span></span><br><span class="line">    <span class="keyword">return</span> privateFunction(privateVariable);</span><br><span class="line">  &#125;;</span><br><span class="line">  ObjName.prototype.getPrivateVariable = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> privateVariable;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// use 使用</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> ObjName();</span><br><span class="line">o.privateVariable; <span class="comment">// undefined</span></span><br><span class="line">o.privateFunction(); <span class="comment">// TypeError: o.privateFunction is not a function</span></span><br><span class="line">o.getPrivateVariable(); <span class="comment">// 10;</span></span><br><span class="line">o.publicMethod(); <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再实例化一个对象</span></span><br><span class="line"><span class="keyword">var</span> oo = <span class="keyword">new</span> ObjName();</span><br><span class="line"><span class="comment">// 结果返回 12 而不是初始值 10 说明访问的是 o 修改后的变量（同一个变量 静态变量）。</span></span><br><span class="line">oo.getPrivateVariable(); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure>
<p>由于公有函数定义在构造函数的原型对象上，所有实例将共享所有的私有成员。</p>
<h2 id="单例模式与模块模式"><a href="#单例模式与模块模式" class="headerlink" title="单例模式与模块模式"></a>单例模式与模块模式</h2><p>JavaScript中，用对象字面量的方式实现单例模式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单例模式</span></span><br><span class="line"><span class="keyword">var</span> ObjName = &#123;</span><br><span class="line">  <span class="attr">name</span>: value,</span><br><span class="line">  <span class="attr">method</span>: fucntion () &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在此基础上，声明私有变量、函数，并返回一个包含有私有变量、函数映射的匿名的公有单例对象就是模块模式了。</p>
<p>如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以表达式的形式声明一个函数，以起到命名空间的作用</span></span><br><span class="line"><span class="keyword">var</span> ObjName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 声明私有成员</span></span><br><span class="line">  <span class="keyword">var</span> privateVariable = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">privateFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// return 一个包含有私有变量、函数映射的匿名的公有单例对象</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">getPrivateVariable</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> privateVariable;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">publicMethod</span> :  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      privateVariable++;</span><br><span class="line">      <span class="keyword">return</span> privateFunction();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时ObjName是一个全局函数，我们可以直接调用它</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="built_in">window</span>.ObjName();</span><br><span class="line"><span class="comment">// or var o = ObjName();</span></span><br><span class="line">o.getPrivateVariable();</span><br><span class="line">o.publicMethod();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="增强的模块模式"><a href="#增强的模块模式" class="headerlink" title="增强的模块模式"></a>增强的模块模式</h3><p>如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以表达式的形式声明一个函数，以起到命名空间的作用</span></span><br><span class="line"><span class="keyword">var</span> ObjName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 声明私有成员</span></span><br><span class="line">  <span class="keyword">var</span> privateVariable = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">privateFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实例化一个自定义对象 我们将对这个对象进行增强</span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> CustomType();</span><br><span class="line">  <span class="comment">// 添加特权、公有属性、方法</span></span><br><span class="line">  obj.publicVariable = <span class="number">1</span>;</span><br><span class="line">  obj.publicMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    privateVariable++;</span><br><span class="line">    <span class="keyword">return</span> privateFunction();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// return 增强后的对象</span></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时ObjName是一个全局函数，我们可以直接调用它</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="built_in">window</span>.ObjName();</span><br><span class="line"><span class="comment">// or var o = ObjName();</span></span><br><span class="line">o.getPrivateVariable();</span><br><span class="line">o.publicMethod();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 构造函数模式+原型模式实现自定义类型（类）</span><br><span class="line"></span><br><span class="line">​```js</span><br><span class="line">&#x27;use strict&#x27;</span><br><span class="line">// define 定义 类</span><br><span class="line">function ObjName( arg0,arg1,... )&#123;</span><br><span class="line">  this.arg0 = arg0;</span><br><span class="line">  this.arg1 = arg1;</span><br><span class="line">  ...</span><br><span class="line">  this.arr = [&quot;value0&quot;,&quot;value1&quot;,...]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ObjName.prototype = &#123;</span><br><span class="line">  // 将constructor指针指回自身 保证 instanceof字符以及isPrototpeOf() 判断的正确性</span><br><span class="line">  constructor : ObjName,</span><br><span class="line">  functionName : function()&#123;</span><br><span class="line">    // do something</span><br><span class="line">  &#125;,</span><br><span class="line">  functionName1 : function()&#123;</span><br><span class="line">    // do something</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// use 使用 类实例</span><br><span class="line">var instance = new ObjName( arg0,arg1,... );</span><br><span class="line">var newArr = instance.arr;</span><br><span class="line">instance.functionName0();</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="构造函数模式-动态原型模式实现自定义类型（类）"><a href="#构造函数模式-动态原型模式实现自定义类型（类）" class="headerlink" title="构造函数模式+动态原型模式实现自定义类型（类）"></a>构造函数模式+动态原型模式实现自定义类型（类）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="comment">// define 定义 类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ObjName</span>(<span class="params"> arg0,arg1,... </span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.arg0 = arg0;</span><br><span class="line">  <span class="built_in">this</span>.arg1 = arg1;</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">this</span>.arr = [<span class="string">&quot;value0&quot;</span>,<span class="string">&quot;value1&quot;</span>,...]</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span>( <span class="keyword">typeof</span> <span class="built_in">this</span>.functionName0 !== <span class="string">&#x27;function&#x27;</span> )&#123;</span><br><span class="line">    <span class="comment">/* 使用动态原型模式时，不能使用对象字面量重写原型对象。</span></span><br><span class="line"><span class="comment">    因为这会切断实例对象与其构造函数的原型对象的联系。*/</span></span><br><span class="line">    ObjName.prototype.functionName0 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">    &#125;;</span><br><span class="line">    ObjName.prototype.functionName1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">    &#125;;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use 使用 类实例</span></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> ObjName( arg0,arg1,... );</span><br><span class="line"><span class="keyword">var</span> newArr = instance.arr;</span><br><span class="line">instance.functionName0();</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="构造函数模式-原型模式实现继承（组合继承）"><a href="#构造函数模式-原型模式实现继承（组合继承）" class="headerlink" title="构造函数模式+原型模式实现继承（组合继承）"></a>构造函数模式+原型模式实现继承（组合继承）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="comment">// define SuperType 定义 父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"> arg0,arg1,... </span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.arg0 = arg0;</span><br><span class="line">  <span class="built_in">this</span>.arg1 = arg1;</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">this</span>.arr = [<span class="string">&quot;value0&quot;</span>,<span class="string">&quot;value1&quot;</span>,...]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define SuperType prototype function 定义 父类的原型对象的属性函数</span></span><br><span class="line">SuperType.prototype.superTypeFunctionName10 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.superTypeFunctionName11 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// define SubTypeType 定义 子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubTypeType</span>(<span class="params"> arg0,arg1,arg2,... </span>) </span>&#123;</span><br><span class="line">  SuperType.call( <span class="built_in">this</span>,arg0,arg1,... );</span><br><span class="line">  <span class="comment">// or SuperType.apply(this,arguments);</span></span><br><span class="line">  <span class="built_in">this</span>.arg2 = arg2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SubTypetype prototype 指向 SuperType 的实例对象 形成原型链 实现继承</span></span><br><span class="line">SubTypeType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"><span class="comment">// 构造函数指针指回自己 保证 instanceof字符以及isPrototpeOf() 判断的正确性</span></span><br><span class="line">SubTypeType.prototype.constructor = SubTypeType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// define SubTypeType prototype function 定义 子类的原型对象的属性函数</span></span><br><span class="line">SubTypeType.prototype.SubTypeFunctionName0 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line">SubTypeType.prototype.SubTypeFunctionName1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use 使用 继承父类后的子类 类实例</span></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubTypeType( arg0,arg1,arg2,... );</span><br><span class="line"><span class="keyword">var</span> newArr = instance.arr;</span><br><span class="line">instance.superTypeFunctionName10();</span><br><span class="line">instance.SubTypeFunctionName0();</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由于组合式继承 调用了两次父类的构造函数，有稍稍稍微的内存损耗。<br>就有了如下 <strong>寄生组合式继承</strong></p>
<h2 id="构造函数模式-寄生动态原型模式实现继承（寄生组合式继承）"><a href="#构造函数模式-寄生动态原型模式实现继承（寄生组合式继承）" class="headerlink" title="构造函数模式+寄生动态原型模式实现继承（寄生组合式继承）"></a>构造函数模式+寄生动态原型模式实现继承（寄生组合式继承）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params"> SubType, SuperType </span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*这里为何需要调用object函数去构造一个新的对象，而不直接让SubType.prototype=SuperType.prototype呢？</span></span><br><span class="line"><span class="comment">    原因是如果这么做的话，当我们想给SubType的prototype里面添加共享属性或者方法时，</span></span><br><span class="line"><span class="comment">    如果其prototype指向的是SuperType的prototype</span></span><br><span class="line"><span class="comment">    那么在SubType的prototype里添加的属性和方法也会反映在SuperType的prototype里面，</span></span><br><span class="line"><span class="comment">    这明显是不合理的，这样做的后果是当我们只想使用SuperType时，也能看见SubType往里面扔的方法和属性。</span></span><br><span class="line"><span class="comment">    所以需要每个构造函数都需要持有自己专用的prototype对象。*/</span></span><br><span class="line">    <span class="keyword">var</span> prototype = object( SuperType.prototype );</span><br><span class="line">    prototype.constructor = SubType;</span><br><span class="line">    SubType.prototype = prototype;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"> arg0,... </span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.arg0 = arg0;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> SuperType.prototype.superTypeFunctionName10 !== <span class="string">&quot;function&quot;</span> ) &#123;</span><br><span class="line">        SuperType.prototype.superTypeFunctionName10 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// do something</span></span><br><span class="line">        &#125;;</span><br><span class="line">        SuperType.prototype.superTypeFunctionName11 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// do something</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubTypeType</span>(<span class="params"> arg0, arg1,... </span>) </span>&#123;</span><br><span class="line">    SuperType.call( <span class="built_in">this</span>, arg0 );</span><br><span class="line">    <span class="comment">// or SuperType.apply( this,arguments );</span></span><br><span class="line">    <span class="built_in">this</span>.arg1 = arg1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> SuperType.prototype.superTypeFunctionName10 !== <span class="string">&quot;function&quot;</span> ) &#123;</span><br><span class="line">        SuperType.prototype.superTypeFunctionName10 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// do something</span></span><br><span class="line">        &#125;;</span><br><span class="line">        SuperType.prototype.superTypeFunctionName11 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// do something</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 寄生继承函数</span></span><br><span class="line">inheritPrototype( SubType, SuperType );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> Sub( arg0,arg1,... );</span><br><span class="line">instance.superTypeFunctionName10();</span><br><span class="line">instance.superTypeFunctionName11();</span><br></pre></td></tr></table></figure>

<h2 id="函数表达式之递归"><a href="#函数表达式之递归" class="headerlink" title="函数表达式之递归"></a>函数表达式之递归</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params"> num </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>( num &lt;= <span class="number">1</span> )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num * factorial( num - <span class="number">1</span> );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样调用会出错</span></span><br><span class="line"><span class="keyword">var</span> instance = factorial;</span><br><span class="line">factorial = <span class="literal">null</span>;</span><br><span class="line">instance(<span class="number">4</span>); <span class="comment">// erroe</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 arguments.callee指向正在执行的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params"> num </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>( num &lt;= <span class="number">1</span> )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee( num - <span class="number">1</span> );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是在严格模式下arguments.callee不能使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 函数表达式 解决</span></span><br><span class="line"><span class="keyword">var</span> factorial = ( <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"> num </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>( num &lt;= <span class="number">1</span> )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num * f( num - <span class="number">1</span> );</span><br><span class="line">  &#125;</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>

<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>函数中的函数称为闭包函数。</p>
<h3 id="释放被闭包占用的内存"><a href="#释放被闭包占用的内存" class="headerlink" title="释放被闭包占用的内存"></a>释放被闭包占用的内存</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 声明一个简单的闭包函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"> arg0 </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"> arg1 </span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> arg0 + arg1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建函数</span></span><br><span class="line"><span class="keyword">var</span> tem = f(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">tem(<span class="number">5</span>); <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在匿名函数执行完成后</span></span><br><span class="line"><span class="comment">显示的将指向 return出来的匿名函数的 指针指向null</span></span><br><span class="line"><span class="comment">以释放因为闭包而占用的内存</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">tem = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h3 id="闭包只取得包含函数（或称外部函数）中任意变量的最后一个值"><a href="#闭包只取得包含函数（或称外部函数）中任意变量的最后一个值" class="headerlink" title="闭包只取得包含函数（或称外部函数）中任意变量的最后一个值"></a>闭包只取得包含函数（或称外部函数）中任意变量的<span class="fontred">最后</span>一个值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 存放函数的数组</span></span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> i;</span><br><span class="line">  <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ )&#123;</span><br><span class="line">    <span class="comment">// 循环添加函数到数组</span></span><br><span class="line">    result[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回一个函数数组</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fArr = f();</span><br><span class="line"></span><br><span class="line">fArr[<span class="number">0</span>](); <span class="comment">// 10</span></span><br><span class="line">fArr[<span class="number">1</span>](); <span class="comment">// 10</span></span><br><span class="line">...</span><br><span class="line">fArr[<span class="number">8</span>](); <span class="comment">// 10</span></span><br><span class="line">fArr[<span class="number">9</span>](); <span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 函数数组中的所有函数的 返回值 都为 10</span></span><br></pre></td></tr></table></figure>

<p>让函数return一个闭包函数，让这个函数数组中的函数的返回值符合预期。如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 存放函数的数组</span></span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> i;</span><br><span class="line">  <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ )&#123;</span><br><span class="line">    <span class="comment">// 循环添加函数到数组</span></span><br><span class="line">    result[i] = <span class="function"><span class="keyword">function</span> (<span class="params"> num </span>) </span>&#123;</span><br><span class="line">      <span class="comment">// return一个匿名的闭包函数</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;( i );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回一个函数数组</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fArr = f();</span><br><span class="line"></span><br><span class="line">fArr[<span class="number">0</span>](); <span class="comment">// 0</span></span><br><span class="line">fArr[<span class="number">1</span>](); <span class="comment">// 1</span></span><br><span class="line">...</span><br><span class="line">fArr[<span class="number">8</span>](); <span class="comment">// 8</span></span><br><span class="line">fArr[<span class="number">9</span>](); <span class="comment">// 9</span></span><br><span class="line"><span class="comment">// 函数数组中的所有函数的 返回值 都为 10</span></span><br></pre></td></tr></table></figure>

<h3 id="闭包中的-this关键字-在非严格模式下将指向-window-对象"><a href="#闭包中的-this关键字-在非严格模式下将指向-window-对象" class="headerlink" title="闭包中的 this关键字 在非严格模式下将指向 window 对象"></a>闭包中的 this关键字 在<span class="fontred">非严格模式</span>下将指向 window 对象</h3><p>如下<br>“</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> Obj = &#123;</span><br><span class="line">  <span class="attr">value</span>:<span class="string">&quot;B&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getValue</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.value;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 调用 getValue() 返回后的 匿名闭包函数</span></span><br><span class="line">Obj.getValue()(); <span class="comment">// A</span></span><br></pre></td></tr></table></figure>

<p>返回的是 A 而不是预期中的 B<br>因为闭包中的 this关键字 在<span class="fontred">非严格模式</span>下将指向 window 对象<br>而不是它包含函数（外部函数）作用域中的 Obj 对象。</p>
<p>在严格模式（<code>&#39;use strict&#39;</code>）下会报错：typeError: this is undefined</p>
<p>要想得到预期效果，必须将包含函数（外部函数）作用域中的 Obj 对象<br>以变量的形式的传入闭包函数的作用域中。如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> Obj = &#123;</span><br><span class="line">  <span class="attr">value</span>:<span class="string">&quot;B&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getValue</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> that.value;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 调用 getValue() 返回后的 匿名闭包函数</span></span><br><span class="line">Obj.getValue()(Obj); <span class="comment">// B</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>自考本科之英语学习规划</title>
    <url>/2019/05/30/%E8%87%AA%E8%80%83%E6%9C%AC%E7%A7%91%E4%B9%8B%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p>没必要搞了, 英语的词太多了, 有规律的很少, 用的多就记住了, 用的少就忘了, 所以随缘去吧</p>
<h2 id="资源网站"><a href="#资源网站" class="headerlink" title="资源网站"></a>资源网站</h2><ul>
<li><a href="https://www.etymonline.com/">词源分析</a></li>
<li><a href="https://github.com/shadowsocks/shadowsocks-windows">内(ke)网(xue)穿(shang)透(wang)</a></li>
</ul>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>文章由语句按照一定的规律排列而成.<br>在英语中最小的单位是A-Z的26个字母.<br>26个字母按照一定规律互相组合成单词.<br>单词有词根词缀,以及音标.<br>单词可以指代某事物,某一系列事物,某事物与某事物的关系.<br>单词又按照一定规律组成语句.</p>
<span id="more"></span>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>记住单词与事物之间一一对应的关系, 再感受事物与事物之间的联系与单词与单词之间的联系,就足以应付考试.</p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p><a href="https://www.bilibili.com/video/av45778956">理念指导</a><br><a href="https://www.zhihu.com/question/264195321/answer/564548984">如何高效地学习英语语法？ —— @知乎潇峰学长</a></p>
<ol>
<li>通过词根词缀,以及音标快速在脑海中将单词与其所指代事物建立联系.</li>
<li>先记住基本的常用单词,以辅助记忆其他单词.</li>
<li>提高单词与事物关联的速度与深度, 使用语句和情景来记忆生词.</li>
<li>记短语为造句做准备.</li>
<li>感受语句的组成规律与事物间的联系规律的映射.</li>
</ol>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h3 id="音标"><a href="#音标" class="headerlink" title="音标"></a>音标</h3><p><a href="https://www.bilibili.com/video/av5032839?from=search&seid=14465741167369013595">周育如 K.K 音标英文教学（自然发音）</a><br><a href="https://www.bilibili.com/video/av40140473/?p=1">K.K音标发音示例</a></p>
<h3 id="词性"><a href="#词性" class="headerlink" title="词性"></a>词性</h3><p><a href="http://r.photo.store.qq.com/psb?/V12iDrZG1mzmnh/JzBBxZrsgbyNtJlBVaEVclJpMdRe.M115S6kiuevBaE!/r/dL4AAAAAAAAA">英语八大词性</a></p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>语句成分: 主谓宾、定状补.</p>
<p>语言的构造级别: 单词组成短语，短语组成句子，句子组成段落，段落组成篇章.</p>
<p><a href="https://www.zhihu.com/question/284241879/answer/557809880">为什么语法中会有主语、谓语和宾语? —— 知乎@英语大白</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/44043924">英语中”谓语”等于”谓语动词”吗? —— 知乎@汪小莉</a></p>
<p><a href="https://www.zhihu.com/question/20871034/answer/559485533">如何学好英语(定语和状语)？ ——知乎@英语大白</a></p>
<p><a href="https://www.zhihu.com/question/21258983/answer/558145856">英语中补语与表语的区别是什么？ ——知乎@英语大白</a></p>
<ul>
<li>主语：subject，主题科目的意思。(代词,名词,非-谓语动词,从句: i \ she \ the book)</li>
<li>谓语：predicate，断言叙述的意思。 (动词: read \ die)</li>
<li>宾语：object，对象目标的意思。(代词,名词,非-谓语动词,从句)</li>
<li>状语：adverbial，副词的，构词：ad（加强..的）+verb（动词）+ial（形容性），固adverbial是修饰动词的一种成分，叫做 状语。 (状语修饰动词,多为介词, 连词: He died <strong>in Shanghai.</strong> \  will do that <strong>tomorrow</strong> \ I love her <strong>because she is charming</strong>)</li>
<li>补语：complement，补充补足的意思。</li>
<li>定语：attribute，属性特征、归于…的意思。(定语修饰名词,多为形容词: <strong>beautiful</strong> girl)</li>
</ul>
<h4 id="五种基本句型"><a href="#五种基本句型" class="headerlink" title="五种基本句型"></a>五种基本句型</h4><p>动词按照后面是否可接宾语，我们一般分为：及物动词，不及物动词，系动词。这3种动词类型，决定了5种基本句型：</p>
<p><img src="http://r.photo.store.qq.com/psb?/V12iDrZG1mzmnh/C9luVxIbjjO3XhfTzazw2hrM.vFMe82m2DEzTIK2X38!/r/dLYAAAAAAAAA" alt="3种动词决定5种基本句型"></p>
<h4 id="高级语法-时态"><a href="#高级语法-时态" class="headerlink" title="高级语法(时态)"></a>高级语法(时态)</h4><p><a href="https://www.bilibili.com/video/av20479837">2019考研刘晓艳英语-语法基础</a><br><a href="https://www.bilibili.com/video/av45888202">英语语法 可汗学院 中文字幕</a><br><a href="https://zhuanlan.zhihu.com/p/58712960">英语语法笔记各期目录汇总 —— @知乎虫二无虫</a></p>
<h3 id="单词构成"><a href="#单词构成" class="headerlink" title="单词构成"></a>单词构成</h3><p><a href="https://www.bilibili.com/video/av31332674?from=search&seid=10228232132229460844">词根词缀串讲</a></p>
<p><img src="http://r.photo.store.qq.com/psb?/V12iDrZG1mzmnh/F5yL8fvUPYxpo5sZ9GOPG*y.qC2NyAnYTJlPXYxoRcY!/r/dEYBAAAAAAAA" alt="单词构成"></p>
<h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p><a href="https://www.zhihu.com/question/278666171/answer/401570810">为什么英语中的高级词汇全是法语借词？ ——  知乎 @庆晓筱</a><br><a href="https://www.zhihu.com/question/20306979/answer/261825758">拉丁语使用人并不多，为什么西方国家那么多中学大学仍有拉丁语课？ —— 知乎 @安森垚</a></p>
<h3 id="词缀"><a href="#词缀" class="headerlink" title="词缀"></a>词缀</h3><h3 id="词根"><a href="#词根" class="headerlink" title="词根"></a>词根</h3><h3 id="单词记忆"><a href="#单词记忆" class="headerlink" title="单词记忆"></a>单词记忆</h3><p>需具备基本的词汇基础, 由于是使用英语解释英语,遇到不会的生词可以查其词源了解其意思.千万不可直接查中文意思.</p>
<p><a href="https://www.bilibili.com/video/av18487944">【英语4千核心词汇】美音+图+英文解释+例句+听力口语阅读同时练</a></p>
<h3 id="基本常用单词"><a href="#基本常用单词" class="headerlink" title="基本常用单词"></a>基本常用单词</h3><h4 id="代词"><a href="#代词" class="headerlink" title="代词"></a>代词</h4><p><a href="https://zhuanlan.zhihu.com/p/26844935">英语入门 代词 —— 知乎@LAN</a></p>
<p><img src="http://r.photo.store.qq.com/psb?/V12iDrZG1mzmnh/OyEFOdFAu0fJF0rBoVnd9BUgVrNxf6LEBH.NeEvUm48!/r/dFMBAAAAAAAA" alt="代词"></p>
<h4 id="介词"><a href="#介词" class="headerlink" title="介词"></a>介词</h4><p><a href="https://www.zhihu.com/question/20530689">英语的介词该如何使用? —— 知乎</a></p>
<p><img src="http://r.photo.store.qq.com/psb?/V12iDrZG1mzmnh/I6Q5Rm8dbXG7kSrxbAijidBG4pHjRgL9kwmNKjEMMGI!/r/dFMBAAAAAAAA" alt="介词"><br><img src="http://r.photo.store.qq.com/psb?/V12iDrZG1mzmnh/JTSa3XIa4zpywUFSAf68YpUXF1TCUg9*rZMwsG.WnLw!/r/dFMBAAAAAAAA" alt="介词解析"><br><img src="http://r.photo.store.qq.com/psb?/V12iDrZG1mzmnh/dokz09k5pb4rcupx1PDlEvlbGAUMJ.7.bBIAVcsxCyg!/r/dD4BAAAAAAAA" alt="介词词组"></p>
<h4 id="连词"><a href="#连词" class="headerlink" title="连词"></a>连词</h4><p><img src="http://r.photo.store.qq.com/psb?/V12iDrZG1mzmnh/7KtjtwaGUp8v7YcxfuLpGEk6yE18mQLM3VALYxipi4o!/r/dFQBAAAAAAAA" alt="连词"></p>
<h4 id="动词"><a href="#动词" class="headerlink" title="动词"></a>动词</h4><p><a href="https://zhuanlan.zhihu.com/p/42672172">英语中常用的不规则动词表(—— 知乎@Robin啊)</a></p>
<p><img src="http://r.photo.store.qq.com/psb?/V12iDrZG1mzmnh/JjUznizY5E2ItCz2zIv9dUSc24XZUEyrMEXEm21U4Ho!/r/dIMAAAAAAAAA" alt="动词"><br><img src="http://r.photo.store.qq.com/psb?/V12iDrZG1mzmnh/0vTwoD0EKQqZuCXaOi15oVI2pwa6zlZ9Wb5Vwaspa2A!/r/dFMBAAAAAAAA" alt="动词"><br><img src="http://r.photo.store.qq.com/psb?/V12iDrZG1mzmnh/CvP29s.euI0wKbcK38*xrZ*6V1JjrCtydG4qW9fDrwo!/r/dLYAAAAAAAAA" alt="动词"><br><img src="http://r.photo.store.qq.com/psb?/V12iDrZG1mzmnh/6.K*EDFRsk4dNXpzpi8qsZgCpEJcCfw0F*To94ziZko!/r/dL8AAAAAAAAA" alt="动词"><br><img src="http://r.photo.store.qq.com/psb?/V12iDrZG1mzmnh/dZsVZiVoHenGWWF8XsZPjkBe7huyzOovkaPXGD.GuMI!/r/dFMBAAAAAAAA" alt="动词"><br><img src="http://r.photo.store.qq.com/psb?/V12iDrZG1mzmnh/Z4D3dCQAfuyQROSodXXwcQtlVSwKniPptuH5MiIB9vg!/r/dD4BAAAAAAAA" alt="动词"><br><img src="http://r.photo.store.qq.com/psb?/V12iDrZG1mzmnh/.nFQirMUboc4GqHBeRz39g.*BoB13RO29m1QZvxisOo!/r/dL8AAAAAAAAA" alt="动词"></p>
<h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><p><code>TODO</code></p>
<h2 id="应试之余"><a href="#应试之余" class="headerlink" title="应试之余"></a>应试之余</h2><p>看美剧听台词说台词.读英文诗.看英文文档.</p>
<p><a href="https://www.bilibili.com/video/av4832217/?from=search&seid=3858014814852675633">乔布斯斯坦福大学演讲（高清 中英文字幕）</a><br><a href="https://www.bilibili.com/video/av54643562">中国学生在美国大学哲学系毕业典礼的演讲：哲学的意义</a><br><a href="https://www.bilibili.com/video/av54101545">【十分钟速成课：物理】第38集-几何光学</a><br><a href="https://www.youtube.com/watch?v=e-5obm1G_FY">学习JavaScript函数式编程 - JSUnconf 2016</a></p>
]]></content>
      <categories>
        <category>学习规划</category>
        <category>英语</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>英语学习规划</tag>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>代码编辑器 vscode</title>
    <url>/2019/09/26/%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8-vscode/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.slant.co/topics/9757/~ide">What is the best IDE?</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/microsoft/vscode">vscode</a></li>
<li>[vscode home page][<a href="https://code.visualstudio.com/]">https://code.visualstudio.com/]</a></li>
</ul>
<h2 id="安装编辑器-vscode"><a href="#安装编辑器-vscode" class="headerlink" title="安装编辑器 vscode"></a>安装编辑器 <a href="https://github.com/microsoft/vscode">vscode</a></h2><ul>
<li><a href="https://github.com/FloatingShuYin/development-environment-manual/blob/master/javascript.md#%E5%AE%89%E8%A3%85%E7%BC%96%E8%BE%91%E5%99%A8-vscodevisual-studio-code">安装编辑器: vscode(visual studio code)</a></li>
</ul>
]]></content>
      <tags>
        <tag>vscode</tag>
        <tag>编辑器</tag>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>代码规范与项目结构</title>
    <url>/2019/09/26/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/84766471">如何更优雅的编写CSS代码</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/46830303">聊聊编程原则（OOP，SOLID）</a></li>
<li><a href="https://insights.thoughtworks.cn/do-you-really-know-solid/">你真的了解 SOLID 吗</a></li>
<li><a href="https://www.zhihu.com/question/63734103">为何大量设计模式在动态语言中不适用?</a></li>
<li><a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-angular">conventional-changelog</a></li>
<li><a href="https://chris.beams.io/posts/git-commit/">How to Write a Git Commit Message</a></li>
<li><a href="https://semver.org/lang/zh-CN/">Semantic Versioning 2.0.0</a></li>
<li><a href="https://stackshare.io/stackups/codecov-vs-coveralls">Codecov vs Coveralls: What are the differences?</a></li>
<li><a href="https://docs.codecov.io/docs">codecov docs</a></li>
<li><a href="https://github.com/jaebradley/fruit">fruit</a></li>
<li><a href="https://floatsyi.com/2019/11/09/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/">持续集成</a></li>
<li><a href="https://floatsyi.com/2019/11/14/bable-jest/">bable-jest</a></li>
<li><a href="https://floatsyi.com/2019/11/13/JavaScript-compiler-Babel/">JavaScript compiler: Babel</a></li>
<li><a href="https://floatsyi.com/2019/11/13/JavaScript-Testing-Framework-jest/">JavaScript Testing Framework: jest</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/okonet/lint-staged">lint-staged</a></li>
<li><a href="https://github.com/yyx990803/yorkie">yorkie</a></li>
<li><a href="https://github.com/typicode/husky">husky</a></li>
<li><a href="https://github.com/conventional-changelog/commitlint">commitlint</a></li>
<li><a href="https://github.com/eslint/eslint">eslint</a></li>
<li><a href="https://github.com/chalk/chalk">chalk</a></li>
<li><a href="https://github.com/semantic-release/semantic-release">semantic-release</a></li>
<li><a href="https://travis-ci.org/">travis</a></li>
<li><a href="https://github.com/facebook/jest">jest</a></li>
<li><a href="https://github.com/nickmerwin/node-coveralls">coveralls</a></li>
<li><a href="https://www.npmjs.com/package/codecov">codecov</a></li>
<li><a href="https://github.com/kentcdodds/cross-env">cross-env</a></li>
</ul>
<span id="more"></span>

<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><p>规范的代码能减少团队成员间的沟通成本, 而规范\优雅的 Standard 代码, 则使人赏心悦目!</p>
<h3 id="Standard"><a href="#Standard" class="headerlink" title="Standard"></a>Standard</h3><p><a href="https://github.com/standard/standard">Standard</a> 是现在 JS 最流行的规范, 也是能让你的代码最简洁的规范.</p>
<p>细则如下:</p>
<ul>
<li>使用两个空格 – 进行缩进</li>
<li>字符串使用单引号 – 需要转义的地方除外</li>
<li>不再有冗余的变量 – 这是导致 大量 bug 的源头!</li>
<li>无分号 – 这没什么不好。不骗你！</li>
<li>行首不要以 <code>(</code>, <code>[</code>, or `<code>\</code> 开头, 这是省略分号时唯一会造成问题的地方</li>
<li>关键字后加空格 <code>if (condition) &#123; ... &#125;</code></li>
<li>函数名后加空格 <code>function name (arg) &#123; ... &#125;</code></li>
<li>坚持使用全等 <code>===</code> 摒弃 <code>==</code> 一但在需要检查 <code>null || undefined</code> 时可以使用 <code>obj == null</code>。</li>
<li>一定要处理 Node.js 中错误回调传递进来的 err 参数。</li>
<li>使用浏览器全局变量时加上 window 前缀 – document 和 navigator 除外</li>
<li>避免无意中使用到了这些命名看上去很普通的全局变量， open, length, event 还有 name。</li>
</ul>
<p>你可以在这里查看实际的<a href="https://github.com/standard/standard/blob/master/docs/RULES-zhcn.md#javascript-standard-style">例子</a>以加深理解</p>
<h3 id="ESLints"><a href="#ESLints" class="headerlink" title="ESLints"></a>ESLints</h3><p><a href="https://github.com/eslint/eslint">ESLints</a> 是一个实时代码格式检查工具, 它也可以在你保存文件修改时自动按照你定义好的 JS 代码规范来格式化你的代码.</p>
<p><a href="http://eslint.cn/">ESLints 中文网</a></p>
<p>你可以参考下面这篇文章以及 <a href="http://eslint.cn/docs/user-guide/getting-started">ESLints 官方文档</a>配置适合自己的 ESLints 配置文件:</p>
<p><a href="https://juejin.im/post/5bab946cf265da0ae92a75ca#heading-0">深入浅出 eslint ——关于我学习 eslint 的心得 —— @掘金 时长: 5分钟</a></p>
<p>ESLints 的配置文件一般包含在脚手架提供的项目模板中,<br>不需要我们自己写,<br>不过参考上面的文档现配一个也很简单.</p>
<p>如果你需要自己写 eslint 插件的话:</p>
<p><a href="https://juejin.im/post/5bb079ede51d450e5d0b350a">开发 eslint 规则 —— 掘金 时长: 20分钟</a></p>
<h4 id="在-ESLints-中使用-Standard-规范"><a href="#在-ESLints-中使用-Standard-规范" class="headerlink" title="在 ESLints 中使用 Standard 规范"></a>在 ESLints 中使用 Standard 规范</h4><p><a href="https://github.com/standard/eslint-config-standard">eslint-config-standard</a></p>
<h4 id="在-vscode-编辑器中配置-Prettier-Standard-和-ESlint-扩展"><a href="#在-vscode-编辑器中配置-Prettier-Standard-和-ESlint-扩展" class="headerlink" title="在 vscode 编辑器中配置 Prettier-Standard 和 ESlint 扩展"></a>在 vscode 编辑器中配置 <a href="https://marketplace.visualstudio.com/items?itemName=numso.prettier-standard-vscode">Prettier-Standard</a> 和 <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESlint</a> 扩展</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 插件名： ESLint插件的配置</span></span><br><span class="line"><span class="comment">   * 描述：根据定义的规则对相应的语言的语法风格进行严格的约束，以统一编码风格降低阅读沟通成本</span></span><br><span class="line"><span class="comment">   * 详情：https: //marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 禁用默认 vscode 的 js 格式化</span></span><br><span class="line">  <span class="string">&quot;javascript.validate.enable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;editor.formatOnPaste&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;editor.formatOnSave&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;eslint.autoFixOnSave&quot;</span>: <span class="literal">true</span>, <span class="comment">//  启用保存时自动修复,默认只支持 .js 文件</span></span><br><span class="line">  <span class="string">&quot;eslint.validate&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;javascript&quot;</span>, <span class="comment">//  用 eslint 的规则检测 js 文件</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;language&quot;</span>: <span class="string">&quot;vue&quot;</span>, <span class="comment">// 检测vue文件</span></span><br><span class="line">      <span class="attr">&quot;autoFix&quot;</span>: <span class="literal">true</span> <span class="comment">//  为 vue 文件开启保存自动修复的功能</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;language&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;autoFix&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;[javascript]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;numso.prettier-standard-vscode&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;[jsonc]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;vscode.json-language-features&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;[javascriptreact]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;numso.prettier-standard-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 插件名：prettier</span></span><br><span class="line"><span class="comment">   * 描述：按照设定的规则格式化对应的文档</span></span><br><span class="line"><span class="comment">   * 详情：https: //marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode</span></span><br><span class="line"><span class="comment">   * 注意：此插件被 Vetur 插件依赖</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 使用单引号？</span></span><br><span class="line">  <span class="string">&quot;prettier.singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 要分号？</span></span><br><span class="line">  <span class="string">&quot;prettier.semi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">//将&gt;多行JSX元素放在最后一行的末尾，而不是单独放在下一行</span></span><br><span class="line">  <span class="string">&quot;prettier.jsxBracketSameLine&quot;</span>: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure>

<h2 id="lint-staged-husky-和-commitlint"><a href="#lint-staged-husky-和-commitlint" class="headerlink" title="lint-staged , husky 和 commitlint"></a><a href="https://github.com/okonet/lint-staged">lint-staged</a> , <a href="https://github.com/typicode/husky">husky</a> 和 <a href="https://github.com/conventional-changelog/commitlint">commitlint</a></h2><p>在我们要将代码 commit 到本地仓库时, 对 commit message 的格式和 staged files 的代码样式进行规范, 对一个合格的团队来说是非常重要的!<br>而<a href="https://github.com/okonet/lint-staged">lint-staged</a> , <a href="https://github.com/typicode/husky">husky</a> 和 <a href="https://github.com/conventional-changelog/commitlint">commitlint</a> 就是可以帮助我们对 commit message 的格式和 staged files 的代码样式进行规范的工具.</p>
<h3 id="lint-staged-与-eslint-结合使用"><a href="#lint-staged-与-eslint-结合使用" class="headerlink" title="lint-staged 与 eslint 结合使用"></a>lint-staged 与 eslint 结合使用</h3><p>引入 lint-staged 和 eslint</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D lint-staged eslint</span><br></pre></td></tr></table></figure>

<p><code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;*.js&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;eslint --fix&quot;</span>,</span><br><span class="line">      <span class="string">&quot;git add&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="git-hook-husky"><a href="#git-hook-husky" class="headerlink" title="git hook husky"></a>git hook <a href="https://github.com/typicode/husky">husky</a></h3><p>引入 husky</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -D husky</span><br></pre></td></tr></table></figure>

<h4 id="简单的使用-verifyCommit-js"><a href="#简单的使用-verifyCommit-js" class="headerlink" title="简单的使用 verifyCommit.js"></a>简单的使用 <code>verifyCommit.js</code></h4><p><code>package.json</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;husky&quot;: &#123;</span><br><span class="line">    &quot;hooks&quot;: &#123;</span><br><span class="line">      &quot;pre-commit&quot;: &quot;lint-staged&quot;,</span><br><span class="line">      &quot;commit-msg&quot;: &quot;node scripts/verifyCommit.js&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 的 <code>verifyCommit.js</code> 可参考 <a href="">vue-next</a> 项目<br>使用 Angular 团队的 commit 约定 : <a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-angular">conventional-changelog</a><br><code>verifyCommit.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Invoked on the commit-msg git hook by yorkie.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> msgPath = process.env.GIT_PARAMS</span><br><span class="line"><span class="keyword">const</span> msg = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">  .readFileSync(msgPath, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  .trim()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> commitRE = <span class="regexp">/^(revert: )?(feat|fix|docs|dx|style|refactor|perf|test|workflow|build|ci|chore|types|wip)(\(.+\))?: .&#123;1,50&#125;/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!commitRE.test(msg)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log()</span><br><span class="line">  <span class="built_in">console</span>.error(</span><br><span class="line">    <span class="string">`  <span class="subst">$&#123;chalk.bgRed.white(<span class="string">&#x27; ERROR &#x27;</span>)&#125;</span> <span class="subst">$&#123;chalk.red(</span></span></span><br><span class="line"><span class="subst"><span class="string">      <span class="string">`invalid commit message format.`</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    )&#125;</span>\n\n`</span> +</span><br><span class="line">      chalk.red(</span><br><span class="line">        <span class="string">`  Proper commit message format is required for automated changelog generation. Examples:\n\n`</span></span><br><span class="line">      ) +</span><br><span class="line">      <span class="string">`    <span class="subst">$&#123;chalk.green(<span class="string">`feat(compiler): add &#x27;comments&#x27; option`</span>)&#125;</span>\n`</span> +</span><br><span class="line">      <span class="string">`    <span class="subst">$&#123;chalk.green(</span></span></span><br><span class="line"><span class="subst"><span class="string">        <span class="string">`fix(v-model): handle events on blur (close #28)`</span></span></span></span><br><span class="line"><span class="subst"><span class="string">      )&#125;</span>\n\n`</span> +</span><br><span class="line">      chalk.red(<span class="string">`  See .github/commit-convention.md for more details.\n`</span>)</span><br><span class="line">  )</span><br><span class="line">  process.exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意引入的开发时依赖: <a href="https://github.com/chalk/chalk">chalk</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D chalk</span><br></pre></td></tr></table></figure>

<h4 id="husky-结合-commitlint"><a href="#husky-结合-commitlint" class="headerlink" title="husky 结合 commitlint"></a><a href="https://github.com/typicode/husky">husky</a> 结合 <a href="https://github.com/conventional-changelog/commitlint">commitlint</a></h4><p><a href="https://github.com/conventional-changelog/commitlint">commitlint</a> 是标准化的 git commit lint 工具</p>
<p><a href="https://slides.com/marionebl/the-perks-of-committing-with-conventions#/17">Conventional commit format</a></p>
<p><code>type(scope?): subject</code></p>
<ul>
<li>What type of changes am I committing?</li>
<li>What scope is affected by my changes?</li>
<li>subject: When applied, the software will …</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @commitlint/config-angular @commitlint/cli</span><br><span class="line">npm install --save-dev @commitlint/prompt @commitlint/prompt-cli</span><br></pre></td></tr></table></figure>

<p><code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;gc&quot;</span>: <span class="string">&quot;commit&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;husky&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;hooks&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;pre-commit&quot;</span>: <span class="string">&quot;lint-staged&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;commit-msg&quot;</span>: <span class="string">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>commitlint.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123; <span class="attr">extends</span>: [<span class="string">&#x27;@commitlint/config-angular&#x27;</span>] &#125;</span><br></pre></td></tr></table></figure>
<h2 id="semantic-release-语义化版本"><a href="#semantic-release-语义化版本" class="headerlink" title="semantic-release (语义化版本)"></a><a href="https://github.com/semantic-release/semantic-release">semantic-release</a> (语义化版本)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D semantic-release</span><br></pre></td></tr></table></figure>

<p><code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;semantic-release&quot;</span>: <span class="string">&quot;semantic-release&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="semantic-release-结合-travis-ci-和-travis-deploy-once-自动化发布"><a href="#semantic-release-结合-travis-ci-和-travis-deploy-once-自动化发布" class="headerlink" title="semantic-release 结合 travis-ci 和 travis-deploy-once 自动化发布"></a><a href="https://github.com/semantic-release/semantic-release">semantic-release</a> 结合 travis-ci 和 travis-deploy-once 自动化发布</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D travis-deploy-once</span><br></pre></td></tr></table></figure>

<p><code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;deploy&quot;</span>: <span class="string">&quot;npm run travis-deploy-once &#x27;npm run semantic-release&#x27;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;travis-deploy-once&quot;</span>: <span class="string">&quot;travis-deploy-once&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>.travis.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">~/.npm</span></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line">  <span class="attr">email:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;node&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;lts/*&#x27;</span></span><br><span class="line"><span class="attr">install:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">npm@5</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">greenkeeper-lockfile@1</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">include:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">script:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build:prod</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">lint</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">before_script:</span> <span class="string">greenkeeper-lockfile-update</span></span><br><span class="line">      <span class="attr">after_script:</span> <span class="string">greenkeeper-lockfile-upload</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">branch</span> <span class="string">=</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">script:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure>

<h2 id="jest"><a href="#jest" class="headerlink" title="jest"></a><a href="https://github.com/facebook/jest">jest</a></h2><p>安装 <a href="https://github.com/kentcdodds/cross-env">cross-env</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D cross-env</span><br></pre></td></tr></table></figure>

<p>安装 [core-js][]</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm -D i core-js@3</span><br></pre></td></tr></table></figure>

<p>安装 bable 和 jest</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D @babel/core @babel/preset-env @babel/cli babel-jest jest</span><br></pre></td></tr></table></figure>

<p>.babelrc</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;presets&quot;</span>: [</span><br><span class="line">        [</span><br><span class="line">          <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;targets&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;node&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;modules&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;corejs&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;version&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="attr">&quot;proposals&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;production&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;presets&quot;</span>: [</span><br><span class="line">        [</span><br><span class="line">          <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;modules&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;corejs&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;version&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="attr">&quot;proposals&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>jest.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// For a detailed explanation regarding each configuration property, visit:</span></span><br><span class="line"><span class="comment">// https://jestjs.io/docs/en/configuration.html</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">collectCoverage</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">testEnvironment</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">  <span class="attr">testMatch</span>: [<span class="string">&#x27;&lt;rootDir&gt;/__tests__/**/*spec.js&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;rollup -c&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build:prod&quot;</span>: <span class="string">&quot;cross-env BABEL_ENV=production npm run build&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;cross-env BABEL_ENV=test jest&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="codecov"><a href="#codecov" class="headerlink" title="codecov"></a><a href="https://www.npmjs.com/package/codecov">codecov</a></h2><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install codecov --save-dev</span><br></pre></td></tr></table></figure>

<p><code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;codecov&quot;</span>: <span class="string">&quot;codecov&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
  </entry>
  <entry>
    <title>最佳 Linux 发行版 Windows 10(WSL)</title>
    <url>/2019/09/26/%E6%9C%80%E4%BD%B3-Linux-%E5%8F%91%E8%A1%8C%E7%89%88-Windows-10-WSL/</url>
    <content><![CDATA[<p><img src="http://r.photo.store.qq.com/psb?/V12iDrZG1mzmnh/rmPlL7vfaZsLhZAnI9ch3BEsRyE*Ym1FoMdegS9LTOU!/r/dIMAAAAAAAAA" alt="WSL in Windows Terminal"></p>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/about">关于 wsl</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/reference">wsl.exe 命令行参数</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">安装 wsl</a></li>
<li><a href="https://github.com/microsoft/terminal/">microsoft/terminal</a></li>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">Ubuntu 清华大镜像使用帮助</a></li>
<li><a href="https://mirrors.ustc.edu.cn/repogen/">repository file generator</a></li>
<li><a href="https://github.com/martin68/apt-smart">apt-smart</a></li>
<li><a href="https://github.com/xolox/python-apt-mirror-updater">apt-mirror-updater</a></li>
<li><a href="https://github.com/oh-my-fish/oh-my-fish">oh-my-fish</a></li>
<li><a href="https://github.com/oh-my-fish/oh-my-fish/blob/master/docs/Themes.md">fish shell 主题</a></li>
<li><a href="https://code.visualstudio.com/">vscode</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack">Remote Development</a></li>
</ul>
<span id="more"></span>

<h2 id="安装-wsl-及其必要条件"><a href="#安装-wsl-及其必要条件" class="headerlink" title="安装 wsl 及其必要条件"></a>安装 wsl 及其必要条件</h2><ul>
<li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">安装 wsl</a></li>
</ul>
<h2 id="安装-Windows-Terminal"><a href="#安装-Windows-Terminal" class="headerlink" title="安装 Windows Terminal"></a>安装 Windows Terminal</h2><ul>
<li><a href="https://floatsyi.com/2019/09/27/Windows-Terminal/">安装 Windows Terminal</a></li>
</ul>
<h2 id="添加包管理工具-apt-的镜像源"><a href="#添加包管理工具-apt-的镜像源" class="headerlink" title="添加包管理工具 apt 的镜像源"></a>添加包管理工具 apt 的镜像源</h2><ol>
<li><p>按快捷键 <code>win +  Q</code> 然后键入 <code>wsl</code> 并回车, 以运行 <code>wsl</code>.</p>
</li>
<li><p>选中 <code>wsl</code> 并执行以下命令以备份 <code>sources.list</code>(仓库源配置文件)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apt</span><br><span class="line">sudo mv sources.list sources.list.bak</span><br></pre></td></tr></table></figure></li>
<li><p>下载 sources.list<br>注意: 下载地址在这里获取 <a href="https://mirrors.ustc.edu.cn/repogen/">repository file generator</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apt</span><br><span class="line">sudo curl https://mirrors.ustc.edu.cn/repogen/conf/ubuntu-https-4-bionic -o sources.list</span><br></pre></td></tr></table></figure></li>
<li><p>更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure></li>
<li><p>安装 pip3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure></li>
<li><p>执行以下命令,以下载安装 <a href="https://github.com/martin68/apt-smart">apt-smart</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install apt-smart</span><br></pre></td></tr></table></figure></li>
<li><p>执行以下命令, 以验证安装:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-smart -V</span><br></pre></td></tr></table></figure></li>
<li><p>执行以下命令, 以使用最佳的可用镜像(不一定可信, 最好自己 <code>apt-smart -l</code> 权衡一下, 然后 <code>apt-smart -c the_best_mirror_url</code> 以应用)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-smart -a</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="更新索引"><a href="#更新索引" class="headerlink" title="更新索引"></a>更新索引</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-smart -u</span><br></pre></td></tr></table></figure>

<h2 id="包管理工具-brew"><a href="#包管理工具-brew" class="headerlink" title="包管理工具 brew"></a>包管理工具 brew</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>安装 build-essential curl file git 以及 ruby</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install build-essential curl file git ruby</span><br></pre></td></tr></table></figure>

<h3 id="安装-Homebrew-on-Linux"><a href="#安装-Homebrew-on-Linux" class="headerlink" title="安装 Homebrew-on-Linux"></a>安装 <a href="https://docs.brew.sh/Homebrew-on-Linux">Homebrew-on-Linux</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="添加-brew-路径到环境变量"><a href="#添加-brew-路径到环境变量" class="headerlink" title="添加 brew 路径到环境变量"></a>添加 brew 路径到环境变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span> -d ~/.linuxbrew &amp;&amp; <span class="built_in">eval</span> $(~/.linuxbrew/bin/brew shellenv)</span><br><span class="line"><span class="built_in">test</span> -d /home/linuxbrew/.linuxbrew &amp;&amp; <span class="built_in">eval</span> $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)</span><br><span class="line"><span class="built_in">test</span> -r ~/.bash_profile &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;eval \$(<span class="subst">$(brew --prefix)</span>/bin/brew shellenv)&quot;</span> &gt;&gt;~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;eval \$(<span class="subst">$(brew --prefix)</span>/bin/brew shellenv)&quot;</span> &gt;&gt;~/.profile</span><br></pre></td></tr></table></figure>

<h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install hello</span><br></pre></td></tr></table></figure>

<h2 id="安装-fish-shell"><a href="#安装-fish-shell" class="headerlink" title="安装 fish shell"></a>安装 fish shell</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install fish</span><br></pre></td></tr></table></figure>

<p><strong>安装完成后关闭当前终端, 然后按快捷键 <code>win +  Q</code> 然后键入 <code>Windows Terminal</code> 并回车, 以运行 <code>Windows Terminal</code>.</strong></p>
<h3 id="安装-oh-my-fish"><a href="#安装-oh-my-fish" class="headerlink" title="安装 oh-my-fish"></a>安装 <a href="https://github.com/oh-my-fish/oh-my-fish">oh-my-fish</a></h3><ol>
<li>选中 Windows Terminal, 并执行以下命令, 以安装<a href="https://github.com/oh-my-fish/oh-my-fish">oh-my-fish</a></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -L https://get.oh-my.fish | fish</span><br></pre></td></tr></table></figure>

<h4 id="安装-fish-plugin-linuxbrew"><a href="#安装-fish-plugin-linuxbrew" class="headerlink" title="安装 fish-plugin-linuxbrew"></a>安装 <a href="https://github.com/liamdawson/fish-plugin-linuxbrew.git">fish-plugin-linuxbrew</a></h4><p><a href="https://github.com/liamdawson/fish-plugin-linuxbrew.git">fish-plugin-linuxbrew</a> 是为 fish shell 创建的 linuxbrew 的插件, 作用是将 linuxbrew 的所在路径暴露在 fish shell 的环境变量中, 以满足在 fish shell 中调用 brew 的需求.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">omf install https://github.com/liamdawson/fish-plugin-linuxbrew.git</span><br></pre></td></tr></table></figure>

<h4 id="安装-fish-shell-主题"><a href="#安装-fish-shell-主题" class="headerlink" title="安装 fish shell 主题"></a>安装 <a href="https://github.com/oh-my-fish/oh-my-fish/blob/master/docs/Themes.md">fish shell 主题</a></h4><p>执行以下命令, 以下载安装 bobthefish 主题, 并启用 theme_powerline_fonts 与 theme_nerd_fonts, 然后将 theme_color_scheme 改为 base16.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">omf install bobthefish</span><br><span class="line">set -g theme_powerline_fonts yes;set -g theme_nerd_fonts yes;set -g theme_color_scheme base16</span><br></pre></td></tr></table></figure>

<p>更多主题相关设置请查看 <a href="https://github.com/oh-my-fish/oh-my-fish/blob/master/docs/Themes.md">fish shell 主题</a></p>
<h4 id="更换-fish-shell-关键字主题"><a href="#更换-fish-shell-关键字主题" class="headerlink" title="更换 fish shell 关键字主题"></a>更换 fish shell 关键字主题</h4><p>在终端窗口键入 <code>fish_config</code> 以使用默认浏览器打开 fish web 配置页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fish_config</span><br></pre></td></tr></table></figure>

<h4 id="node-版本管理与-npm-仓库镜像源"><a href="#node-版本管理与-npm-仓库镜像源" class="headerlink" title="node 版本管理与 npm 仓库镜像源"></a>node 版本管理与 npm 仓库镜像源</h4><ul>
<li><a href="https://floatsyi.com/2019/09/27/node-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E4%B8%8E-npm-%E4%BB%93%E5%BA%93%E9%95%9C%E5%83%8F%E6%BA%90/#%E5%9C%A8%20liunx(wsl/mac)%20%E4%B8%8B%E4%BD%BF%E7%94%A8%20brew%20%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E7%9A%84%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85">node 版本管理与 npm 仓库镜像源 (wsl)</a></li>
</ul>
<h4 id="使用-vscode-扩展-Remote-Development"><a href="#使用-vscode-扩展-Remote-Development" class="headerlink" title="使用 vscode 扩展 Remote Development"></a>使用 <a href="https://code.visualstudio.com/">vscode</a> 扩展 <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack">Remote Development</a></h4><p>通过 <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack">Remote Development</a>, 我们可以在 <a href="https://code.visualstudio.com/">vscode</a> 中编辑 WSL 中的文件,<br>因此我们得以避免在 WSL 中使用不直观的 vim 编辑器.<br>值得注意的是, WSL 与 Windows 中的扩展环境并不是同一个,<br>这意味着你需要重新为 WSL 安装你之前所使用的扩展.</p>
]]></content>
      <tags>
        <tag>WSL</tag>
        <tag>最佳 Linux 发行版 Windows 10</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal</title>
    <url>/2019/09/27/Windows-Terminal/</url>
    <content><![CDATA[<p><img src="http://r.photo.store.qq.com/psb?/V12iDrZG1mzmnh/rmPlL7vfaZsLhZAnI9ch3BEsRyE*Ym1FoMdegS9LTOU!/r/dIMAAAAAAAAA" alt="windows-terminal screenshot"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://floatsyi.com/2019/12/29/The-Package-Manager-for-Windows-choco-and-scoop/">The-Package-Manager-for-Windows-choco-and-scoop</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/microsoft/terminal/">microsoft/terminal</a></li>
<li><a href="https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/windowsterminal">iTerm2-Color-Schemes</a></li>
</ul>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul>
<li><p>操作系统    Windows 10 版本 18362.0 或更高版本</p>
</li>
<li><p>体系结构    ARM64、x64、x86</p>
</li>
<li><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting#check-your-build-number">检查你的系统版本</a></p>
</li>
</ul>
<span id="more"></span>

<h2 id="安装-Windows-Terminal-Preview"><a href="#安装-Windows-Terminal-Preview" class="headerlink" title="安装 Windows Terminal (Preview)"></a>安装 Windows Terminal (Preview)</h2><p>参考 <a href="https://www.microsoft.com/zh-cn/p/windows-terminal-preview/9n0dx20hk701?activetab=pivot:overviewtab">安装 windows-terminal-preview</a></p>
<p>或者参考 <a href="https://floatsyi.com/2019/12/29/The-Package-Manager-for-Windows-choco-and-scoop/">The-Package-Manager-for-Windows-choco-and-scoop</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo choco install microsoft-windows-terminal --yes</span><br></pre></td></tr></table></figure>

<h2 id="更换字体与主题并修改启动命令行"><a href="#更换字体与主题并修改启动命令行" class="headerlink" title="更换字体与主题并修改启动命令行"></a>更换字体与主题并修改启动命令行</h2><p><strong>注意: 需要先安装 <a href="https://github.com/FloatingShuYin/development-environment-manual#%E5%AE%89%E8%A3%85-windows-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-scoop">scoop</a></strong></p>
<ol>
<li>按快捷键 <code>win + X + A</code>以管理员权限打开 powershell 终端, 然后执行以下命令, 以下载安装 <code>Droid Sans Mono for Powerline</code> 字体(由于这个<a href="https://github.com/microsoft/terminal/issues/633">bug</a>, 只能先用这个字体), 以及 <code>FuraCode Nerd Font Mono</code> 字体 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop bucket add nerd<span class="literal">-fonts</span></span><br><span class="line">sudo scoop install DroidSansMono<span class="literal">-NF</span></span><br><span class="line">sudo scoop install FiraCode</span><br></pre></td></tr></table></figure></li>
<li>按快捷键 <code>win +  Q</code> 然后键入 <code>windows terminal</code> 并回车, 以运行 <code>windows terminal</code>.</li>
<li>选中 <code>windows terminal</code> 并按快捷键 <code>ctrl + ,(逗号)</code>, 以编辑 <code>windows terminal</code> 配置文件: <code>profiles.json</code>.</li>
<li>复制以下内容并覆盖 <code>profiles.json</code> 文件, 按快捷键 <code>Ctrl + S</code> 以保存修改.<!-- "commandline" : "wsl.exe -- cd ~;source ~/.profile;fish", -->
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// To view the default settings, hold &quot;alt&quot; while clicking on the &quot;Settings&quot; button.</span></span><br><span class="line"><span class="comment">// For documentation on these settings, see: https://aka.ms/terminal-documentation</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span>: <span class="string">&quot;https://aka.ms/terminal-profiles-schema&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;defaultProfile&quot;</span>: <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;initialCols&quot;</span> : <span class="number">140</span>,</span><br><span class="line">  <span class="attr">&quot;initialRows&quot;</span> : <span class="number">30</span>,</span><br><span class="line">  <span class="attr">&quot;profiles&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// Make changes here to the powershell.exe profile</span></span><br><span class="line">      <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;acrylicOpacity&quot;</span>: <span class="number">0.9</span>,</span><br><span class="line">      <span class="attr">&quot;fontSize&quot;</span>: <span class="number">12</span>,</span><br><span class="line">      <span class="attr">&quot;fontFace&quot;</span>: <span class="string">&quot;Fira Code&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;cursorShape&quot;</span>: <span class="string">&quot;underscore&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;historySize&quot;</span>: <span class="number">9001</span>,</span><br><span class="line">      <span class="attr">&quot;useAcrylic&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Windows PowerShell&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;colorScheme&quot;</span>: <span class="string">&quot;Tomorrow Night&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;powershell.exe&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;startingDirectory&quot;</span>: <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// Make changes here to the cmd.exe profile</span></span><br><span class="line">      <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;cmd&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;cmd.exe&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;a5a97cb8-8961-5535-816d-772efe0c6a3f&#125;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Arch&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;Windows.Terminal.Wsl&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Azure Cloud Shell&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;Windows.Terminal.Azure&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add custom color schemes to this array</span></span><br><span class="line">  <span class="attr">&quot;schemes&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Tomorrow Night&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;black&quot;</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;red&quot;</span>: <span class="string">&quot;#cc6666&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;green&quot;</span>: <span class="string">&quot;#b5bd68&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;yellow&quot;</span>: <span class="string">&quot;#f0c674&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;blue&quot;</span>: <span class="string">&quot;#81a2be&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;purple&quot;</span>: <span class="string">&quot;#b294bb&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;cyan&quot;</span>: <span class="string">&quot;#8abeb7&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;white&quot;</span>: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightBlack&quot;</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightRed&quot;</span>: <span class="string">&quot;#cc6666&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightGreen&quot;</span>: <span class="string">&quot;#b5bd68&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightYellow&quot;</span>: <span class="string">&quot;#f0c674&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightBlue&quot;</span>: <span class="string">&quot;#81a2be&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightPurple&quot;</span>: <span class="string">&quot;#b294bb&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightCyan&quot;</span>: <span class="string">&quot;#8abeb7&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightWhite&quot;</span>: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#1d1f21&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#c5c8c6&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Tomorrow&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;black&quot;</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;red&quot;</span>: <span class="string">&quot;#c82829&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;green&quot;</span>: <span class="string">&quot;#718c00&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;yellow&quot;</span>: <span class="string">&quot;#eab700&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;blue&quot;</span>: <span class="string">&quot;#4271ae&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;purple&quot;</span>: <span class="string">&quot;#8959a8&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;cyan&quot;</span>: <span class="string">&quot;#3e999f&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;white&quot;</span>: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightBlack&quot;</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightRed&quot;</span>: <span class="string">&quot;#c82829&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightGreen&quot;</span>: <span class="string">&quot;#718c00&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightYellow&quot;</span>: <span class="string">&quot;#eab700&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightBlue&quot;</span>: <span class="string">&quot;#4271ae&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightPurple&quot;</span>: <span class="string">&quot;#8959a8&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightCyan&quot;</span>: <span class="string">&quot;#3e999f&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightWhite&quot;</span>: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#4d4d4c&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Teerb&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;black&quot;</span>: <span class="string">&quot;#1c1c1c&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;red&quot;</span>: <span class="string">&quot;#d68686&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;green&quot;</span>: <span class="string">&quot;#aed686&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;yellow&quot;</span>: <span class="string">&quot;#d7af87&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;blue&quot;</span>: <span class="string">&quot;#2e8fff&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;purple&quot;</span>: <span class="string">&quot;#d6aed6&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;cyan&quot;</span>: <span class="string">&quot;#8adbb4&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;white&quot;</span>: <span class="string">&quot;#d0d0d0&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightBlack&quot;</span>: <span class="string">&quot;#595959&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightRed&quot;</span>: <span class="string">&quot;#d68686&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightGreen&quot;</span>: <span class="string">&quot;#aed686&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightYellow&quot;</span>: <span class="string">&quot;#e4c9af&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightBlue&quot;</span>: <span class="string">&quot;#86aed6&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightPurple&quot;</span>: <span class="string">&quot;#d6aed6&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightCyan&quot;</span>: <span class="string">&quot;#b1e7dd&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;brightWhite&quot;</span>: <span class="string">&quot;#efefef&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#262626&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#d0d0d0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add any keybinding overrides to this array.</span></span><br><span class="line">  <span class="comment">// To unbind a default keybinding, set the command to &quot;unbound&quot;</span></span><br><span class="line">  <span class="attr">&quot;keybindings&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="添加到鼠标右键菜单"><a href="#添加到鼠标右键菜单" class="headerlink" title="添加到鼠标右键菜单"></a>添加到鼠标右键菜单</h2><p>下载 wget</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop install wget</span><br></pre></td></tr></table></figure>

<p>下载 terminal-box-fill.ico</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">wget.ps1 https://raw.githubusercontent.com/FloatingShuYin/FloatingShuYin.GitHub.io/hexo/terminal-box-fill.ico</span><br></pre></td></tr></table></figure>

<p>新建 window.terminal.reg 文件<br>修正其中路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt]</span><br><span class="line">@=&quot;Open Windows Terminal here&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;X:\\terminal-box-fill.ico&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt\command]</span><br><span class="line">@=&quot;S:\\Users\\doublethink\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe&quot;</span><br></pre></td></tr></table></figure>

<p>双击 window.terminal.reg 执行</p>
]]></content>
      <tags>
        <tag>Windows 10</tag>
        <tag>Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>node 版本管理与 npm 仓库镜像源</title>
    <url>/2019/09/27/node-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E4%B8%8E-npm-%E4%BB%93%E5%BA%93%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    <content><![CDATA[<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/nvm-sh/nvm">nvm (Node Version Manager)</a></li>
<li><a href="https://github.com/Pana/nrm">nrm (NPM registry manager)</a></li>
</ul>
<h2 id="在-windows-下使用-scoop-包管理工具的进行安装"><a href="#在-windows-下使用-scoop-包管理工具的进行安装" class="headerlink" title="在 windows 下使用 scoop 包管理工具的进行安装"></a>在 windows 下使用 <a href="https://github.com/lukesampson/scoop">scoop</a> 包管理工具的进行安装</h2><ul>
<li><p><a href="https://github.com/FloatingShuYin/development-environment-manual#%E5%AE%89%E8%A3%85-windows-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-scoop">安装 windows 包管理工具: scoop</a></p>
</li>
<li><p><a href="https://github.com/FloatingShuYin/development-environment-manual/blob/master/javascript.md#%E5%AE%89%E8%A3%85-node-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-nvmnode-version-management">安装 node 版本管理工具 nvm(node version management)</a></p>
</li>
<li><p><a href="https://github.com/FloatingShuYin/development-environment-manual/blob/master/javascript.md#%E5%AE%89%E8%A3%85-npm-registry-%E9%95%9C%E5%83%8F%E6%BA%90%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-nrmnpm-registry-manager">安装 npm registry 镜像源管理工具 nrm(NPM registry manager)</a></p>
</li>
</ul>
<span id="more"></span>

<h2 id="在-liunx-wsl-mac-下使用-brew-包管理工具的进行安装"><a href="#在-liunx-wsl-mac-下使用-brew-包管理工具的进行安装" class="headerlink" title="在 liunx(wsl/mac) 下使用 brew 包管理工具的进行安装"></a>在 liunx(wsl/mac) 下使用 <a href="https://github.com/Homebrew/brew">brew</a> 包管理工具的进行安装</h2><ul>
<li><a href="https://floatsyi.com/2019/09/26/%E6%9C%80%E4%BD%B3-Linux-%E5%8F%91%E8%A1%8C%E7%89%88-Windows-10-WSL/">最佳 Linux 发行版 Windows 10(WSL)</a></li>
</ul>
<h3 id="安装-nvm"><a href="#安装-nvm" class="headerlink" title="安装 nvm"></a>安装 nvm</h3>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></table></figure>
<p>  fish shell 的 nvm 插件<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">omf install nvm</span><br></pre></td></tr></table></figure></p>
<h3 id="安装-nrm"><a href="#安装-nrm" class="headerlink" title="安装 nrm"></a>安装 nrm</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure>

<p>查看 npm 全局安装的软件列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm list -g --depth 0</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>npm 镜像源</tag>
        <tag>node 版本管理</tag>
      </tags>
  </entry>
  <entry>
    <title>the best CSS Framework</title>
    <url>/2019/09/30/the-best-CSS-Framework/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://stackoverflow.com/questions/203069/what-is-the-best-css-framework-and-are-they-worth-the-effort">What is the best CSS Framework and are they worth the effort?</a></li>
<li><a href="https://www.dunebook.com/best-css-frameworks/">11 best CSS Frameworks</a></li>
<li><a href="https://www.slant.co/topics/150/~best-css-framework">40 Best CSS framework as of 2019 - Slant</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2017/10/bulma.html">CSS 框架 Bulma 教程</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://bulma.io/">bulma</a></li>
<li><a href="https://github.com/buefy/buefy">buefy</a> “vue + bulma”</li>
<li><a href="https://github.com/couds/react-bulma-components">react-bulma-components</a></li>
<li><a href="https://github.com/tailwindcss/tailwindcss">tailwind</a></li>
</ul>
<span id="more"></span>

<h2 id="使用-bulma-前必知必会"><a href="#使用-bulma-前必知必会" class="headerlink" title="使用 bulma 前必知必会"></a>使用 bulma 前必知必会</h2><p><a href="https://bulma.io/documentation/overview/start/">bulma 入门</a></p>
<h2 id="tailwind"><a href="#tailwind" class="headerlink" title="tailwind"></a><a href="https://github.com/tailwindcss/tailwindcss">tailwind</a></h2><p>tailwind 是一个基于 atom(原子)类的 css 库<br><a href="https://tailwindcss.com/">tailwind 官网</a></p>
]]></content>
  </entry>
  <entry>
    <title>前端动画</title>
    <url>/2019/10/02/%E5%89%8D%E7%AB%AF%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/82799350">Lottie在手，动画我有：ios/Android/Web三端复杂帧动画解决方案</a></li>
<li><a href="https://codepen.io/collection/nVYWZR/">Examples – codepen</a></li>
<li><a href="https://codepen.io/airnan/project/editor/ZeNONO">base demo –codepen</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/airbnb/lottie-web/">lottie-web</a></li>
<li><a href="https://github.com/airbnb/lottie-web/#usage">usage API</a></li>
</ul>
]]></content>
      <tags>
        <tag>动画</tag>
      </tags>
  </entry>
  <entry>
    <title>前端构建工具</title>
    <url>/2019/10/06/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<blockquote>
<p>parcel 适合快速原型开发 和 中小型项目<br>webpack 适合中大型项目<br>rollupjs 适合开发给开发人员使用的库</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://floatsyi.com/2019/11/14/bable-jest/">bable-jest</a></li>
<li><a href="https://floatsyi.com/2019/11/13/JavaScript-compiler-Babel/">JavaScript compiler: Babel</a></li>
<li><a href="https://floatsyi.com/2019/11/13/JavaScript-Testing-Framework-jest/">JavaScript Testing Framework: jest</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://parceljs.org/">parcel</a></li>
<li><a href="https://webpack.js.org/">webpack</a></li>
<li><a href="https://www.rollupjs.org/guide/en/">rollupjs</a></li>
<li><a href="https://github.com/rollup/awesome">rollup/awesome</a></li>
<li><a href="https://github.com/rollup/rollup-plugin-babel">rollup-plugin-babel</a></li>
<li><a href="https://github.com/Comandeer/rollup-plugin-babel-minify">rollup-plugin-babel-minify</a></li>
<li><a href="https://github.com/rollup/rollup-plugin-commonjs">rollup-plugin-commonjs</a></li>
<li><a href="https://github.com/rollup/rollup-plugin-node-resolve">rollup-plugin-node-resolve</a></li>
<li><a href="https://github.com/ritz078/rollup-plugin-filesize">rollup-plugin-filesize</a></li>
<li><a href="https://github.com/TrySound/rollup-plugin-terser">rollup-plugin-terser</a></li>
<li><a href="https://github.com/babel/babel">babel</a></li>
<li><a href="https://github.com/kentcdodds/cross-env">cross-env</a></li>
</ul>
<span id="more"></span>

<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a><a href="https://webpack.js.org/">webpack</a></h2><h2 id="parcel"><a href="#parcel" class="headerlink" title="parcel"></a><a href="https://parceljs.org/">parcel</a></h2><h2 id="rollupjs"><a href="#rollupjs" class="headerlink" title="rollupjs"></a><a href="https://www.rollupjs.org/guide/en/">rollupjs</a></h2><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D rollup</span><br></pre></td></tr></table></figure>

<h3 id="rollup-config-js"><a href="#rollup-config-js" class="headerlink" title="rollup.config.js"></a>rollup.config.js</h3><ul>
<li><a href="https://www.rollupjs.com/guide/command-line-reference/#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6configuration-files">配置文件(Configuration files)</a></li>
</ul>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="rollup-plugin-babel"><a href="#rollup-plugin-babel" class="headerlink" title="rollup-plugin-babel"></a><a href="https://github.com/rollup/rollup-plugin-babel">rollup-plugin-babel</a></h4><p>安装 <a href="https://github.com/babel/babel">babel</a> 和 [core-js][]</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D @babel/core @babel/preset-env @babel/cli core-js@3</span><br></pre></td></tr></table></figure>

<p>安装 <a href="https://github.com/rollup/rollup-plugin-babel">rollup-plugin-babel</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev rollup-plugin-babel@latest</span><br></pre></td></tr></table></figure>

<p>rollup.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-babel&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   <span class="attr">plugins</span>: [</span><br><span class="line">    babel(&#123;</span><br><span class="line">      <span class="attr">exclude</span>: <span class="string">&#x27;node_modules/**&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>安装 <a href="https://github.com/kentcdodds/cross-env">cross-env</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D cross-env</span><br></pre></td></tr></table></figure>

<p>安装 [jest][] [babel-jest][]</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D jest babel-jest</span><br></pre></td></tr></table></figure>

<p>.babelrc</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;presets&quot;</span>: [</span><br><span class="line">        [</span><br><span class="line">          <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">           &#123;</span><br><span class="line">            <span class="attr">&quot;targets&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;node&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;modules&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;corejs&quot;</span>: &#123; <span class="attr">&quot;version&quot;</span>: <span class="number">3</span>, <span class="attr">&quot;proposals&quot;</span>: <span class="literal">true</span> &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;production&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;presets&quot;</span>: [</span><br><span class="line">        [</span><br><span class="line">          <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;modules&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;corejs&quot;</span>: &#123; <span class="attr">&quot;version&quot;</span>: <span class="number">3</span>, <span class="attr">&quot;proposals&quot;</span>: <span class="literal">true</span> &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>jest.config.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// For a detailed explanation regarding each configuration property, visit:</span></span><br><span class="line"><span class="comment">// https://jestjs.io/docs/en/configuration.html</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">collectCoverage</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">testEnvironment</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">  <span class="attr">testMatch</span>: [<span class="string">&#x27;&lt;rootDir&gt;/__tests__/**/*spec.js&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;rollup -c&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build:prod&quot;</span>: <span class="string">&quot;cross-env BABEL_ENV=production npm run build&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;cross-env BABEL_ENV=test jest&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>安装 [core-js][]</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D core-js@3</span><br></pre></td></tr></table></figure>

<p>rollup.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   <span class="attr">external</span>: [<span class="string">&#x27;core-js&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="rollup-plugin-babel-minify"><a href="#rollup-plugin-babel-minify" class="headerlink" title="rollup-plugin-babel-minify"></a><a href="https://github.com/Comandeer/rollup-plugin-babel-minify">rollup-plugin-babel-minify</a></h4><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D rollup-plugin-babel-minify</span><br></pre></td></tr></table></figure>

<p>rollup.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> minify <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-babel-minify&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   <span class="attr">plugins</span>: [minify()]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="rollup-plugin-commonjs-rollup-plugin-node-resolve"><a href="#rollup-plugin-commonjs-rollup-plugin-node-resolve" class="headerlink" title="rollup-plugin-commonjs rollup-plugin-node-resolve"></a><a href="https://github.com/rollup/rollup-plugin-commonjs">rollup-plugin-commonjs</a> <a href="https://github.com/rollup/rollup-plugin-node-resolve">rollup-plugin-node-resolve</a></h4><p>这两个插件配合, 将 node_modules 中的 commonjs 模块转为 es6 模块, 方便 rollup 做摇树优化<br>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D rollup-plugin-node-resolve rollup-plugin-commonjs</span><br></pre></td></tr></table></figure>

<p>rollup.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-node-resolve&#x27;</span></span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-commonjs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   <span class="attr">plugins</span>: [</span><br><span class="line">     resolve(),</span><br><span class="line">     commonjs()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="rollup-plugin-filesize"><a href="#rollup-plugin-filesize" class="headerlink" title="rollup-plugin-filesize"></a><a href="https://github.com/ritz078/rollup-plugin-filesize">rollup-plugin-filesize</a></h4><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -D rollup-plugin-filesize</span><br></pre></td></tr></table></figure>

<p>rollup.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> filesize <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-filesize&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   <span class="attr">plugins</span>: [filesize()]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="rollup-plugin-terser"><a href="#rollup-plugin-terser" class="headerlink" title="rollup-plugin-terser"></a><a href="https://github.com/TrySound/rollup-plugin-terser">rollup-plugin-terser</a></h4><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D rollup-plugin-terser</span><br></pre></td></tr></table></figure>

<p>rollup.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> filesize <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-terser&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   <span class="attr">plugins</span>: [</span><br><span class="line">      terser(&#123;</span><br><span class="line">          <span class="attr">output</span>: &#123;</span><br><span class="line">            <span class="comment">// 保留版权注释</span></span><br><span class="line">            comments (node, comment) &#123;</span><br><span class="line">              <span class="keyword">const</span> text = comment.value</span><br><span class="line">              <span class="keyword">const</span> type = comment.type</span><br><span class="line">              <span class="keyword">if</span> (type === <span class="string">&#x27;comment2&#x27;</span> <span class="comment">// multiline comment) &#123;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="regexp">/preserve|license|cc_on/i</span>.test(text)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>构建工具</tag>
        <tag>webpack</tag>
        <tag>rollupjs</tag>
        <tag>parcel</tag>
      </tags>
  </entry>
  <entry>
    <title>有类型的 javascript : typescript</title>
    <url>/2019/10/07/%E6%9C%89%E7%B1%BB%E5%9E%8B%E7%9A%84-javascript-typescript/</url>
    <content><![CDATA[<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/microsoft/TypeScript">TypeScript —— @github</a></li>
<li><a href="https://www.typescriptlang.org/">typescript 官网</a></li>
<li><a href="https://www.tslang.cn/">TypeScript 中文网</a></li>
<li><a href="https://jkchao.github.io/typescript-book-chinese/#why">深入理解 TypeScript —— @gitbook</a></li>
<li><a href="https://github.com/dzharii/awesome-typescript">awesome-typescript —— @github</a></li>
<li><a href="https://juejin.im/post/5d19ad6de51d451063431864">为 Vue3 学点 TypeScript , 体验 TypeScript ------@掘金</a></li>
<li><a href="https://shanyue.tech/post/ts-tips.html#_01-keyof">TypeScript 高级技巧</a></li>
</ul>
<span id="more"></span>

<h2 id="自学路径"><a href="#自学路径" class="headerlink" title="自学路径"></a>自学路径</h2><ol>
<li>第一步是先对新知识有个基础的认识, 以此来快速构建一个基础的 新知识网络(理解为主, 不必死记硬背)</li>
</ol>
<p><strong>知识网络就是可进化的思维导图</strong><br>这一步最好是参考前人的总结:</p>
<ul>
<li><a href="https://juejin.im/post/5d19ad6de51d451063431864">为 Vue3 学点 TypeScript , 体验 TypeScript ------@掘金</a></li>
<li><a href="https://juejin.im/post/5d0259f2518825405d15ae62">Vue3.0 前的 TypeScript 最佳入门实践 ------@掘金</a></li>
</ul>
<ol start="2">
<li>第二步是对 新知识网络 进行扫盲, 尽量不要留下盲点, 你可以记忆模糊, 但是不能没有印象(印象是想象力的材料, 印象为主,不必倒背如流).<br>这一步最好是通读官方的文档:</li>
</ol>
<ul>
<li><a href="https://www.typescriptlang.org/">typescript 官网</a></li>
<li><a href="https://www.tslang.cn/">TypeScript 中文网</a></li>
</ul>
<ol start="3">
<li>第三步是深入理解</li>
</ol>
<ul>
<li><a href="https://jkchao.github.io/typescript-book-chinese/#why">深入理解 TypeScript —— @gitbook</a></li>
<li><a href="https://shanyue.tech/post/ts-tips.html#_01-keyof">TypeScript 高级技巧</a></li>
<li><a href="https://jkchao.cn/tag/59d6e9607e2ee06d412efefa">巧用 TypeScript</a></li>
</ul>
<ol start="4">
<li>第四步是开我眼界</li>
</ol>
<ul>
<li><a href="https://github.com/dzharii/awesome-typescript">awesome-typescript —— @github</a></li>
</ul>
<ol start="5">
<li>第五步是学以致用<br>TypeScript 不是银弹, 需要考虑到引入 TypeScript 带来的多余复杂度(多了一个类型维度的编码),<br>一般来说, TypeScript 在现阶段适合在需要长时间维护的中大型项目(或开源库)中使用,<br>如果没有这种项目可以实践, 尤大不久前发布的 <a href="https://github.com/vuejs/vue-next">Vue 3 Pre-Alpha</a> 版本的源码可以读读看.</li>
</ol>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/82459341">TypeScript 疑难杂症</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/104311029">Effective Typescript：使用Typescript的 n 个技巧</a></li>
</ul>
]]></content>
      <tags>
        <tag>typescript</tag>
        <tag>类型</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 3 Pre-Alpha 源码阅读前置知识</title>
    <url>/2019/10/09/Vue-3-Pre-Alpha-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>我们在创造一件事物时, 我想我们应该是很清楚的知道自己在做什么,为什么这样做的.<br>如果我们试图深入去了解别人创造的事物的时候, 我们是缺失了这些前置(背景)知识的.<br>我们需要做一些 信息构建 的工作,然后在恰当的时机去 逆向 它.</p>
<ol>
<li><a href="https://vue-composition-api-rfc.netlify.com/#summary">Vue Composition API</a></li>
<li><a href="http://es6.ruanyifeng.com/#README">ECMAScript 6 入门</a></li>
<li><a href="https://floatsyi.com/2019/10/07/%E6%9C%89%E7%B1%BB%E5%9E%8B%E7%9A%84-javascript-typescript/">有类型的 javascript : typescript</a></li>
<li><a href="https://juejin.im/post/5d977f47e51d4578453274b3">Vue 3 源码导读</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/85978064">Vue3响应式系统源码解析-Ref篇</a></li>
<li><a href="https://floatsyi.com/2019/10/13/Vue-3-Pre-Alpha-%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/">Vue 3 Pre-Alpha 源码调试</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>mysql 学习笔记</title>
    <url>/2019/10/12/mysql-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://www.runoob.com/mysql/mysql-administration.html">mysql 管理</a></li>
<li><a href="https://juejin.im/post/5c34b2b1e51d45518d46b290">MySQL用户及权限管理</a></li>
<li><a href="https://juejin.im/post/5b6eec2cf265da0f5e3315a6">MySQL 8.0用户和角色管理</a></li>
<li><a href="https://github.com/jaywcjlove/mysql-tutorial">MySQL指南</a></li>
<li><a href="http://mycli.net/">mycli</a></li>
</ul>
<span id="more"></span>

<h2 id="安装-mysql-和-mycli"><a href="#安装-mysql-和-mycli" class="headerlink" title="安装 mysql 和 mycli"></a>安装 mysql 和 mycli</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install mysql@5.7 mycli</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="mysqld"><a href="#mysqld" class="headerlink" title="mysqld"></a>mysqld</h2><h3 id="添加-mysqlservice-函数"><a href="#添加-mysqlservice-函数" class="headerlink" title="添加 mysqlservice 函数"></a>添加 mysqlservice 函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function mysqlservice</span><br><span class="line">    /home/linuxbrew/.linuxbrew/opt/mysql@5.7/bin/mysql.server $argv</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">funcsave mysqlservice</span><br></pre></td></tr></table></figure>

<h3 id="启动-mysqld-service"><a href="#启动-mysqld-service" class="headerlink" title="启动 mysqld service"></a>启动 mysqld service</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqlservice start</span><br></pre></td></tr></table></figure>

<h3 id="停止-mysqld-service"><a href="#停止-mysqld-service" class="headerlink" title="停止 mysqld service"></a>停止 mysqld service</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqlservice stop</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="mysql-client"><a href="#mysql-client" class="headerlink" title="mysql client"></a>mysql client</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> ~ tldr mysql                                                                                 Sat Oct 12 21:41:52 2019</span><br><span class="line">mysql</span><br><span class="line"></span><br><span class="line">The MySQL command-line tool.</span><br><span class="line">More information: &lt;https://www.mysql.com/&gt;.</span><br><span class="line"></span><br><span class="line">- Connect to a database:</span><br><span class="line">    mysql database_name</span><br><span class="line">- Connect to a database, user will be prompted for a password:</span><br><span class="line">    mysql -u user --password database_name</span><br><span class="line">- Connect to a database on another host:</span><br><span class="line">    mysql -h database_host database_name</span><br><span class="line">- Connect to a database through a Unix socket:</span><br><span class="line">    mysql --socket path/to/socket.sock</span><br><span class="line">- Execute SQL statements in a script file (batch file):</span><br><span class="line">    mysql -e &quot;source filename.sql&quot; database_name</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h2><p>MySQL 用户账号和信息存储在名为 mysql 的 MySQL 数据库中.</p>
<h3 id="以默认的超级管理员-root-登录-mysql"><a href="#以默认的超级管理员-root-登录-mysql" class="headerlink" title="以默认的超级管理员 root 登录 mysql"></a>以默认的超级管理员 root 登录 mysql</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure>

<h4 id="为-root-设置密码"><a href="#为-root-设置密码" class="headerlink" title="为 root 设置密码"></a>为 root 设置密码</h4><p><strong>注意：在 MySQL5.7 中 user 表的 password 已换成了authentication_string</strong><br><strong>注意：password() 加密函数已经在 8.0.11 中移除了，可以使用 MD5() 函数代替</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root -p[oldpass] password newpass</span><br></pre></td></tr></table></figure>

<h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use mysql</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> password <span class="keyword">for</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span><span class="operator">=</span>PASSWORD(<span class="string">&#x27;new_password&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="查看用户列表"><a href="#查看用户列表" class="headerlink" title="查看用户列表"></a>查看用户列表</h3><p>注意 sql 语句需要以 <code>;</code> 结尾, 而关键字大写只是习惯.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> USE mysql;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<h3 id="创建用户账号"><a href="#创建用户账号" class="headerlink" title="创建用户账号"></a>创建用户账号</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">USER</span> floatsyi IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;p@$$wOrd&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="重命名用户帐号"><a href="#重命名用户帐号" class="headerlink" title="重命名用户帐号"></a>重命名用户帐号</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> RENAME <span class="keyword">USER</span> floatsyi <span class="keyword">TO</span> newfloatsyi;</span><br></pre></td></tr></table></figure>

<h3 id="删除用户账号"><a href="#删除用户账号" class="headerlink" title="删除用户账号"></a>删除用户账号</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">USER</span> newfloatsyi;</span><br></pre></td></tr></table></figure>

<h3 id="设置访问权限"><a href="#设置访问权限" class="headerlink" title="设置访问权限"></a>设置访问权限</h3><p>在创建用户账号后，应该接着分配访问权限。<br>新创建的用户账号没有访问权限。它们能登录 MySQL 但不能执行任何数据库操作, 不能看到数据.</p>
<h4 id="查看用户帐号的权限"><a href="#查看用户帐号的权限" class="headerlink" title="查看用户帐号的权限"></a>查看用户帐号的权限</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> floatsyi;</span><br></pre></td></tr></table></figure>
<p>USAGE 表示根本没有权限</p>
<h4 id="为用户帐号添加权限"><a href="#为用户帐号添加权限" class="headerlink" title="为用户帐号添加权限"></a>为用户帐号添加权限</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> crashcourse.<span class="operator">*</span> <span class="keyword">TO</span> floatsyi</span><br></pre></td></tr></table></figure>
<p>此 GRANT 允许用户在 crashcourse.*（crashcourse数据库的所 有表）上使用 SELECT 。通过只授予 SELECT floatsyi 对crashcourse 数据库中的所有数据具有只读访问权限</p>
<p>你也可以使用 GRANT ALL 来给予用户除 GRANT OPTION 外的所有权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> crashcourse.<span class="operator">*</span> <span class="keyword">TO</span> floatsyi;</span><br></pre></td></tr></table></figure>


<h4 id="为用户帐号撤销权限"><a href="#为用户帐号撤销权限" class="headerlink" title="为用户帐号撤销权限"></a>为用户帐号撤销权限</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> crashcourse.<span class="operator">*</span> <span class="keyword">TO</span> floatsyi</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Vue 3 Pre-Alpha 源码调试</title>
    <url>/2019/10/13/Vue-3-Pre-Alpha-%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/vuejs/vue-next">vue-next</a></li>
</ul>
<h2 id="Vue-3-Pre-Alpha-源码调试步骤"><a href="#Vue-3-Pre-Alpha-源码调试步骤" class="headerlink" title="Vue 3 Pre-Alpha 源码调试步骤"></a>Vue 3 Pre-Alpha 源码调试步骤</h2><ol>
<li><p>clone 源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/vuejs/vue-next.git</span><br></pre></td></tr></table></figure></li>
<li><p>下载依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vue-next</span><br><span class="line">yarn</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>

<ol start="3">
<li>启用 sourcemap<br>将根目录下的 <code>rollup.config.js</code> 配置文件内容替换为:<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> ts = <span class="built_in">require</span>(<span class="string">&#x27;rollup-plugin-typescript2&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> replace = <span class="built_in">require</span>(<span class="string">&#x27;rollup-plugin-replace&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> alias = <span class="built_in">require</span>(<span class="string">&#x27;rollup-plugin-alias&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> json = <span class="built_in">require</span>(<span class="string">&#x27;rollup-plugin-json&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!process.env.TARGET) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;TARGET package must be specified via --environment flag.&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> packagesDir = path.resolve(__dirname, <span class="string">&#x27;packages&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> packageDir = path.resolve(packagesDir, process.env.TARGET)</span><br><span class="line"><span class="keyword">const</span> name = path.basename(packageDir)</span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">p</span> =&gt;</span> path.resolve(packageDir, p)</span><br><span class="line"><span class="keyword">const</span> pkg = <span class="built_in">require</span>(resolve(<span class="string">`package.json`</span>))</span><br><span class="line"><span class="keyword">const</span> packageOptions = pkg.buildOptions || &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// build aliases dynamically</span></span><br><span class="line"><span class="keyword">const</span> aliasOptions = &#123; <span class="attr">resolve</span>: [<span class="string">&#x27;.ts&#x27;</span>] &#125;</span><br><span class="line">fs.readdirSync(packagesDir).forEach(<span class="function"><span class="params">dir</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (dir === <span class="string">&#x27;vue&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (fs.statSync(path.resolve(packagesDir, dir)).isDirectory()) &#123;</span><br><span class="line">    aliasOptions[<span class="string">`@vue/<span class="subst">$&#123;dir&#125;</span>`</span>] = path.resolve(packagesDir, <span class="string">`<span class="subst">$&#123;dir&#125;</span>/src/index`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> aliasPlugin = alias(aliasOptions)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ensure TS checks only once for each build</span></span><br><span class="line"><span class="keyword">let</span> hasTSChecked = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> configs = &#123;</span><br><span class="line">  <span class="attr">esm</span>: &#123;</span><br><span class="line">    <span class="attr">file</span>: resolve(<span class="string">`dist/<span class="subst">$&#123;name&#125;</span>.esm-bundler.js`</span>),</span><br><span class="line">    <span class="attr">format</span>: <span class="string">`es`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">cjs</span>: &#123;</span><br><span class="line">    <span class="attr">file</span>: resolve(<span class="string">`dist/<span class="subst">$&#123;name&#125;</span>.cjs.js`</span>),</span><br><span class="line">    <span class="attr">format</span>: <span class="string">`cjs`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">global</span>: &#123;</span><br><span class="line">    <span class="attr">file</span>: resolve(<span class="string">`dist/<span class="subst">$&#123;name&#125;</span>.global.js`</span>),</span><br><span class="line">    <span class="attr">format</span>: <span class="string">`iife`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;esm-browser&#x27;</span>: &#123;</span><br><span class="line">    <span class="attr">file</span>: resolve(<span class="string">`dist/<span class="subst">$&#123;name&#125;</span>.esm-browser.js`</span>),</span><br><span class="line">    <span class="attr">format</span>: <span class="string">`es`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultFormats = [<span class="string">&#x27;esm&#x27;</span>, <span class="string">&#x27;cjs&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> inlineFormats = process.env.FORMATS &amp;&amp; process.env.FORMATS.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> packageFormats = inlineFormats || packageOptions.formats || defaultFormats</span><br><span class="line"><span class="keyword">const</span> packageConfigs = process.env.PROD_ONLY</span><br><span class="line">  ? []</span><br><span class="line">  : packageFormats.map(<span class="function"><span class="params">format</span> =&gt;</span> createConfig(configs[format]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">  packageFormats.forEach(<span class="function"><span class="params">format</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (format === <span class="string">&#x27;cjs&#x27;</span>) &#123;</span><br><span class="line">      packageConfigs.push(createProductionConfig(format))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (format === <span class="string">&#x27;global&#x27;</span> || format === <span class="string">&#x27;esm-browser&#x27;</span>) &#123;</span><br><span class="line">      packageConfigs.push(createMinifiedConfig(format))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = packageConfigs</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createConfig</span>(<span class="params">output, plugins = []</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 启用 sourcemap</span></span><br><span class="line">  output.sourcemap = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> isProductionBuild =</span><br><span class="line">    process.env.__DEV__ === <span class="string">&#x27;false&#x27;</span> || <span class="regexp">/\.prod\.js$/</span>.test(output.file)</span><br><span class="line">  <span class="keyword">const</span> isGlobalBuild = <span class="regexp">/\.global(\.prod)?\.js$/</span>.test(output.file)</span><br><span class="line">  <span class="keyword">const</span> isBundlerESMBuild = <span class="regexp">/\.esm\.js$/</span>.test(output.file)</span><br><span class="line">  <span class="keyword">const</span> isBrowserESMBuild = <span class="regexp">/esm-browser(\.prod)?\.js$/</span>.test(output.file)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isGlobalBuild) &#123;</span><br><span class="line">    output.name = packageOptions.name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> shouldEmitDeclarations =</span><br><span class="line">    process.env.TYPES != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">    process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class="line">    !hasTSChecked</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> tsPlugin = ts(&#123;</span><br><span class="line">    <span class="attr">check</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> &amp;&amp; !hasTSChecked,</span><br><span class="line">    <span class="attr">tsconfig</span>: path.resolve(__dirname, <span class="string">&#x27;tsconfig.json&#x27;</span>),</span><br><span class="line">    <span class="attr">cacheRoot</span>: path.resolve(__dirname, <span class="string">&#x27;node_modules/.rts2_cache&#x27;</span>),</span><br><span class="line">    <span class="attr">tsconfigOverride</span>: &#123;</span><br><span class="line">      <span class="attr">compilerOptions</span>: &#123;</span><br><span class="line">        <span class="attr">declaration</span>: shouldEmitDeclarations,</span><br><span class="line">        <span class="attr">declarationMap</span>: shouldEmitDeclarations</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">exclude</span>: [<span class="string">&#x27;**/__tests__&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// we only need to check TS and generate declarations once for each build.</span></span><br><span class="line">  <span class="comment">// it also seems to run into weird issues when checking multiple times</span></span><br><span class="line">  <span class="comment">// during a single build.</span></span><br><span class="line">  hasTSChecked = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> externals = <span class="built_in">Object</span>.keys(aliasOptions).filter(<span class="function"><span class="params">p</span> =&gt;</span> p !== <span class="string">&#x27;@vue/shared&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">input</span>: resolve(<span class="string">`src/index.ts`</span>),</span><br><span class="line">    <span class="comment">// Global and Browser ESM builds inlines everything so that they can be</span></span><br><span class="line">    <span class="comment">// used alone.</span></span><br><span class="line">    <span class="attr">external</span>: isGlobalBuild || isBrowserESMBuild ? [] : externals,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      json(&#123;</span><br><span class="line">        <span class="attr">namedExports</span>: <span class="literal">false</span></span><br><span class="line">      &#125;),</span><br><span class="line">      tsPlugin,</span><br><span class="line">      aliasPlugin,</span><br><span class="line">      createReplacePlugin(</span><br><span class="line">        isProductionBuild,</span><br><span class="line">        isBundlerESMBuild,</span><br><span class="line">        (isGlobalBuild || isBrowserESMBuild) &amp;&amp;</span><br><span class="line">          !packageOptions.enableNonBrowserBranches</span><br><span class="line">      ),</span><br><span class="line">      ...plugins</span><br><span class="line">    ],</span><br><span class="line">    output,</span><br><span class="line">    <span class="attr">onwarn</span>: <span class="function">(<span class="params">msg, warn</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="regexp">/Circular/</span>.test(msg)) &#123;</span><br><span class="line">        warn(msg)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createReplacePlugin</span>(<span class="params">isProduction, isBundlerESMBuild, isBrowserBuild</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> replace(&#123;</span><br><span class="line">    <span class="attr">__COMMIT__</span>: <span class="string">`&quot;<span class="subst">$&#123;process.env.COMMIT&#125;</span>&quot;`</span>,</span><br><span class="line">    <span class="attr">__DEV__</span>: isBundlerESMBuild</span><br><span class="line">      ? <span class="comment">// preserve to be handled by bundlers</span></span><br><span class="line">        <span class="string">`process.env.NODE_ENV !== &#x27;production&#x27;`</span></span><br><span class="line">      : <span class="comment">// hard coded dev/prod builds</span></span><br><span class="line">        !isProduction,</span><br><span class="line">    <span class="comment">// If the build is expected to run directly in the browser (global / esm-browser builds)</span></span><br><span class="line">    <span class="attr">__BROWSER__</span>: isBrowserBuild,</span><br><span class="line">    <span class="comment">// support options?</span></span><br><span class="line">    <span class="comment">// the lean build drops options related code with buildOptions.lean: true</span></span><br><span class="line">    <span class="attr">__FEATURE_OPTIONS__</span>: !packageOptions.lean,</span><br><span class="line">    <span class="attr">__FEATURE_SUSPENSE__</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// this is only used during tests</span></span><br><span class="line">    <span class="attr">__JSDOM__</span>: <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createProductionConfig</span>(<span class="params">format</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createConfig(&#123;</span><br><span class="line">    <span class="attr">file</span>: resolve(<span class="string">`dist/<span class="subst">$&#123;name&#125;</span>.<span class="subst">$&#123;format&#125;</span>.prod.js`</span>),</span><br><span class="line">    <span class="attr">format</span>: configs[format].format</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMinifiedConfig</span>(<span class="params">format</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; terser &#125; = <span class="built_in">require</span>(<span class="string">&#x27;rollup-plugin-terser&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> createConfig(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">file</span>: resolve(<span class="string">`dist/<span class="subst">$&#123;name&#125;</span>.<span class="subst">$&#123;format&#125;</span>.prod.js`</span>),</span><br><span class="line">      <span class="attr">format</span>: configs[format].format</span><br><span class="line">    &#125;,</span><br><span class="line">    [</span><br><span class="line">      terser(&#123;</span><br><span class="line">        <span class="attr">module</span>: <span class="regexp">/^esm/</span>.test(format)</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
将根目录下的 <code>tsconfig.json</code> typescript 配置文件内容替换为:<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;noUnusedLocals&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;strictNullChecks&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;noImplicitThis&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;removeComments&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span>: <span class="string">&quot;react&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lib&quot;</span>: [<span class="string">&quot;esnext&quot;</span>, <span class="string">&quot;dom&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;types&quot;</span>: [<span class="string">&quot;jest&quot;</span>, <span class="string">&quot;node&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;@vue/shared&quot;</span>: [<span class="string">&quot;packages/shared/src&quot;</span>],</span><br><span class="line">      <span class="attr">&quot;@vue/runtime-core&quot;</span>: [<span class="string">&quot;packages/runtime-core/src&quot;</span>],</span><br><span class="line">      <span class="attr">&quot;@vue/runtime-dom&quot;</span>: [<span class="string">&quot;packages/runtime-dom/src&quot;</span>],</span><br><span class="line">      <span class="attr">&quot;@vue/runtime-test&quot;</span>: [<span class="string">&quot;packages/runtime-test/src&quot;</span>],</span><br><span class="line">      <span class="attr">&quot;@vue/reactivity&quot;</span>: [<span class="string">&quot;packages/reactivity/src&quot;</span>],</span><br><span class="line">      <span class="attr">&quot;@vue/compiler-core&quot;</span>: [<span class="string">&quot;packages/compiler-core/src&quot;</span>],</span><br><span class="line">      <span class="attr">&quot;@vue/compiler-dom&quot;</span>: [<span class="string">&quot;packages/compiler-dom/src&quot;</span>],</span><br><span class="line">      <span class="attr">&quot;@vue/server-renderer&quot;</span>: [<span class="string">&quot;packages/server-renderer/src&quot;</span>],</span><br><span class="line">      <span class="attr">&quot;@vue/template-explorer&quot;</span>: [<span class="string">&quot;packages/template-explorer/src&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;packages/global.d.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;packages/runtime-dom/jsx.d.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;packages/*/src&quot;</span>,</span><br><span class="line">    <span class="string">&quot;packages/*/__tests__&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编译源码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn dev</span><br></pre></td></tr></table></figure></li>
<li>调试<br>在 <code>vue-next/vue</code> 目录下新建 <code>index.html</code> 文件, 内容为:<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue 3 test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.5/css/bulma.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;has-text-centered&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button is-info is-rounded&quot;</span>&gt;</span>Rounded<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/vue.global.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(Vue)</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> &#123; reactive, watch &#125; = Vue</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> appEle = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>)</span></span><br><span class="line"><span class="javascript">watch(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> template = <span class="string">`&lt;p class=&quot;has-text-centered&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                        count is <span class="subst">$&#123;state.count&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;p&gt;`</span></span></span><br><span class="line"><span class="javascript">  appEle.innerHTML = template</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> increment = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  state.count++</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;button&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, increment)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>浏览器打开 <code>index.html</code> 即可调试.</p>
]]></content>
  </entry>
  <entry>
    <title>使用 shadow DOM 隔离宿主的样式作用域</title>
    <url>/2019/10/19/%E4%BD%BF%E7%94%A8-shadow-DOM-%E9%9A%94%E7%A6%BB%E5%AE%BF%E4%B8%BB%E7%9A%84%E6%A0%B7%E5%BC%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<p><img src="http://r.photo.store.qq.com/psb?/V12iDrZG1mzmnh/CpGYADfWtj75eVpaAVZx8OODaycDD7ynd2xOJEPUpwE!/r/dL4AAAAAAAAA" alt="Syntax highlighting codepen prototype screenshot"></p>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow">Element.attachShadow()</a></li>
<li><a href="https://www.tampermonkey.net/documentation.php">tampermonkey documentation</a></li>
<li><a href="https://greasyfork.org/zh-CN/scripts/391243-syntax-highlighting">tampermonkey script: Syntax highlighting</a></li>
<li><a href="https://codepen.io/FloatingShuYin/pen/GRRjmOE?editors=0010">Syntax highlighting codepen prototype</a></li>
<li><a href="https://highlightjs.org/">highlight.js</a></li>
<li><a href="https://fonts.google.com/">google fonts</a></li>
<li><a href="https://github.com/bramstein/fontfaceobserver">fontface Observer</a></li>
<li><a href="https://buefy.org/">buefy</a></li>
</ul>
<span id="more"></span>

<h2 id="tampermonkey-script-Syntax-highlighting"><a href="#tampermonkey-script-Syntax-highlighting" class="headerlink" title="tampermonkey script: Syntax highlighting"></a><a href="https://greasyfork.org/zh-CN/scripts/391243-syntax-highlighting">tampermonkey script: Syntax highlighting</a></h2><p>花了 <del>将近两天时间</del> 几天时间, 边构思, 边实践, 实现了一个使用 highlight.js 高亮页面中的代码片段的油猴脚本.<br>一开始的逻辑十分简单, 直接遍历页面中的 <code>pre code</code> 节点, 然后使用 highlight.js 高亮即可.<br>后来又不仅想高亮, 还想要换字体, 换主题, 随需求增长所带来的复杂度已经足够写一个 UI 界面来配置这些选项.<br>于是问题就来了,  该如何使得 UI 界面注入到宿主页面中并不受宿主页面的影响?</p>
<h2 id="shadow-DOM"><a href="#shadow-DOM" class="headerlink" title="shadow DOM"></a>shadow DOM</h2><p>早就听闻 shadow DOM 各种神奇, 一试之下果然非常给力.<br>shadow DOM 最引人注目的特性是可以隔离宿主样式作用域, 另辟天地.<br>正得益于此, 我们只需要创建 HTML 和 Body 元素挂载到 Shadow DOM 上,<br>我们的页面就像是在新的页面上打开的一样.</p>
<p>节选一段 Syntax highlighting 相关源码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置页</span></span><br><span class="line"><span class="keyword">let</span> parasitifer = <span class="literal">null</span></span><br><span class="line"><span class="keyword">const</span> openSetting = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 非首次调用</span></span><br><span class="line">  <span class="keyword">if</span> (parasitifer) &#123;</span><br><span class="line">    parasitifer.show()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  parasitifer = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>) <span class="comment">// 此 DOM 节点将用作 shadowDOM 的载体被插入宿主的 DOM 节点中.</span></span><br><span class="line">  parasitifer.id = <span class="string">&#x27;host-element&#x27;</span></span><br><span class="line">  parasitifer.style = <span class="string">`position: fixed;top:0;bottom:0;z-index:9999;width:100vw;height:100vh;font-size:16px;background-color:#fff;`</span></span><br><span class="line">  parasitifer.show = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    parasitifer.style.display = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  parasitifer.hide = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    parasitifer.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> shadowRoot = parasitifer.attachShadow(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;)</span><br><span class="line">  <span class="comment">// 此节点将成为 shadowDOM 的直接子元素, 包裹一切, 所以用 HTML 元素很合适.</span></span><br><span class="line">  <span class="comment">// 不仅仅是语义上的合适, 大多数的 UI 库都需要一个结构完整的 DOM 树用来做自适应布局.</span></span><br><span class="line">  <span class="keyword">const</span> shadowContent = <span class="built_in">document</span>.createElement(<span class="string">&#x27;HTML&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> shadowStyleEle = <span class="built_in">document</span>.createElement(<span class="string">&#x27;style&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> bulmaStyleEle = <span class="built_in">document</span>.createElement(<span class="string">&#x27;style&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> fontStyleEle = <span class="built_in">document</span>.createElement(<span class="string">&#x27;style&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> themeStyleEle = <span class="built_in">document</span>.createElement(<span class="string">&#x27;style&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> vueContainer = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>) <span class="comment">// 这个 DOM 节点不会显示在 DOM 树中, 而是作为 vue 的挂载点,同来渲染 vue 的模板.</span></span><br><span class="line">  vueContainer.id = <span class="string">&#x27;vue-root&#x27;</span></span><br><span class="line">  <span class="comment">// shadow DOM 的样式作用域隔离是非常实用的特性, 完全不受宿主环境影响的样式, 轻盈的开始</span></span><br><span class="line">  shadowStyleEle.innerText = <span class="string">``</span></span><br><span class="line">  shadowContent.appendChild(shadowStyleEle)</span><br><span class="line">  shadowContent.appendChild(bulmaStyleEle)</span><br><span class="line">  shadowContent.appendChild(fontStyleEle)</span><br><span class="line">  shadowContent.appendChild(themeStyleEle)</span><br><span class="line">  shadowContent.appendChild(vueContainer)</span><br><span class="line">  shadowRoot.appendChild(shadowContent)</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(parasitifer)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mount = <span class="function"><span class="params">style</span> =&gt;</span> &#123;</span><br><span class="line">    bulmaStyleEle.innerText = style</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> vueRoot = <span class="built_in">document</span></span><br><span class="line">      .querySelector(<span class="string">&#x27;#host-element&#x27;</span>)</span><br><span class="line">      .shadowRoot.querySelector(<span class="string">&#x27;#vue-root&#x27;</span>)</span><br><span class="line">    <span class="comment">// 这里使用 body 元素 作为父节点, 结合上面创造的 HTML 元素是为了给 UI 组件一个完整的上下文环境, 就像在一个新的 HTML 页面中一样.</span></span><br><span class="line">    <span class="keyword">const</span> vueTemplate =</span><br><span class="line">      <span class="string">`&lt;body style=&quot;height: 100vh&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div id=&quot;app-vue&quot; class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">          Other DOM</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/body&gt;`</span></span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="built_in">window</span>.Vue(&#123;</span><br><span class="line">      <span class="attr">el</span>: vueRoot,</span><br><span class="line">      <span class="attr">template</span>: vueTemplate,</span><br><span class="line">      data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="comment">// some data</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">watch</span>: &#123;</span><br><span class="line">        <span class="comment">// watch something</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="comment">// some methods</span></span><br><span class="line">      &#125;,</span><br><span class="line">      mounted () &#123;</span><br><span class="line">        <span class="comment">// init something</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中值得特别注意是 <code>vue</code> 的 <code>el</code> 选项.</p>
]]></content>
      <tags>
        <tag>shadow DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>node 包管理工具: npm 与 yarn</title>
    <url>/2019/10/30/node-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-npm-%E4%B8%8E-yarn/</url>
    <content><![CDATA[<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://www.npmjs.com/">npm 官网</a></li>
<li><a href="https://yarnpkg.com/zh-Hans/">yarn 官网</a></li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><a href="https://floatsyi.com/2019/09/27/node-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E4%B8%8E-npm-%E4%BB%93%E5%BA%93%E9%95%9C%E5%83%8F%E6%BA%90/">node 版本管理与 npm 仓库镜像源</a></li>
</ul>
<p>安装 yarn</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install yarn -g</span><br></pre></td></tr></table></figure>

<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>设置代理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#npm</span></span><br><span class="line">npm config <span class="built_in">set</span> proxy http://127.0.0.1:1080</span><br><span class="line">npm config <span class="built_in">set</span> https-proxy http://127.0.0.1:1080</span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn config <span class="built_in">set</span> proxy http://127.0.0.1:1080</span><br><span class="line">yarn config <span class="built_in">set</span> https-proxy http://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<p>删除代理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#npm</span></span><br><span class="line">npm config delete proxy</span><br><span class="line">npm config delete https-proxy</span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn config delete proxy</span><br><span class="line">yarn config delete https-proxy</span><br></pre></td></tr></table></figure>

<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>ref: <a href="https://npm.taobao.org/mirrors">https://npm.taobao.org/mirrors</a></p>
<p>nvm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node</span><br><span class="line"><span class="built_in">export</span> NVM_IOJS_ORG_MIRROR=http://npm.taobao.org/mirrors/iojs</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org -g</span><br><span class="line">npm config <span class="built_in">set</span> disturl https://npm.taobao.org/dist -g</span><br><span class="line">npm config <span class="built_in">set</span> electron_mirror https://npm.taobao.org/mirrors/electron/ -g</span><br><span class="line">npm config <span class="built_in">set</span> sass_binary_site https://npm.taobao.org/mirrors/node-sass/ -g</span><br><span class="line">npm config <span class="built_in">set</span> phantomjs_cdnurl https://npm.taobao.org/mirrors/phantomjs/ -g</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org -g</span><br><span class="line">yarn config <span class="built_in">set</span> disturl https://npm.taobao.org/dist -g</span><br><span class="line">yarn config <span class="built_in">set</span> electron_mirror https://npm.taobao.org/mirrors/electron/ -g</span><br><span class="line">yarn config <span class="built_in">set</span> sass_binary_site https://npm.taobao.org/mirrors/node-sass/ -g</span><br><span class="line">yarn config <span class="built_in">set</span> phantomjs_cdnurl https://npm.taobao.org/mirrors/phantomjs/ -g</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>npm</tag>
        <tag>yarn</tag>
        <tag>包管理</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 语法一览</title>
    <url>/2019/10/31/SQL-%E8%AF%AD%E6%B3%95%E4%B8%80%E8%A7%88/</url>
    <content><![CDATA[<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://sqlzoo.net/wiki/SQL_Tutorial/zh">sql 在线练习(比较全面)</a></li>
<li><a href="http://xuesql.cn/static/%E9%87%91%E8%80%81%E5%B8%88%E6%89%8B%E5%86%8C.html">sql 速查</a></li>
<li><a href="http://xuesql.cn/lesson/introduction">sql 在线练习</a></li>
<li><a href="https://github.com/jaywcjlove/mysql-tutorial/blob/master/21-minutes-MySQL-basic-entry.md">21分钟MySQL基础入门</a></li>
</ul>
<hr>
<blockquote>
<p>你想说的话, 都是你想表达的意思</p>
</blockquote>
<blockquote>
<p><strong>SELECT</strong> <strong>[DISTINCT]</strong> [table.]col[, …[table.]col] // 查哪些列 (DISTINCT 去重)<br><strong>FROM</strong> table0 ([…(<strong>INNER JOIN</strong> | (<strong>RIGHT</strong> | <strong>LEFT</strong>)<strong>OUTER JOIN</strong>) table1 <strong>ON</strong> table0.main_key = table1.main_key] | [, …table]) // 从哪些表<br><strong>WHERE</strong> (condition […( <strong>AND</strong> | <strong>OR</strong>) (condition | sub query)] | [table.]col [<strong>NOT</strong>] <strong>IN</strong> (sub query | refer)) // 有哪些条件<br><strong>GROUP BY</strong> <strong>[DISTINCT]</strong> [table.]col[, …[table.]col] // 如何分组<br><strong>HAVING</strong> (condition […( *<em>AND</em> | <strong>OR</strong> ) (condition | sub query)] | [table.]col [<strong>NOT</strong>] <strong>IN</strong> (sub query | refer)) // 分组后如何过滤<br><strong>ORDER BY</strong> [table.]col[, …[table.]col] [(<strong>ASC</strong> | <strong>DESC</strong>)] // 如何排序<br><strong>LIMIT</strong> int <strong>OFFSET</strong> int // 最多返回多少条, 从哪条开始(默认0)<br><strong>UNION</strong> // 是否组合其他查询(通过 UNION 组合的每个查询必须包含相同的列、表达式或聚集函数)</p>
</blockquote>
<hr>
<span id="more"></span>

<h2 id="操作符号"><a href="#操作符号" class="headerlink" title="操作符号"></a>操作符号</h2><p>AND</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span> <span class="keyword">AND</span> <span class="keyword">condition</span></span><br></pre></td></tr></table></figure>

<p>OR</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span> <span class="keyword">OR</span> <span class="keyword">condition</span></span><br></pre></td></tr></table></figure>

<p>IN</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">WHERE</span> col <span class="keyword">IN</span> (refer ,refer)</span><br></pre></td></tr></table></figure>
<p>WHERE col = 1 OR col = 2<br>等价于<br>WHERE col IN (1 ,2)</p>
<p>NOT</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">WHERE</span> col <span class="keyword">NOT</span> <span class="keyword">IN</span> (refer ,refer)</span><br></pre></td></tr></table></figure>
<p>WHERE col != 1 OR col != 2<br>等价于<br>WHERE col NOT IN (1 ,2)</p>
<hr>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> databases;</span><br></pre></td></tr></table></figure>

<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>创建一个名为 db_name, 编码为 utf-8(真·utf-8)的数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE db_name <span class="type">character</span> <span class="keyword">set</span> utf8mb4;</span><br></pre></td></tr></table></figure>

<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE db_name;</span><br></pre></td></tr></table></figure>

<h3 id="选择-使用-数据库"><a href="#选择-使用-数据库" class="headerlink" title="选择(使用)数据库"></a>选择(使用)数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE db_name;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 MutationObserver 监听 DOM 变更</title>
    <url>/2019/11/01/%E4%BD%BF%E7%94%A8-MutationObserver-%E7%9B%91%E5%90%AC-DOM-%E5%8F%98%E6%9B%B4/</url>
    <content><![CDATA[<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://greasyfork.org/zh-CN/scripts/376658-%E4%B8%8D%E8%A6%81%E7%BF%BB%E8%AF%91github%E4%B8%8A%E7%9A%84%E4%BB%A3%E7%A0%81/code">不要翻译 github 上的代码</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver">MutationObserver</a></li>
<li><a href="https://github.com/lodash/lodash/blob/15e1557b2a97c8bbee22d873832d90ed3ba50ba7/debounce.js">lodash debounce 源码</a></li>
<li><a href="https://github.com/">github</a></li>
</ul>
<span id="more"></span>

<h2 id="不要翻译-github-上的代码"><a href="#不要翻译-github-上的代码" class="headerlink" title="不要翻译 github 上的代码"></a><a href="https://greasyfork.org/zh-CN/scripts/376658-%E4%B8%8D%E8%A6%81%E7%BF%BB%E8%AF%91github%E4%B8%8A%E7%9A%84%E4%BB%A3%E7%A0%81/code">不要翻译 github 上的代码</a></h2><p>因为需要经常逛 <a href="https://github.com/">github</a> 查阅文档, 而文档大多都是英文<br>还好 chrome 浏览器自带的网页翻译用起来不错<br>只是把代码也给翻译了, 就很难受<br>所以呢, 就写了这个脚本来避免 chrome 浏览器翻译代码<br>起初呢, 逻辑非常简单<br>chrome 之所以翻译代码是因为 github 上文档的 <code>&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</code> 没有写全<br>推测是 markdown 解析器的问题<br>不过无所谓了, 只需要遍历页面中所有的 <code>&lt;code&gt;&lt;/code&gt;</code> 元素补全就可以了<br>但是呢, 后来又遇到点问题:<br>因为 github 网站呢, 是个 SPA(单页面应用),<br>脚本只能在首次页面加载完成后执行一次, 完全管不到随后的 DOM 变更<br>于是呢, 我就思考了一下我只要在 DOM 即将变更时得到通知, 并在 DOM 变更完后<br>抢在 chrome 翻译前把 <code>&lt;code&gt;&lt;/code&gt;</code> 元素补全就好了<br>如下:<br>我首先呢, 在 <code>document</code> 上添加了一个点击事件监听器<br>这样呢, 我就可以知道 DOM 有可能要发生变更了<br>但是呢, 我没办法知道 DOM 何时开始变更完成,<br>所以呢, 我就只好用 <code>setInterval(()=&gt;&#123;&#125;, 50)</code> 过量执行<br>并在 <code>setTimeout(()=&gt;&#123;&#125;, 5000)</code> 后停止执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> int = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123; doNotTranslateCode() &#125;, <span class="number">50</span>)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123; <span class="built_in">clearInterval</span>(int) &#125;, <span class="number">5000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>后来呢<br>用着也挺不错, 就是比较看脸, 页面加载太长超过 5s 就不行了, 而且比较浪费性能<br>然后就突然想到 chrome 是怎么在 DOM 更新后翻译新加载的 DOM 内容的?<br>是不是有什么 API 可以监听 DOM 变更然后通知我呢</p>
<h2 id="MutationObserver"><a href="#MutationObserver" class="headerlink" title="MutationObserver"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver">MutationObserver</a></h2><p>后来一查<br>果然有这个东西, 叫 MutationObserver<br>以下节选一段使用 MutationObserver 的实现:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// debug log</span></span><br><span class="line"><span class="keyword">const</span> isDev = <span class="literal">true</span></span><br><span class="line"><span class="keyword">const</span> log = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">  isDev &amp;&amp; <span class="built_in">console</span>.log(...args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> _ = &#123;&#125;</span><br><span class="line">_.debounce = <span class="function"><span class="keyword">function</span> (<span class="params">func, wait</span>) </span>&#123; <span class="comment">/* debounce code */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> githubTV = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> npmTV = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> isGitHub =</span><br><span class="line">  <span class="built_in">window</span>.location.href.search(<span class="regexp">/github.com/i</span>) !== -<span class="number">1</span> &amp;&amp; !!githubTV</span><br><span class="line"><span class="keyword">const</span> isNPM = <span class="built_in">window</span>.location.href.search(<span class="regexp">/npmjs.com/i</span>) !== -<span class="number">1</span> &amp;&amp; !!npmTV</span><br><span class="line"></span><br><span class="line"><span class="comment">// MutationObserver option</span></span><br><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">  <span class="attr">childList</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">subtree</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> time = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doNotTranslate = <span class="function"><span class="keyword">function</span> (<span class="params">mutations, observer</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 处于过于频繁的 DOM 变更时, 暂停监听 50ms, 并放弃累积的未处理的变更事件</span></span><br><span class="line">  <span class="keyword">if</span> (time &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">    observer.disconnect()</span><br><span class="line">    observer.takeRecords()</span><br><span class="line">    time = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 在 50ms 后重启监听</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      isGitHub &amp;&amp; observer.observe(githubTV, option)</span><br><span class="line">      isNPM &amp;&amp; observer.observe(npmTV, option)</span><br><span class="line">    &#125;, <span class="number">50</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不要翻译文件名与目录</span></span><br><span class="line">  doNotTranslateFilenamesAndDirectories()</span><br><span class="line">  <span class="comment">// 不要翻译代码内容页</span></span><br><span class="line">  doNotTranslateCodeContentPages()</span><br><span class="line">  <span class="comment">// 不要翻译代码</span></span><br><span class="line">  doNotTranslateCode()</span><br><span class="line">  <span class="comment">// 不要翻译标题</span></span><br><span class="line">  doNotTranslateTitle()</span><br><span class="line"></span><br><span class="line">  time++</span><br><span class="line">  log(<span class="string">`第<span class="subst">$&#123;time&#125;</span>次执行: doNotTranslate`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MutationObserver =</span><br><span class="line">  <span class="built_in">window</span>.MutationObserver ||</span><br><span class="line">  <span class="built_in">window</span>.WebKitMutationObserver ||</span><br><span class="line">  <span class="built_in">window</span>.MozMutationObserver</span><br><span class="line"><span class="keyword">const</span> mo = <span class="keyword">new</span> MutationObserver(_.debounce(doNotTranslate, <span class="number">50</span>))</span><br><span class="line"></span><br><span class="line">isGitHub &amp;&amp; mo.observe(githubTV, option)</span><br><span class="line">isNPM &amp;&amp; mo.observe(npmTV, option)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>MutationObserver</tag>
      </tags>
  </entry>
  <entry>
    <title>持续集成</title>
    <url>/2019/11/09/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html">持续集成服务 Travis CI 教程</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23093540">前端持续集成解决方案 —— @zhihu</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://travis-ci.com/getting_started">travis-ci</a></li>
<li><a href="https://codecov.io/">codecov</a></li>
<li><a href="https://nightwatchjs.org/">nightwatch</a></li>
<li><a href="https://github.com/facebook/jest">jest</a></li>
</ul>
<h2 id="travis-ci-持续集成"><a href="#travis-ci-持续集成" class="headerlink" title="travis-ci 持续集成"></a><a href="https://travis-ci.com/getting_started">travis-ci</a> 持续集成</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>.travis.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">~/.npm</span></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line">  <span class="attr">email:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;node&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;lts/*&#x27;</span></span><br><span class="line"><span class="attr">install:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">npm@5</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">greenkeeper-lockfile@1</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">include:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">script:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build:prod</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">lint:fix</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">report-coverage</span></span><br><span class="line">      <span class="attr">before_script:</span> <span class="string">greenkeeper-lockfile-update</span></span><br><span class="line">      <span class="attr">after_script:</span> <span class="string">greenkeeper-lockfile-upload</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">      <span class="attr">node_js:</span> <span class="string">&#x27;node&#x27;</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">branch</span> <span class="string">=</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">script:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure>


<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul>
<li><a href="https://docs.travis-ci.com/user/job-lifecycle">https://docs.travis-ci.com/user/job-lifecycle</a></li>
</ul>
<h2 id="使用-jest-生成代码覆盖率报告-并用-codecov-上传"><a href="#使用-jest-生成代码覆盖率报告-并用-codecov-上传" class="headerlink" title="使用 jest 生成代码覆盖率报告, 并用 codecov 上传"></a>使用 <a href="https://github.com/facebook/jest">jest</a> 生成代码覆盖率报告, 并用 <a href="https://codecov.io/">codecov</a> 上传</h2><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i <span class="built_in">test</span> -D</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install codecov --save-dev</span><br></pre></td></tr></table></figure>

<p><code>jest.config.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// For a detailed explanation regarding each configuration property, visit:</span></span><br><span class="line"><span class="comment">// https://jestjs.io/docs/en/configuration.html</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">collectCoverage</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">testEnvironment</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">  <span class="attr">testMatch</span>: [<span class="string">&#x27;&lt;rootDir&gt;/__tests__/**/*spec.js&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;jest&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;report-coverage&quot;</span>: <span class="string">&quot;codecov&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>.travis.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">report-coverage</span></span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>travis-ci</tag>
        <tag>ci</tag>
        <tag>持续集成</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Testing Framework: jest</title>
    <url>/2019/11/13/JavaScript-Testing-Framework-jest/</url>
    <content><![CDATA[<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/facebook/jest">jest</a></li>
</ul>
<h2 id="jest-config-js"><a href="#jest-config-js" class="headerlink" title="jest.config.js"></a><a href="https://jestjs.io/docs/zh-Hans/configuration">jest.config.js</a></h2><ul>
<li><a href="https://jestjs.io/docs/zh-Hans/configuration">Configuring Jest</a></li>
</ul>
<h2 id="jest"><a href="#jest" class="headerlink" title="jest"></a><a href="https://github.com/facebook/jest">jest</a></h2><p>安装 jest</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev jest</span><br></pre></td></tr></table></figure>

<p>jest.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// For a detailed explanation regarding each configuration property, visit:</span></span><br><span class="line"><span class="comment">// https://jestjs.io/docs/en/configuration.html</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">collectCoverage</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">testEnvironment</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">  <span class="attr">testMatch</span>: [<span class="string">&#x27;&lt;rootDir&gt;/__tests__/**/*spec.js&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;jest&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="babel-jest"><a href="#babel-jest" class="headerlink" title="babel-jest"></a><a href="https://github.com/facebook/jest#using-babel">babel-jest</a></h2><ul>
<li><a href="https://floatsyi.com/2019/11/14/bable-jest/">bable-jest</a></li>
</ul>
]]></content>
      <tags>
        <tag>测试</tag>
        <tag>jest</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript compiler: Babel</title>
    <url>/2019/11/13/JavaScript-compiler-Babel/</url>
    <content><![CDATA[<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/babel/babel">babel</a></li>
<li><a href="https://github.com/zloirock/core-js">core-js</a></li>
<li><a href="https://github.com/kentcdodds/cross-env">cross-env</a></li>
</ul>
<h2 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h2><ul>
<li><a href="https://babeljs.io/docs/en/options">babel config file options</a></li>
</ul>
<h2 id="babel"><a href="#babel" class="headerlink" title="babel"></a><a href="https://github.com/babel/babel">babel</a></h2><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D @babel/core @babel/preset-env @babel/cli</span><br></pre></td></tr></table></figure>

<p><code>.babelrc</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;production&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;presets&quot;</span>: [</span><br><span class="line">        [</span><br><span class="line">          <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;modules&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;ignore&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;node_modules/**&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>安装 <a href="https://github.com/kentcdodds/cross-env">cross-env</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D cross-env</span><br></pre></td></tr></table></figure>

<p><code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;rollup --config&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build:prod&quot;</span>: <span class="string">&quot;cross-env BABEL_ENV=production npm run build&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Polyfill-core-js"><a href="#Polyfill-core-js" class="headerlink" title="Polyfill: core-js"></a>Polyfill: <a href="https://github.com/zloirock/core-js">core-js</a></h2><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D core-js@3</span><br></pre></td></tr></table></figure>

<p><code>.babelrc</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;production&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;presets&quot;</span>: [</span><br><span class="line">        [</span><br><span class="line">          <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;modules&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;corejs&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;version&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="attr">&quot;proposals&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="babel-jest"><a href="#babel-jest" class="headerlink" title="babel-jest"></a><a href="https://github.com/facebook/jest#using-babel">babel-jest</a></h2><ul>
<li><a href="https://floatsyi.com/2019/11/14/bable-jest/">bable-jest</a></li>
</ul>
]]></content>
      <tags>
        <tag>Babel</tag>
      </tags>
  </entry>
  <entry>
    <title>bable-jest</title>
    <url>/2019/11/14/bable-jest/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://floatsyi.com/2019/11/13/JavaScript-compiler-Babel/">JavaScript compiler: Babel</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://www.npmjs.com/package/babel-jest">bable-jest</a></li>
<li><a href="https://github.com/kentcdodds/cross-env">cross-env</a></li>
</ul>
<h2 id="bable-jest"><a href="#bable-jest" class="headerlink" title="bable-jest"></a><a href="https://www.npmjs.com/package/babel-jest">bable-jest</a></h2><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D babel-jest</span><br></pre></td></tr></table></figure>


<p><code>.babelrc</code><br>参考: <a href="https://floatsyi.com/2019/11/13/JavaScript-compiler-Babel/">JavaScript compiler: Babel</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;env&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &#123;</span><br><span class="line">      &quot;presets&quot;: [</span><br><span class="line">        [</span><br><span class="line">          &quot;@babel/preset-env&quot;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;targets&quot;: &#123;</span><br><span class="line">              &quot;node&quot;: &quot;current&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;modules&quot;: &quot;auto&quot;,</span><br><span class="line">            &quot;useBuiltIns&quot;: &quot;usage&quot;,</span><br><span class="line">            &quot;corejs&quot;: &#123;</span><br><span class="line">              &quot;version&quot;: 3,</span><br><span class="line">              &quot;proposals&quot;: true</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;cross-env BABEL_ENV=test jest&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>jest</tag>
        <tag>bable</tag>
        <tag>bable-jest</tag>
      </tags>
  </entry>
  <entry>
    <title>node-module-boilerplate</title>
    <url>/2019/11/15/node-module-boilerplate/</url>
    <content><![CDATA[<blockquote>
<p>愚蠢的人让神经网络像机器的硬盘一样记忆信息, 聪明的人让机器模仿学习像人类一样深邃的思考.</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://floatsyi.com/2019/09/26/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/">代码规范与项目结构</a></li>
<li><a href="https://floatsyi.com/2019/10/06/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/">前端构建工具</a></li>
<li><a href="https://floatsyi.com/2019/11/09/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/">持续集成</a></li>
<li><a href="https://floatsyi.com/2019/11/13/JavaScript-compiler-Babel/">JavaScript compiler: Babel</a></li>
<li><a href="https://floatsyi.com/2019/11/13/JavaScript-Testing-Framework-jest/">JavaScript Testing Framework: jest</a></li>
<li><a href="https://floatsyi.com/2019/11/14/bable-jest/">bable-jest</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/standard/eslint-config-standard">eslint-config-standard</a></li>
<li><a href="https://github.com/eslint/eslint">eslint</a></li>
<li><a href="https://www.rollupjs.org/guide/en/">rollup</a></li>
<li><a href="https://github.com/rollup/awesome">rollup/awesome</a></li>
<li><a href="https://github.com/okonet/lint-staged">lint-staged</a></li>
<li><a href="https://github.com/typicode/husky">husky</a></li>
<li><a href="https://github.com/facebook/jest">jest</a></li>
</ul>
<h2 id="node-module-boilerplate"><a href="#node-module-boilerplate" class="headerlink" title="node-module-boilerplate"></a><a href="https://github.com/FloatingShuYin/node-module-boilerplate">node-module-boilerplate</a></h2><h3 id="使用-npm-初始化项目"><a href="#使用-npm-初始化项目" class="headerlink" title="使用 npm 初始化项目"></a>使用 npm 初始化项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> x:/git.workspace/node-module-boilerplate</span><br><span class="line">npm init --scope=floatsyi</span><br></pre></td></tr></table></figure>

<h3 id="使用-rollup-构建工具-构建现代化-node-package"><a href="#使用-rollup-构建工具-构建现代化-node-package" class="headerlink" title="使用 rollup 构建工具, 构建现代化 node package"></a>使用 <a href="https://www.rollupjs.org/guide/en/">rollup</a> 构建工具, 构建现代化 node package</h3><ol>
<li><p>使用 npm 添加开发时依赖: rollup</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i rollup -D</span><br></pre></td></tr></table></figure></li>
<li><p>创建基本的目录结构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p src/index.js __test__/ build coverage rollup.config.js</span><br></pre></td></tr></table></figure>
<span id="more"></span></li>
<li><p>添加以下内容到 <code>rollup.config.js</code><br>参考: <a href="https://floatsyi.com/2019/10/06/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/">前端构建工具</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-babel&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; terser &#125; <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-terser&#x27;</span></span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-commonjs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-node-resolve&#x27;</span></span><br><span class="line"><span class="keyword">import</span> filesize <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-filesize&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">input</span>: <span class="string">&#x27;src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">file</span>: <span class="string">&#x27;build/index.cjs.js&#x27;</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">file</span>: <span class="string">&#x27;build/index.esm.js&#x27;</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;es&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">external</span>: [<span class="string">&#x27;core-js&#x27;</span>],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    resolve(),</span><br><span class="line">    babel(),</span><br><span class="line">    commonjs(),</span><br><span class="line">    terser(&#123;</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">// 保留版权注释</span></span><br><span class="line">        comments (node, comment) &#123;</span><br><span class="line">          <span class="keyword">const</span> text = comment.value</span><br><span class="line">          <span class="keyword">const</span> type = comment.type</span><br><span class="line">          <span class="keyword">if</span> (type === <span class="string">&#x27;comment2&#x27;</span> <span class="comment">/* multiline comment */</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/preserve|license|cc_on/i</span>.test(text)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    filesize()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>添加以下 npm script<br>package.json:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;build/index.cjs.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;build/index.esm.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;files&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;build&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;script&quot;</span>: &#123;</span><br><span class="line">     <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;rollup --config&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="使用-jest-测试框架测试代码"><a href="#使用-jest-测试框架测试代码" class="headerlink" title="使用 jest 测试框架测试代码"></a>使用 <a href="https://github.com/facebook/jest">jest</a> 测试框架测试代码</h3><p>参考: <a href="https://floatsyi.com/2019/11/13/JavaScript-Testing-Framework-jest/">JavaScript Testing Framework: jest</a></p>
<h3 id="使用-eslint-和-eslint-config-standard"><a href="#使用-eslint-和-eslint-config-standard" class="headerlink" title="使用 eslint 和 eslint-config-standard"></a>使用 <a href="https://github.com/eslint/eslint">eslint</a> 和 <a href="https://github.com/standard/eslint-config-standard">eslint-config-standard</a></h3><p>参考: <a href="https://floatsyi.com/2019/09/26/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/">代码规范与项目结构</a></p>
<ol>
<li><p>使用 npm 添加开发时依赖性: <a href="https://github.com/eslint/eslint">eslint</a> 和 <a href="https://github.com/standard/eslint-config-standard">eslint-config-standard</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D eslint</span><br><span class="line">npm install --save-dev eslint-config-standard eslint-plugin-standard eslint-plugin-promise eslint-plugin-import eslint-plugin-node</span><br></pre></td></tr></table></figure></li>
<li><p>新建 <code>.eslintrc</code> 和 <code>.eslintignore</code> 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch .eslintrc .eslintignore</span><br></pre></td></tr></table></figure>
<p><code>.eslintrc</code>:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;extends&quot;</span>: <span class="string">&quot;standard&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>.eslintignore</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">build/**</span><br></pre></td></tr></table></figure></li>
<li><p>添加以下 npm script<br>package.json:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;script&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;eslint .&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lint:fix&quot;</span>: <span class="string">&quot;eslint --fix .&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="使用-lint-staged-husky-以及-commitlint-规范-git-staged-files-和-git-commit-message"><a href="#使用-lint-staged-husky-以及-commitlint-规范-git-staged-files-和-git-commit-message" class="headerlink" title="使用 lint-staged , husky 以及 [commitlint][] 规范 git staged files 和 git commit message"></a>使用 <a href="https://github.com/okonet/lint-staged">lint-staged</a> , <a href="https://github.com/typicode/husky">husky</a> 以及 [commitlint][] 规范 git staged files 和 git commit message</h3><ol>
<li><p>使用 npm 添加开发时依赖: lint-staged \ husky \ commitlint</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D husky lint-staged</span><br><span class="line">npm install --save-dev @commitlint/config-angular @commitlint/cli</span><br><span class="line">npm install --save-dev @commitlint/prompt @commitlint/prompt-cli</span><br></pre></td></tr></table></figure></li>
<li><p>添加以下内容到 <code>package.json</code><br>package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;commit&quot;</span>: <span class="string">&quot;commit&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;*.js&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;eslint --fix&quot;</span>,</span><br><span class="line">      <span class="string">&quot;git add&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">&quot;husky&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;hooks&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;pre-commit&quot;</span>: <span class="string">&quot;lint-staged&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;commit-msg&quot;</span>: <span class="string">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>添加以下内容到 <code>commitlint.config.js</code><br>commitlint.config.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123; <span class="attr">extends</span>: [<span class="string">&#x27;@commitlint/config-angular&#x27;</span>] &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="使用-semantic-release-语义化版本号"><a href="#使用-semantic-release-语义化版本号" class="headerlink" title="使用 [semantic-release][] 语义化版本号"></a>使用 [semantic-release][] 语义化版本号</h3><ol>
<li><p>使用 npm 将 semantic-release-cli 安装至全局</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g semantic-release-cli</span><br></pre></td></tr></table></figure></li>
<li><p>执行 <code>semantic-release-cli setup</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">semantic-release-cli setup</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/semantic-release/semantic-release/blob/master/media/semantic-release-cli.png" alt="semantic-release-cli setup"></p>
</li>
</ol>
<h3 id="codecov"><a href="#codecov" class="headerlink" title="[codecov][]"></a>[codecov][]</h3><ol>
<li><p>使用 npm 添加开发时依赖: codecov</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install codecov --save-dev</span><br></pre></td></tr></table></figure></li>
<li><p>添加以下 npm script<br>package.json:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;script&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;codecov&quot;</span>: <span class="string">&quot;codecov&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="新建一个-github-仓库-对代码进行版本管理"><a href="#新建一个-github-仓库-对代码进行版本管理" class="headerlink" title="新建一个 github 仓库, 对代码进行版本管理"></a>新建一个 github 仓库, 对代码进行版本管理</h3><ol>
<li><p>登录 <a href="https://github.com/">github</a> 并新建一个名为 <code>node-module-boilerplate</code> 的仓库</p>
</li>
<li><p>使用 git 命令行工具将本地工作目录链接到 github 服务器的仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git remote add origin git@github.com:FloatingShuYin/node-module-boilerplate.git</span><br><span class="line">git pull --set-upstream origin master</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li>
<li><p>使用编辑器打开工作目录并重装 husky</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code .</span><br><span class="line">npm uninstall husky</span><br><span class="line">npm install -D husky</span><br><span class="line">npm audit fix</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>npm</tag>
        <tag>node-module</tag>
        <tag>boilerplate</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP,reverse,mail and a generic TCP/UDP proxy server:nginx</title>
    <url>/2019/11/21/HTTP-reverse-mail-and-a-generic-TCP-UDP-proxy-server-nginx/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://nginx.org/en/docs/">nginx.docs</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt; nginx</span><br><span class="line">Docroot is: /home/linuxbrew/.linuxbrew/var/www</span><br><span class="line"></span><br><span class="line">The default port has been set in /home/linuxbrew/.linuxbrew/etc/nginx/nginx.conf to 8080 so that</span><br><span class="line">nginx can run without sudo.</span><br><span class="line"></span><br><span class="line">nginx will load all files in /home/linuxbrew/.linuxbrew/etc/nginx/servers/.</span><br><span class="line"></span><br><span class="line">Warning: nginx provides a launchd plist which can only be used on macOS!</span><br><span class="line">You can manually execute the service instead with:</span><br><span class="line">  nginx</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP/IP, HTTP, QUIC, Axios</title>
    <url>/2019/11/28/TCP-IP-HTTP-QUIC-Axios/</url>
    <content><![CDATA[<blockquote>
<p>我看了下旁边的计算机， 又看了看手下的键盘， 还有眼前的显示器.<br>键盘是一个输入， 输入的是一个数据结构， 计算机是一个函数， 输出是一个数据结构， 被显示器解析.<br>我的眼睛接收到的是一个数据结构， 我的大脑是一个函数， 我的手指敲击键盘， 完成了一次输入.<br>—— 这样的闭环，它有美妙的名字： 人机交互.</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP">MDN web docs: http</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies">MDN web docs: Cookies</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">MDN web docs: HTTP Headers</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods">MDN web docs: HTTP Methods</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">MDN web docs: HTTP Status</a></li>
<li>[TCP-IP详解卷一：协议]</li>
<li>[图解HTTP]</li>
<li><a href="https://halfrost.com/quic_start/">本站开始支持 QUIC</a></li>
<li><a href="https://www.zhihu.com/question/302412059/answer/533223530">如何看待 HTTP/3 ？ ------@zhihu</a></li>
<li><a href="https://http3-explained.haxx.se/zh/">HTTP/3详解</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/axios/axios">axios</a></li>
</ul>
<span id="more"></span>

<h2 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h2><p>看了下 &lt;&lt;TCP-IP详解卷一：协议&gt;&gt;, 非常详(ku)细(zao)<br>只领悟到一些比较抽象的东西, 没时间去实践, 所以暂时弃之, 有空玩玩 wireshark 实践下.<br>不过对理解 HTTP 协议应该是足够了.</p>
<h3 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h3><p>安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install Wireshark</span><br></pre></td></tr></table></figure>
<p>现在没时(xing)间(qu)学网络分析, 先放着.</p>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP">MDN web docs: http</a><br>看了下 《图解HTTP》， 以下是少许提炼</li>
</ul>
<p>客户端与服务器通过 HTTP 协议对话.<br>HTTP 是对 TCP 协议的封装.</p>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>客户端与服务器通过 HTTPS 协议进行<strong>加密</strong>对话.<br>HTTPS 是对 SSL 与 TCP 协议的封装.<br>通常，HTTP 直接和 TCP 通信。当使用 SSL 时，则演变成先和 SSL 通信，再由 SSL 和 TCP 通信.</p>
<h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p>请求报文由 请求头 与 请求体 组成。</p>
<h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">MDN web docs: HTTP Headers</a></li>
</ul>
<p>请求头由 请求行， 通用首部字段（请求与响应通用的字段）， 请求首部字段与实体首部字段组成<br>所谓字段就是一种 key-value 型数据结构.<br>请求行由 请求方法 , 请求地址与HTTP版本号组成<br>例： GET /index.html HTTP/1.1</p>
<h5 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h5><p>请求方法常用的有以下几种：</p>
<ul>
<li><p>GET 获取资源</p>
</li>
<li><p>POST 提交实体主体（就是请求体）</p>
</li>
<li><p>PUT 传输文件（在 RESTful  API 中是提出修改请求）</p>
</li>
<li><p>DELETE 删除 （在 RESTful  API 中是提出删除请求）</p>
</li>
<li><p>HEAD 获取响应头</p>
</li>
<li><p>OPTIONS：询问指定 url 支持的方法</p>
</li>
</ul>
<h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h4><p>请求体一般是你要提交的 json 数据</p>
<h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>响应报文由 响应头 与 响应体 组成。</p>
<h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><p>响应头由 状态行， 通用首部字段（请求与响应通用的字段）， 响应首部字段与实体首部字段组成<br>状态行由 响应结果的状态码，原因短语和 HTTP 版本号组成<br>例： HTTP/1.1 200 OK</p>
<h5 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h5><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">MDN web docs: HTTP Status</a></li>
</ul>
<p>1XX Informational（信息性状态码） 接收的请求正在处理<br>2XX Success（成功状态码） 请求正常处理完毕<br>3XX Redirection（重定向状态码） 需要进行附加操作以完成请求<br>4XX Client Error（客户端错误状态码） 服务器无法处理请求<br>5XX Server Error（服务器错误状态码） 服务器处理请求出错</p>
<p>常用的响应码如下：</p>
<ul>
<li><p>200 OK 表示从客户端发来的请求在服务器端被正常处理了</p>
</li>
<li><p>204 No Content 返回的响应报文中不含实体的主体部分, 换言之， 没有响应数据.</p>
</li>
<li><p>206 Partial Content 表示服务器成功处理了客户端的范围请求</p>
</li>
<li><p>301 Moved Permanently<br>永久性重定向， 该状态码表示请求的资源已被分配了新的 URI<br>希望用户以后应使用资源现在所指的 URI。<br>甚至将url尾部的 <code>/</code> 去掉 都会响应301<br>如 <code>http://example.com/sample/</code> 改为 <code>http://example.com/sample</code></p>
</li>
<li><p>302 Found 临时性重定向。该状态码表示请求的资源已被分配了新的 URI， 希望<br>用户（本次）能使用新的 URI 访问。</p>
</li>
<li><p>303 See Other 同 302 Found， 但 303 状态码明确表示客户端应当采用 GET 方法获取资源</p>
<blockquote>
<p>当原先为 POST 请求，却得到响应状态码为 301、302、303 的重定向响应时，几乎所有的浏览器都会把<br>随后的 POST 请求改成 GET，并删除请求报文内的主体。<br>301、302 标准是禁止将 POST 方法改变成 GET 方法的，但实际使用时大家都会这么做。</p>
</blockquote>
</li>
<li><p>304 Not Modified<br>该状态码表示客户端发送附带条件的请求 2 时，服务器端允许请求访问资源，但未满足条件的情况。<br>304 状态码返回时，不包含任何响应的主体部分。<br>304 虽然被划分在 3XX 类别中，但是和重定向没有关系。</p>
<blockquote>
<p>附带条件的请求是指采用 GET 方法的请求报文中包含 If-Match，If-ModifiedSince，If-None-Match，If-Range，If-Unmodified-Since 中任一首部。</p>
</blockquote>
</li>
<li><p>307 Temporary Redirect 临时重定向。<br>该状态码与 302 Found 有着相同的含义。<br>尽管 302 标准禁止 POST 变换成 GET，但实际使用时大家并不遵守。<br>307 会遵照浏览器标准，不会从 POST 变成 GET。<br>但是，对于处理响应时的行为，每种浏览器有可能出现不同的情况。</p>
</li>
<li><p>400 Bad Request<br>该状态码表示请求报文中存在语法错误。<br>当错误发生时，需修改请求的内容后再次发送请求。<br>另外，浏览器会像 200 OK 一样对待该状态码</p>
</li>
<li><p>401 Unauthorized<br>该状态码表示发送的请求需要有通过 HTTP 认证（BASIC 认证、DIGEST 认证）的认证信息。<br>另外若之前已进行过 1 次请求，则表示用户认证失败。<br>返回含有 401 的响应必须包含一个适用于被请求资源的 WWWAuthenticate 首部用以质询（challenge）用户信息。<br>当浏览器初次接收到 401 响应，会弹出认证用的对话窗口。</p>
</li>
<li><p>403 Forbidden<br>该状态码表明对请求资源的访问被服务器拒绝了。<br>服务器端没有必要给出拒绝的详细理由，但如果想作说明的话，可以在实体的主体部分</p>
</li>
<li><p>404 Not Found<br>该状态码表明服务器上无法找到请求的资源。<br>除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</p>
</li>
<li><p>500 Internal Server Error<br>该状态码表明服务器端在执行请求时发生了错误。<br>也有可能是 Web应用存在的 bug 或某些临时的故障。</p>
</li>
<li><p>503 Service Unavailable<br>该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。<br>如果事先得知解除以上状况需要的时间，最好写入 RetryAfter 首部字段再返回给客户端。</p>
</li>
</ul>
<blockquote>
<p>状态码有可能和状况不一致<br>不少返回的状态码响应都是错误的，但是用户可能察觉不到这点。<br>比如 Web 应用程序内部发生错误，状态码依然返回 200 OK，这种<br>情况是属于编写应用的人员未规范使用状态码导致的。</p>
</blockquote>
<h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><p>响应体一般是你要获取的 json 数据</p>
<h3 id="缓存，-Cookie，-跨域-CORS，-HTTP-1-x-中的连接管理，-web-安全"><a href="#缓存，-Cookie，-跨域-CORS，-HTTP-1-x-中的连接管理，-web-安全" class="headerlink" title="缓存， Cookie， 跨域 CORS， HTTP/1.x 中的连接管理， web 安全"></a>缓存， Cookie， 跨域 CORS， HTTP/1.x 中的连接管理， web 安全</h3><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP">MDN web docs: http</a></li>
</ul>
<h2 id="QUIC-与-HTTP-3"><a href="#QUIC-与-HTTP-3" class="headerlink" title="QUIC 与 HTTP/3"></a>QUIC 与 HTTP/3</h2><ul>
<li><a href="https://www.zhihu.com/question/302412059/answer/533223530">如何看待 HTTP/3 ？ ------@zhihu</a></li>
<li><a href="https://http3-explained.haxx.se/zh/">HTTP/3详解</a></li>
<li><a href="https://halfrost.com/quic_start/">本站开始支持 QUIC</a></li>
</ul>
<h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>Promise based HTTP client for the browser and node.js</p>
<ul>
<li><a href="https://github.com/axios/axios">axios</a></li>
</ul>
]]></content>
      <tags>
        <tag>tcp/ip</tag>
        <tag>http</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>RESTful API and GraphQL API</title>
    <url>/2019/12/06/RESTful-API-and-GraphQL-API/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html">理解 RESTful 架构</a></li>
<li><a href="https://www.zhihu.com/question/33959971/answer/57593571">REST 风格的优势是什么？</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html">RESTful API 设计指南</a></li>
<li><a href="https://stackoverflow.com/questions/6068113/do-sessions-really-violate-restfulness">Do sessions really violate RESTfulness?</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/44140864">精读《REST, GraphQL, gRPC 如何选型》</a></li>
<li><a href="https://graphql.cn/">GraphQL 中文网</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/39293150">(译)为什么选用 GraphQL：它的优点、缺点和备选方案(上)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/39378504">(译)为什么选用 GraphQL：它的优点、缺点和备选方案(下)</a></li>
<li><a href="https://www.zhihu.com/question/38596306/answer/257614180">GraphQL 为何没有火起来?</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/aisuhua/restful-api-design-references">restful-api-design-references</a></li>
<li><a href="https://github.com/lujakob/nestjs-realworld-example-app">nestjs-realworld-example-app</a></li>
<li><a href="https://github.com/fivethree-team/nestjs-prisma-starter">nestjs-prisma-starter</a></li>
<li><a href="https://github.com/chentsulin/awesome-graphql">awesome-graphql</a></li>
</ul>
<span id="more"></span>

<h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>RESTful 是什么</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html">理解 RESTful 架构</a></li>
</ul>
<h3 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h3><p>为什么要用 RESTful</p>
<ul>
<li><a href="https://www.zhihu.com/question/33959971/answer/57593571">REST 风格的优势是什么？</a></li>
</ul>
<h3 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h3><ul>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html">RESTful API 设计指南</a></li>
<li><a href="https://github.com/aisuhua/restful-api-design-references">restful-api-design-references</a></li>
</ul>
<h4 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h4><ul>
<li><a href="https://github.com/lujakob/nestjs-realworld-example-app">nestjs-realworld-example-app</a></li>
</ul>
<h2 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h2><h3 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h3><ul>
<li><a href="https://graphql.cn/">GraphQL 中文网</a></li>
</ul>
<h3 id="为什么-1"><a href="#为什么-1" class="headerlink" title="为什么"></a>为什么</h3><ul>
<li><a href="https://zhuanlan.zhihu.com/p/39293150">(译)为什么选用 GraphQL：它的优点、缺点和备选方案(上)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/39378504">(译)为什么选用 GraphQL：它的优点、缺点和备选方案(下)</a></li>
<li><a href="https://www.zhihu.com/question/38596306/answer/257614180">GraphQL 为何没有火起来?</a></li>
</ul>
<h3 id="怎么做-1"><a href="#怎么做-1" class="headerlink" title="怎么做"></a>怎么做</h3><p>GraphQL 开源的服务端与客户端实现, 语法以及规范：</p>
<ul>
<li><a href="https://graphql.cn/">GraphQL 中文网</a></li>
</ul>
<h4 id="实例代码-1"><a href="#实例代码-1" class="headerlink" title="实例代码"></a>实例代码</h4><ul>
<li><a href="https://github.com/fivethree-team/nestjs-prisma-starter">nestjs-prisma-starter</a></li>
</ul>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li><a href="https://stackoverflow.com/questions/6068113/do-sessions-really-violate-restfulness">Do sessions really violate RESTfulness?</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/44140864">精读《REST, GraphQL, gRPC 如何选型》</a></li>
<li><a href="https://github.com/chentsulin/awesome-graphql">awesome-graphql</a></li>
<li><a href="https://github.com/search?q=awesome+restful">https://github.com/search?q=awesome+restful</a></li>
</ul>
]]></content>
      <tags>
        <tag>RESTful</tag>
        <tag>GraphQL</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>Learn once, write anywhere: React Native</title>
    <url>/2019/12/07/Learn-once-write-anywhere-React-Native/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://reactnative.cn/docs/getting-started.html">reactnative getting-started</a></li>
<li><a href="https://reactnative.cn/docs/running-on-device/">reactnative running-on-device</a></li>
<li><a href="https://github.com/lukesampson/scoop/wiki/Switching-Ruby-And-Python-Versions">Scoop: Switching Ruby and Python Versions</a></li>
<li><a href="https://github.com/FloatingShuYin/development-environment-manual/blob/master/javascript.md#%E5%AE%89%E8%A3%85-node-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-nvmnode-version-management">development-environment-manual: javascript</a></li>
<li><a href="https://github.com/FloatingShuYin/development-environment-manual/blob/master/java.md#%E5%AE%89%E8%A3%85-jdk">development-environment-manual: java</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/facebook/react">react</a></li>
<li><a href="https://github.com/facebook/react-native">react-native</a></li>
<li><a href="https://github.com/yarnpkg/yarn">yarn</a></li>
<li><a href="https://www.npmjs.com/package/react-native-cli">react-native-cli</a><span id="more"></span></li>
</ul>
<h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>如果不需要使用模拟器而是物理机开发就不必了</p>
<ul>
<li>打开 Intel Virtualization Technology</li>
<li>关闭 Hyper-v</li>
</ul>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>安装 node</li>
</ol>
<ul>
<li><a href="https://github.com/FloatingShuYin/development-environment-manual/blob/master/javascript.md#%E5%AE%89%E8%A3%85-node-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-nvmnode-version-management">development-environment-manual: javascript</a></li>
</ul>
<ol start="2">
<li>安装 python</li>
</ol>
<ul>
<li><a href="https://github.com/lukesampson/scoop/wiki/Switching-Ruby-And-Python-Versions">Scoop: Switching Ruby and Python Versions</a></li>
</ul>
<ol start="3">
<li>安装 jdk<br><del>- <a href="https://github.com/FloatingShuYin/development-environment-manual/blob/master/java.md#%E5%AE%89%E8%A3%85-jdk">development-environment-manual: java</a></del><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo scoop install ojdkbuild8-full -g</span><br></pre></td></tr></table></figure></li>
<li>安装 Android Studio<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install android<span class="literal">-studio</span></span><br></pre></td></tr></table></figure></li>
<li>安装 Android SDK</li>
</ol>
<ul>
<li>[reactnative getting-started.html#2-安装-android-sdk]: <a href="https://reactnative.cn/docs/getting-started.html#2-%E5%AE%89%E8%A3%85-android-sdk">https://reactnative.cn/docs/getting-started.html#2-%E5%AE%89%E8%A3%85-android-sdk</a></li>
</ul>
<ol start="6">
<li>添加环境变量<br>按快捷键 <code>win + x + a</code> 以管理员权限打开 powershell， 执行以下命令：<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env:ANDROID_HOME</span>=<span class="string">&quot;<span class="variable">$env:LOCALAPPDATA</span>\Android\Sdk&quot;</span></span><br><span class="line"><span class="variable">$env:PATH</span>=<span class="string">&quot;<span class="variable">$env:PATH</span>;<span class="variable">$env:ANDROID_HOME</span>\platform-tools&quot;</span></span><br><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&quot;ANDROID_HOME&quot;</span>, <span class="string">&quot;<span class="variable">$env:ANDROID_HOME</span>&quot;</span>, <span class="string">&quot;Machine&quot;</span>)</span><br><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&quot;PATH&quot;</span>, <span class="string">&quot;<span class="variable">$env:PATH</span>&quot;</span>, <span class="string">&quot;Machine&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li>安装 <a href="https://github.com/yarnpkg/yarn">yarn</a> 和 <a href="https://www.npmjs.com/package/react-native-cli">react-native-cli</a><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> yarn react<span class="literal">-native</span><span class="literal">-cli</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="在物理机上运行"><a href="#在物理机上运行" class="headerlink" title="在物理机上运行"></a>在物理机上运行</h2><ul>
<li><a href="https://reactnative.cn/docs/running-on-device/">reactnative running-on-device</a></li>
</ul>
<h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><ol>
<li>创建 <code>react.native.workspace</code> 工作目录<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir <span class="literal">-p</span> react.native.workspace/day0</span><br><span class="line"><span class="built_in">cd</span> react.native.workspace/day0</span><br></pre></td></tr></table></figure></li>
<li>使用  <a href="https://www.npmjs.com/package/react-native-cli">react-native-cli</a> 来创建一个名为<code>helloworld</code>的新项目<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">react<span class="literal">-native</span> init helloworld</span><br></pre></td></tr></table></figure></li>
<li>链接安卓手机</li>
</ol>
<ul>
<li><a href="https://reactnative.cn/docs/running-on-device/">reactnative running-on-device</a></li>
</ul>
<ol start="4">
<li>运行<br>usb 链接物理机 然后编译安装软件包<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> helloWorld</span><br><span class="line">yarn android</span><br></pre></td></tr></table></figure>
如果出现 <code>Failed to install the following Android SDK packages as some licences have not been accepted</code> 错误<br>则执行<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-Expression</span> <span class="string">&quot;<span class="variable">$env:ANDROID_HOME</span>/tools/bin/sdkmanager --licenses&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>热重载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure>

<h2 id="放弃"><a href="#放弃" class="headerlink" title="放弃"></a>放弃</h2><ul>
<li>成熟的工具因为 GFW 用不了， 如 <a href="https://expo.io/">https://expo.io/</a></li>
<li>好吧， 既然成熟的工具用不了， 就用官方出的 react-native-cli 吧<br>结果十月份的 <a href="https://github.com/react-native-community/cli/issues/853">bug</a>， 现在都到十二月了还没修复，<br>每次编译还要自己去<code>node_modules</code>下改源码</li>
<li>改源码就改源码吧， 结果想找个类似  <code>electron</code> 的 <code>open-file-dialog</code> 组件， 没有！！！</li>
<li>没有就没有吧， 添加个<a href="https://github.com/itinance/react-native-fs">react-native-fs</a> 自己实现吧<br>又 TM 要手动改 <code>node_modules</code> 下源码</li>
<li>告辞， Flutter 走起</li>
</ul>
]]></content>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Arch Liunx 的 发行版: Manjaro</title>
    <url>/2019/12/07/%E5%9F%BA%E4%BA%8E-Arch-Liunx-%E7%9A%84-%E5%8F%91%E8%A1%8C%E7%89%88-Manjaro/</url>
    <content><![CDATA[<p><img src="http://r.photo.store.qq.com/psc?/V12iDrZG1mzmnh/uMeul31pGB4ZvQm8Ou4xcQusFzaMQtX5c0lWF3.b9dQ0gdyG**xu7pJP1Ns1qbaRd2mytJizJc5OiZ2jnpiLu2n.3DPccdoc.J7w6ZF9Ors!/r" alt="manjaro desktop screen"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://manjaro.org/">manjaro</a></li>
<li><a href="https://forum.manjaro.org/">manjaro.forum</a></li>
<li><a href="https://manjaro.org/support/userguide/">manjaro.userguide</a></li>
<li><a href="https://rufus.ie/">Rufus</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://manjaro.org/download/official/xfce/">manjaro xfce</a></li>
<li><a href="https://rufus.ie/">Rufus</a></li>
<li><a href="http://www.diskgenius.cn/help/index.php?from=dg">diskgenius</a></li>
</ul>
<span id="more"></span>

<h2 id="制作-U-盘引导，并硬盘安装-manjaro-与-windows-10-双系统"><a href="#制作-U-盘引导，并硬盘安装-manjaro-与-windows-10-双系统" class="headerlink" title="制作 U 盘引导，并硬盘安装 manjaro 与 windows 10 双系统"></a>制作 U 盘引导，并硬盘安装 manjaro 与 windows 10 双系统</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ul>
<li>一个多余的硬盘     （需要被格式化）</li>
<li>一个 &gt; 4GB 的 U 盘 （需要被格式化）</li>
<li>支持 UEFI 的主板</li>
<li>关闭 安全启动 与 快速启动</li>
</ul>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>下载 <a href="https://manjaro.org/download/official/xfce/">manjaro xfce</a> minimal 镜像文件并验证文件完整性</li>
<li>下载 U 盘引导写入工具 <a href="https://rufus.ie/">Rufus</a><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop bucket add extras</span><br><span class="line">scoop install Rufus</span><br></pre></td></tr></table></figure></li>
<li>使用 <a href="http://www.diskgenius.cn/help/index.php?from=dg">diskgenius</a> 将要安装 <a href="https://manjaro.org/download/official/xfce/">manjaro xfce</a> 的硬盘快速分区， 设置如下图：<br><img src="http://r.photo.store.qq.com/psc?/V12iDrZG1mzmnh/uMeul31pGB4ZvQm8Ou4xcT19I3WCV*fRmPLfQxeajyi6ofvaSLyDegoi9PkLgt7AJ.J3xLRFAF*Vao.97Mo7XjNLFWgASEbTMH*Rtj9ElMU!/r" alt="diskgenius 快速分区"></li>
<li>使用 <a href="https://rufus.ie/">Rufus</a> 将 <a href="https://manjaro.org/download/official/xfce/">manjaro xfce</a> minimal 镜像文件写入 U 盘， 设置如下图：<br><img src="http://r.photo.store.qq.com/psc?/V12iDrZG1mzmnh/uMeul31pGB4ZvQm8Ou4xcZ8veDcASaoVEfG0BZSSWfGkdm9yN0QblxXsOIJhJvD8qTKoIXdKSA00JlEK8EeM.dCTFC8rLTSRDEFolKU5MDY!/r" alt="Rufus 写入镜像"></li>
<li>写入完成后， 重启计算机， 按主板厂商定义的快捷键进入 UEFI 设置界面<br>选择从 U 盘启动。</li>
<li>启动后即可进入 manjaro 安装引导界面， 根据 manjaro 安装引导完成安装。</li>
</ol>
<h2 id="安装-yay"><a href="#安装-yay" class="headerlink" title="安装 yay"></a>安装 yay</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S yay</span><br></pre></td></tr></table></figure>

<h2 id="使用中国镜像"><a href="#使用中国镜像" class="headerlink" title="使用中国镜像"></a>使用中国镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China -m rank</span><br><span class="line">sudo pacman -Syy</span><br></pre></td></tr></table></figure>

<h2 id="安装-vscode"><a href="#安装-vscode" class="headerlink" title="安装 vscode"></a>安装 vscode</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S code</span><br></pre></td></tr></table></figure>

<h2 id="安装-i3wm"><a href="#安装-i3wm" class="headerlink" title="安装 i3wm"></a>安装 i3wm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S i3-gaps</span><br></pre></td></tr></table></figure>

<p>在 <code>~/.xinit</code> 末尾加上 <code>exec i3</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="built_in">exec</span> i3 &gt;&gt; ~/.xinit</span><br></pre></td></tr></table></figure>


<h2 id="安装终端模拟器-alacritty"><a href="#安装终端模拟器-alacritty" class="headerlink" title="安装终端模拟器 alacritty"></a>安装终端模拟器 alacritty</h2><h2 id="安装-fish-shell"><a href="#安装-fish-shell" class="headerlink" title="安装 fish shell"></a>安装 fish shell</h2><h2 id="安装-oh-my-fish"><a href="#安装-oh-my-fish" class="headerlink" title="安装 oh-my-fish"></a>安装 oh-my-fish</h2><h2 id="安装-neofeh"><a href="#安装-neofeh" class="headerlink" title="安装 neofeh"></a>安装 neofeh</h2><h2 id="安装-python"><a href="#安装-python" class="headerlink" title="安装 python"></a>安装 python</h2><h3 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h3><h2 id="安装-nvm"><a href="#安装-nvm" class="headerlink" title="安装 nvm"></a>安装 nvm</h2><h3 id="安装-node"><a href="#安装-node" class="headerlink" title="安装 node"></a>安装 node</h3><h2 id="安装-polybar"><a href="#安装-polybar" class="headerlink" title="安装 polybar"></a>安装 polybar</h2><h2 id="安装-中文输入法"><a href="#安装-中文输入法" class="headerlink" title="安装 中文输入法"></a>安装 中文输入法</h2><h2 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h2><h2 id="安装网易云播放器"><a href="#安装网易云播放器" class="headerlink" title="安装网易云播放器"></a>安装网易云播放器</h2>]]></content>
      <tags>
        <tag>liunx</tag>
        <tag>arch</tag>
        <tag>manjaro</tag>
      </tags>
  </entry>
  <entry>
    <title>Beautiful native apps in record time: Flutter</title>
    <url>/2019/12/10/Beautiful-native-apps-in-record-time-Flutter/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://flutter.dev/">Flutter 官网</a></li>
<li><a href="https://flutterchina.club/get-started/install/">Flutter 中文网</a></li>
<li><a href="https://dart.dev/">Dart 官网</a></li>
<li><a href="https://floatsyi.com/2019/12/07/Learn-once-write-anywhere-React-Native/">Learn-once-write-anywhere-React-Native</a></li>
<li><a href="https://juejin.im/post/5b97fa0d5188255c5546dcf8">Flutter | 状态管理探索篇——Scoped Model（一）</a></li>
<li><a href="https://juejin.im/post/5ba26c086fb9a05ce57697da">Flutter | 状态管理探索篇——Redux（二）</a></li>
<li><a href="https://juejin.im/post/5bb6f344f265da0aa664d68a">Flutter | 状态管理探索篇——BLoC(三)</a></li>
<li><a href="https://juejin.im/post/5baa4b90e51d450e6d00f12e">Dart | 什么是Stream</a></li>
<li><a href="https://juejin.im/post/5bcea438e51d4536c65d2232">Flutter | 状态管理拓展篇——RxDart(四)</a></li>
<li><a href="https://github.com/jacobaraujo7/bloc-pattern/blob/master/README.md">bloc-pattern</a></li>
<li><a href="https://github.com/ReactiveX/rxdart">RxDart</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter">Vscode: Dart-Code.flutter</a></li>
<li><a href="https://flutter.dev/docs/development/tools/sdk/releases#windows">Flutter SDK</a></li>
<li><a href="https://github.com/Solido/awesome-flutter">awesome-flutter</a></li>
<li><a href="https://github.com/OpenFlutter/Flutter-Notebook">OpenFlutter/Flutter-Notebook</a></li>
<li><a href="https://github.com/jacobaraujo7/bloc-pattern/blob/master/README.md">bloc-pattern</a></li>
<li><a href="https://github.com/Flutterando/slidy">slidy</a></li>
<li><a href="https://github.com/ReactiveX/rxdart">RxDart</a></li>
<li><a href="https://github.com/LilySny/counter-using-bloc_pattern">counter-using-bloc_pattern</a></li>
</ul>
<span id="more"></span>

<h2 id="配置-android-开发环境"><a href="#配置-android-开发环境" class="headerlink" title="配置 android 开发环境"></a>配置 android 开发环境</h2><p>参考 <a href="https://floatsyi.com/2019/12/07/Learn-once-write-anywhere-React-Native/">Learn-once-write-anywhere-React-Native</a></p>
<h2 id="vscode-的-flutter-插件-必装"><a href="#vscode-的-flutter-插件-必装" class="headerlink" title="vscode 的 flutter 插件(必装)"></a>vscode 的 flutter 插件(必装)</h2><ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter">Vscode: Dart-Code.flutter</a></li>
</ul>
<h2 id="安装-Flutter-SDK"><a href="#安装-Flutter-SDK" class="headerlink" title="安装 Flutter SDK"></a>安装 Flutter SDK</h2><ol>
<li>下载 <a href="https://flutter.dev/docs/development/tools/sdk/releases#windows">Flutter SDK</a> Stable channel (Windows)， 并解压到合适的目录</li>
<li>按快捷键 <code>win + x + a</code> 打开 powershell， 执行以下命令， 以添加环境变量<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$flutterPath</span>=<span class="string">&quot;X:\Support\Other\flutter\bin&quot;</span> <span class="comment"># 改为你的 Flutter 解压路径</span></span><br><span class="line"><span class="variable">$userPath</span>=[<span class="type">Environment</span>]::GetEnvironmentVariable(<span class="string">&quot;Path&quot;</span>, <span class="string">&quot;User&quot;</span>) + <span class="string">&quot;;<span class="variable">$flutterPath</span>&quot;</span></span><br><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&quot;PATH&quot;</span>, <span class="string">&quot;<span class="variable">$userPath</span>&quot;</span>, <span class="string">&quot;User&quot;</span>)</span><br><span class="line"><span class="variable">$env:PATH</span>=<span class="string">&quot;<span class="variable">$env:PATH</span>;<span class="variable">$flutterPath</span>&quot;</span></span><br><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&quot;PATH&quot;</span>, <span class="string">&quot;<span class="variable">$env:PATH</span>&quot;</span>, <span class="string">&quot;Machine&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li>继续执行以下命令, 以设置镜像<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&#x27;PUB_HOSTED_URL&#x27;</span>, <span class="string">&#x27;https://pub.flutter-io.cn&#x27;</span>, <span class="string">&#x27;User&#x27;</span>)</span><br><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&#x27;FLUTTER_STORAGE_BASE_URL&#x27;</span>, <span class="string">&#x27;https://storage.flutter-io.cn&#x27;</span>, <span class="string">&#x27;User&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h3><p>dart 已经包含在 flutter sdk 中， 因此只要添加环境变量即可<br>  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$dartPath</span>=<span class="string">&quot;X:\Support\Other\flutter\bin\cache\dart-sdk\bin&quot;</span> <span class="comment"># 改为你的 Flutter 解压路径</span></span><br><span class="line"><span class="variable">$env:PATH</span>=<span class="string">&quot;<span class="variable">$env:PATH</span>;<span class="variable">$dartPath</span>&quot;</span></span><br><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&quot;PATH&quot;</span>, <span class="string">&quot;<span class="variable">$env:PATH</span>&quot;</span>, <span class="string">&quot;Machine&quot;</span>)</span><br></pre></td></tr></table></figure></p>
<h4 id="dart-包管理-pub"><a href="#dart-包管理-pub" class="headerlink" title="dart 包管理 pub"></a>dart 包管理 pub</h4><p>pub 使用请参考 <a href="https://dart.dev/guides/packages#importing-libraries-from-packages">How to use packages</a></p>
<ol>
<li>为将来安装在全局的软件包添加环境变量, 请执行以下命令<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$pubCachePath</span>=<span class="string">&quot;X:\Support\Other\flutter\.pub-cache\bin&quot;</span></span><br><span class="line"><span class="variable">$env:PATH</span>=<span class="string">&quot;<span class="variable">$env:PATH</span>;<span class="variable">$pubCachePath</span>&quot;</span></span><br><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&quot;PATH&quot;</span>, <span class="string">&quot;<span class="variable">$env:PATH</span>&quot;</span>, <span class="string">&quot;Machine&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li>按快捷键 <code>win + x + u + i</code> 注销登录，并重新登录以刷新环境变量</li>
<li>执行以下命令以验证所有安装<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">flutter -<span class="literal">-version</span></span><br><span class="line">dart -<span class="literal">-version</span></span><br><span class="line">pub -<span class="literal">-version</span></span><br></pre></td></tr></table></figure>
<h4 id="dart-语法"><a href="#dart-语法" class="headerlink" title="dart 语法"></a>dart 语法</h4>dart 语法请参考 <a href="https://dart.dev/guides/language/language-tour">A tour of the Dart language</a><br><a href="https://dart.dev/">Dart 官网</a> 有个 Repl 可以练习.</li>
</ol>
<h4 id="dart-代码样式规范"><a href="#dart-代码样式规范" class="headerlink" title="dart 代码样式规范"></a>dart 代码样式规范</h4><ul>
<li><a href="https://dart.dev/guides/language/effective-dart#the-guides">Effective Dart</a></li>
</ul>
<h2 id="状态管理-BLoC"><a href="#状态管理-BLoC" class="headerlink" title="状态管理 BLoC"></a>状态管理 BLoC</h2><p>推荐使用 <a href="https://github.com/jacobaraujo7/bloc-pattern/blob/master/README.md">bloc-pattern</a> + <a href="https://github.com/ReactiveX/rxdart">Rxdart</a></p>
<ul>
<li><a href="https://juejin.im/post/5b97fa0d5188255c5546dcf8">Flutter | 状态管理探索篇——Scoped Model（一）</a></li>
<li><a href="https://juejin.im/post/5ba26c086fb9a05ce57697da">Flutter | 状态管理探索篇——Redux（二）</a></li>
<li><a href="https://juejin.im/post/5bb6f344f265da0aa664d68a">Flutter | 状态管理探索篇——BLoC(三)</a></li>
<li><a href="https://juejin.im/post/5baa4b90e51d450e6d00f12e">Dart | 什么是Stream</a></li>
<li><a href="https://juejin.im/post/5bcea438e51d4536c65d2232">Flutter | 状态管理拓展篇——RxDart(四)</a></li>
</ul>
<h2 id="flutter-包管理-slidy"><a href="#flutter-包管理-slidy" class="headerlink" title="flutter 包管理 slidy"></a>flutter 包管理 slidy</h2><ul>
<li><a href="https://github.com/Flutterando/slidy">slidy</a></li>
</ul>
<h2 id="DI-Dependency-Injection-Bloc-Pattern"><a href="#DI-Dependency-Injection-Bloc-Pattern" class="headerlink" title="DI(Dependency Injection): Bloc Pattern"></a>DI(Dependency Injection): Bloc Pattern</h2><ul>
<li><a href="https://github.com/jacobaraujo7/bloc-pattern/blob/master/README.md">bloc-pattern</a></li>
</ul>
<h2 id="Hello-World-CountApp"><a href="#Hello-World-CountApp" class="headerlink" title="Hello World: CountApp"></a>Hello World: CountApp</h2><ul>
<li><a href="https://github.com/LilySny/counter-using-bloc_pattern">counter-using-bloc_pattern</a></li>
</ul>
<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>slidy 构建的一个 mvc 模板， 这是很高规格的应用了， 小应用一般用不了这么复杂<br><a href="https://github.com/Flutterando/slidy/tree/master/example">https://github.com/Flutterando/slidy/tree/master/example</a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>组件 布局 交互 标准库这些<br>看官网吧</p>
<ul>
<li><a href="https://flutter.dev/">Flutter 官网</a></li>
<li><a href="https://flutterchina.club/get-started/install/">Flutter 中文网</a></li>
<li><a href="https://dart.dev/">Dart 官网</a></li>
</ul>
<!--
  $flutterPath="X:\Support\Other\flutter\bin" # 改为你的 Flutter 解压路径
  $userPath=[Environment]::GetEnvironmentVariable("Path", "User") + ";$flutterPath"
  [Environment]::SetEnvironmentVariable("PATH", "$userPath", "User")
  $env:PATH="$env:PATH;$flutterPath"
  [Environment]::SetEnvironmentVariable("PATH", "$env:PATH", "Machine")
-->
<!--
  $dartPath="X:\Support\Other\flutter\bin\cache\dart-sdk\bin"
  $env:PATH="$env:PATH;$dartPath"
  [Environment]::SetEnvironmentVariable("PATH", "$env:PATH", "Machine")
-->
<!--
  [Environment]::SetEnvironmentVariable('PUB_HOSTED_URL', 'https://pub.flutter-io.cn', 'User')
  [Environment]::SetEnvironmentVariable('FLUTTER_STORAGE_BASE_URL', 'https://storage.flutter-io.cn', 'User')
-->
<!--
  $pubCachePath="X:\Support\Other\flutter\.pub-cache\bin"
  $env:PATH="$env:PATH;$pubCachePath"
  [Environment]::SetEnvironmentVariable("PATH", "$env:PATH", "Machine")
-->

]]></content>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Authentication and Authorisation: JWT, OAuth2.0, OpenID, SMAL2.0, SSO</title>
    <url>/2019/12/18/Authentication-and-Authorisation-JWT-OAuth2-0-OpenID-SMAL2-0-SSO/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://juejin.im/post/5e060589f265da33b0718f55">(译)你不需要 passport.js — node.js认证指南</a></li>
<li><a href="https://docs.nestjs.com/techniques/authentication">nestjs docs: authentication</a></li>
<li><a href="https://medium.com/@sherryhsu/session-vs-token-based-authentication-11a6c5ac45e4">Session vs Token Based Authentication</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/73168768">JWT实现分布式Session？行不？</a></li>
<li><a href="https://www.zhihu.com/question/315397046/answer/695069994">session正在被淘汰吗？</a></li>
<li><a href="https://www.zhihu.com/question/274566992/answer/376239148">jwt与token+redis，哪种方案更好用？</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">JSON Web Token 入门教程</a></li>
<li>[jwt.io]: <a href="https://jwt.io/">https://jwt.io/</a></li>
<li><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2></li>
<li><a href="https://github.com/jaredhanson/passport">passport</a></li>
<li><a href="https://github.com/expressjs/session">expressjs/session</a></li>
</ul>
]]></content>
      <tags>
        <tag>Authentication</tag>
        <tag>Authorisation</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Flutter 解决一个小需求</title>
    <url>/2019/12/13/%E4%BD%BF%E7%94%A8-Flutter-%E8%A7%A3%E5%86%B3%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%9C%80%E6%B1%82/</url>
    <content><![CDATA[<p><img src="http://r.photo.store.qq.com/psb?/V12iDrZG1mzmnh/9MT7bJz9ghqKIAaxbiYqnBtHsBK56EJSZi6vay1gWIo!/r/dFQBAAAAAAAA" alt="collection_file"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://floatsyi.com/2019/12/10/Beautiful-native-apps-in-record-time-Flutter/">Beautiful native apps in record time: Flutter</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://termux.com/">termux</a></li>
<li><a href="https://github.com/Genymobile/scrcpy">scrcpy</a> 使用 pc 控制 android 的神器！</li>
<li><a href="https://github.com/flutter/">Flutter</a></li>
<li><a href="https://github.com/fluttervn/md5_plugin">md5_plugin</a></li>
<li><a href="https://github.com/flutter/plugins">flutter/plugins</a></li>
<li><a href="https://github.com/DarkSouL11/flutter_directory_picker">flutter_directory_picker</a></li>
<li><a href="https://github.com/flutter/plugins">flutter/plugins</a></li>
</ul>
<span id="more"></span>

<h2 id="collection-file"><a href="#collection-file" class="headerlink" title="collection_file"></a>collection_file</h2><p>大概五天前， 遇到个小问题， 想把从 B 站上缓存的视频提取到同一目录级别下<br>先是去酷安找了下， 果然如我所料， 像这种冷门的小需求没有现成的软件可以用啊<br>后来我是直接把手机连上电脑， 用 node 写了个小脚本来做这件事情<br>代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fse = <span class="built_in">require</span>(<span class="string">&#x27;fs-extra&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getMD5 = <span class="function"><span class="params">file</span> =&gt;</span></span><br><span class="line">  crypto</span><br><span class="line">    .createHash(<span class="string">&#x27;md5&#x27;</span>)</span><br><span class="line">    .update(fs.readFileSync(file))</span><br><span class="line">    .digest(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">extract</span> (<span class="params">input, output, operating, suffix</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fileAndDir = fs.readdirSync(input)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> fileAndDir) &#123;</span><br><span class="line">    <span class="keyword">const</span> fullPath = path.join(input, item)</span><br><span class="line">    <span class="keyword">const</span> stat = fs.statSync(fullPath)</span><br><span class="line">    <span class="keyword">if</span> (stat.isDirectory()) &#123;</span><br><span class="line">      <span class="comment">// 是目录则递归</span></span><br><span class="line">      <span class="keyword">await</span> extract(path.join(input, item), output, operating, suffix)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path.extname(item) === suffix) &#123;</span><br><span class="line">      <span class="comment">// 后缀匹配则执行操作</span></span><br><span class="line">      <span class="keyword">if</span> (operating === <span class="string">&#x27;move&#x27;</span>) &#123;</span><br><span class="line">        fse.move(fullPath, path.join(output, <span class="string">`<span class="subst">$&#123;getMD5(fullPath)&#125;</span><span class="subst">$&#123;suffix&#125;</span>`</span>))</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="comment">/* is copy*/</span>&#123;</span><br><span class="line">        fse.copy(fullPath, path.join(output, <span class="string">`<span class="subst">$&#123;getMD5(fullPath)&#125;</span><span class="subst">$&#123;suffix&#125;</span>`</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> run = <span class="keyword">async</span> (input, output, operating, suffix) =&gt; &#123;</span><br><span class="line">  <span class="comment">// ensure</span></span><br><span class="line">  <span class="keyword">await</span> fse.ensureDir(input)</span><br><span class="line">  <span class="keyword">await</span> fse.ensureDirSync(output)</span><br><span class="line">  <span class="comment">// extract</span></span><br><span class="line">  extract(input, output, operating, suffix)</span><br><span class="line">&#125;</span><br><span class="line">run(<span class="string">&#x27;O:/download&#x27;</span>, <span class="string">&#x27;O:/output&#x27;</span>, <span class="string">&#x27;move&#x27;</span>, <span class="string">&#x27;.blv&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>但是因为 node 无法直接访问到手机的内存卡<br>需要先把文件 copy 到 windows 磁盘中操作， 又慢又麻烦<br>又没找到如何才能给手机内存分配盘符的方法， 只好另辟途径了<br>然后就想到用 <a href="https://termux.com/">termux</a> 在手机上执行 nodejs.<br>后来一想，搞这许多， 不如干脆点写个小 app 算了.<br>一开始是准备用 react-native 写， 但是遇到几个问题， 受不了， 所以就转用 flutter 了.<br>除了 dart 的分号看着有点别扭外， 开发体验挺舒服的， 尤其是静态语言的 API 提示是真的爽。<br>节选代码如下：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _setMessage(<span class="built_in">String</span> msg) &#123;</span><br><span class="line">  setState(() &#123;</span><br><span class="line">    _counter = msg;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _collectionFile(Directory inputDir, Directory outputDir,</span><br><span class="line">    <span class="built_in">String</span> operating, <span class="built_in">String</span> suffix) &#123;</span><br><span class="line">  _setMessage(<span class="string">&#x27;Start scanning...&#x27;</span>);</span><br><span class="line">  <span class="built_in">String</span> suf = <span class="string">&#x27;.<span class="subst">$suffix</span>&#x27;</span>;</span><br><span class="line">  inputDir</span><br><span class="line">      .list(recursive: <span class="keyword">true</span>, followLinks: <span class="keyword">false</span>)</span><br><span class="line">      .listen((FileSystemEntity entity) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entity <span class="keyword">is</span> File) &#123;</span><br><span class="line">      <span class="built_in">String</span> ext = p.<span class="keyword">extension</span>(entity.path);</span><br><span class="line">      <span class="keyword">if</span> (ext == suf) &#123;</span><br><span class="line">        <span class="built_in">String</span> fileMD5 = <span class="keyword">await</span> _calculateMD5SumAsyncWithPlugin(entity.path);</span><br><span class="line">        <span class="built_in">String</span> outputFilePath =</span><br><span class="line">            <span class="string">&#x27;<span class="subst">$&#123;outputDir.path&#125;</span>/<span class="subst">$&#123;sha1.convert(utf8.encode(fileMD5))&#125;</span><span class="subst">$suf</span>&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (File(outputFilePath).existsSync()) &#123;</span><br><span class="line">          _setMessage(<span class="string">&#x27;<span class="subst">$&#123;p.basename(outputFilePath)&#125;</span> is exists&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (operating == <span class="string">&#x27;copy&#x27;</span>) &#123;</span><br><span class="line">            entity.copy(outputFilePath).whenComplete(() &#123;</span><br><span class="line">              _setMessage(<span class="string">&#x27;Copy <span class="subst">$&#123;p.basename(outputFilePath)&#125;</span> Complete&#x27;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="comment">/* move */</span> &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// print(entity.path);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _startCollectionFile(</span><br><span class="line">    <span class="built_in">String</span> input, <span class="built_in">String</span> output, <span class="built_in">String</span> operating, <span class="built_in">String</span> suffix) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (input != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">      output != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">      operating != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">      suffix != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">      _hasValidMime &amp;&amp;</span><br><span class="line">      _counter != <span class="string">&#x27;Start scanning...&#x27;</span>) &#123;</span><br><span class="line">    Directory inputDir = <span class="keyword">await</span> Directory(input).create(recursive: <span class="keyword">true</span>);</span><br><span class="line">    Directory outputDir = <span class="keyword">await</span> Directory(output).create(recursive: <span class="keyword">true</span>);</span><br><span class="line">    _collectionFile(inputDir, outputDir, operating, suffix);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决一个小需求就花了我五天， 如果没有这些大佬们开源出来的框架和库， 我又需要多少个五天呢？</p>
]]></content>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Revive unavailable songs for Netease Cloud Music: UnblockNeteaseMusic</title>
    <url>/2019/12/19/Revive-unavailable-songs-for-Netease-Cloud-Music-UnblockNeteaseMusic/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/FloatingShuYin/development-environment-manual/blob/master/javascript.md">javascript 开发环境搭建(windows 10)</a></li>
<li><a href="https://floatsyi.com/2019/12/29/Securely-build-share-and-run-any-application-anywhere-docker/">Securely build, share and run any application, anywhere: docker</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/nondanee/UnblockNeteaseMusic">nondanee/UnblockNeteaseMusic</a></li>
<li><a href="https://github.com/oldj/SwitchHosts">oldj/SwitchHosts</a></li>
</ul>
<span id="more"></span>

<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>UWP 版本使用 host 转发的方法：</p>
<ol>
<li><p>参考 <a href="https://github.com/FloatingShuYin/development-environment-manual/blob/master/javascript.md">javascript 开发环境搭建(windows 10)</a>， 安装 node 与 scoop.<br>或者 参考 <a href="https://floatsyi.com/2019/12/29/Securely-build-share-and-run-any-application-anywhere-docker/">Securely build, share and run any application, anywhere: docker</a> 安装 docker</p>
</li>
<li><p>按快捷键 <code>win + x + a</code> 以管理员权限运行 powershell， 并执行以下命令以允许将 UWP 应用请求转发到 localhost</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">checknetisolation loopbackexempt <span class="literal">-a</span> <span class="literal">-n</span>=<span class="string">&quot;1F8B0F94.122165AE053F_j2p0p5q0044a6&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>执行 <code>scoop bucket add extras;scoop install switchhosts</code> 以下载安装 <a href="https://github.com/oldj/SwitchHosts">oldj/SwitchHosts</a></p>
</li>
<li><p>执行 <code>sudo start &quot;$env:SCOOP/apps/switchhosts/current/SwitchHosts!.exe&quot;</code> 以管理员权限打开 switchhosts， 并新建以下规则</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># netease music</span><br><span class="line">127.0.0.1 music.163.com</span><br><span class="line">127.0.0.1 interface.music.163.com</span><br></pre></td></tr></table></figure></li>
<li><p>执行 <code>ping music.163.com</code> 获取 cdn 服务器的 ip 地址</p>
</li>
<li><p>将此 <code>npx @nondanee/unblockneteasemusic -p 80 -f 59.111.181.35</code> 命令中的 59.111.181.35 替换为上一步获取的 ip 地址并执行</p>
</li>
</ol>
<p><strong>推荐使用</strong> docker: <code>docker run --name unblockneteasemusic -e NODE_ENV=production -d -p 80:8080 nondanee/unblockneteasemusic -f 59.111.181.35</code></p>
<p>或者 docker-compose -f ./unblockneteasemusic.yml up -d<br>unblockneteasemusic.yml:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">unblockneteasemusic:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nondanee/unblockneteasemusic</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">NODE_ENV:</span> <span class="string">production</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">node</span> <span class="string">app.js</span> <span class="string">-f</span> <span class="number">59.111</span><span class="number">.181</span><span class="number">.35</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li>打开网易云音乐 uwp 以验证转发服务工作正常</li>
</ol>
]]></content>
      <tags>
        <tag>UnblockNeteaseMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>Securely build, share and run any application, anywhere: docker</title>
    <url>/2019/12/29/Securely-build-share-and-run-any-application-anywhere-docker/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://floatsyi.com/2019/12/29/The-Package-Manager-for-Windows-choco-and-scoop/">The Package Manager for Windows: choco and scoop</a></li>
<li><a href="https://docker_practice.gitee.io/zh-cn/">Docker — 从入门到实践</a></li>
<li><a href="https://www.docker.com/">docker.com</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/topics/docker">Docker</a></li>
</ul>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>首先要安装 choco: <a href="https://floatsyi.com/2019/12/29/The-Package-Manager-for-Windows-choco-and-scoop/">The Package Manager for Windows: choco and scoop</a></p>
</li>
<li><p>按 <code>win + x + a</code> 快捷键打开 powershell 终端窗口</p>
</li>
<li><p>执行以下命令， 以下载安装 docker-for-windows</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">choco install docker<span class="literal">-for</span><span class="literal">-windows</span> -<span class="literal">-yes</span></span><br></pre></td></tr></table></figure></li>
<li><p>执行以下命令， 以验证安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker -<span class="literal">-version</span>;docker<span class="literal">-compose</span> -<span class="literal">-version</span>;docker<span class="literal">-machine</span> -<span class="literal">-version</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li><a href="https://docs.docker.com/compose/compose-file/#secrets">Docker secrets and configs</a></li>
</ul>
<h2 id="看书吧！！"><a href="#看书吧！！" class="headerlink" title="看书吧！！"></a>看书吧！！</h2><blockquote>
<p>This is the way</p>
</blockquote>
<ul>
<li><a href="https://docker_practice.gitee.io/zh-cn/">Docker — 从入门到实践</a></li>
<li><a href="https://www.docker.com/">docker.com</a></li>
</ul>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>The Package Manager for Windows: choco and scoop</title>
    <url>/2019/12/29/The-Package-Manager-for-Windows-choco-and-scoop/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/FloatingShuYin/development-environment-manual#%E5%AE%89%E8%A3%85-windows-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-scoop">安装 windows 包管理工具: scoop</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/lukesampson/scoop">scoop</a></li>
<li><a href="https://github.com/chocolatey/choco">choco</a></li>
</ul>
<span id="more"></span>

<h2 id="安装-scoop"><a href="#安装-scoop" class="headerlink" title="安装 scoop"></a>安装 scoop</h2><ul>
<li><a href="https://github.com/FloatingShuYin/development-environment-manual#%E5%AE%89%E8%A3%85-windows-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-scoop">安装 windows 包管理工具: scoop</a></li>
</ul>
<h2 id="安装-choco"><a href="#安装-choco" class="headerlink" title="安装 choco"></a>安装 choco</h2><ol>
<li>按快捷键 <code>Win + X + A</code> 打开 powershell 终端窗口</li>
<li>请在 powershell 终端窗口执行以下命令, 以设置 choco 安装目录: <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env:ChocolateyInstall</span>=<span class="string">&#x27;X:\Support\Choco&#x27;</span> <span class="comment"># choco 安装目录, 你可以自行修改为合适的路径.</span></span><br><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&#x27;ChocolateyInstall&#x27;</span>, <span class="variable">$env:ChocolateyInstall</span>, <span class="string">&#x27;Machine&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>关闭当前终端窗口, 再次按快捷键 <code>Win + X + A</code> 打开 powershell 终端窗口, 执行以下命令, 以安装 choco: <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> Bypass <span class="literal">-Scope</span> <span class="keyword">Process</span> <span class="literal">-Force</span>; <span class="built_in">iex</span> ((<span class="built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="string">&#x27;https://chocolatey.org/install.ps1&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
<li>执行 <code>choco -v</code> 以验证安装. –&gt;</li>
</ol>
]]></content>
      <tags>
        <tag>choco</tag>
        <tag>scoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Reactive Extensions Library for JavaScript: Rxjs</title>
    <url>/2020/01/01/Reactive-Extensions-Library-for-JavaScript-Rxjs/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2>]]></content>
      <tags>
        <tag>Reactive</tag>
        <tag>Rxjs</tag>
      </tags>
  </entry>
  <entry>
    <title>DDD and Microservices</title>
    <url>/2020/01/13/DDD-and-Microservices/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.jianshu.com/p/92ca0bfbd52f">单体架构,SOA架构,微服务架构,分布式架构,集群架构</a></li>
<li><a href="https://www.zhihu.com/question/62041885/answer/579606144">云服务器都能用来做什么？</a></li>
<li><a href="https://www.zhihu.com/question/65502802">什么是微服务架构？</a></li>
</ul>
]]></content>
      <tags>
        <tag>DDD</tag>
        <tag>Microservices</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库相关且必要的知识补充</title>
    <url>/2020/01/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3%E4%B8%94%E5%BF%85%E8%A6%81%E7%9A%84%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/43493165">深入理解数据库事务与一致性</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/67949045">通俗易懂 数据一致性</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/52678870">深入理解数据库行锁与表锁</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/85889976">MySQL数据库的锁机制</a></li>
<li><a href="https://juejin.im/post/5e1b353c6fb9a0301e0de80b">Redis 常见的使用场景总结</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/34510121">两程序员玩“锁”，一人抢救无效身亡</a> 有内味了</li>
<li><a href="https://zhuanlan.zhihu.com/p/27323883">(科普文, python 描述)什么是 ORM 中的 N+1 问题</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/99718374">Elasticsearch如何做到数十亿数据查询毫秒级响应？</a></li>
</ul>
<span id="more"></span>

<h2 id="typeorm-中的-N-1-问题-有吗？似乎没有"><a href="#typeorm-中的-N-1-问题-有吗？似乎没有" class="headerlink" title="typeorm 中的 N+1 问题 (有吗？似乎没有)"></a>typeorm 中的 N+1 问题 (有吗？似乎没有)</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Entity, PrimaryGeneratedColumn, Column, ManyToOne, OneToMany &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="meta">@PrimaryGeneratedColumn</span>()</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="meta">@Column</span>()</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="meta">@OneToMany</span>(<span class="function"><span class="params">type</span> =&gt;</span> Post, <span class="function"><span class="params">post</span> =&gt;</span> post.user)</span><br><span class="line">  <span class="attr">posts</span>: Post[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Post</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Column</span>(&#123; <span class="attr">length</span>: <span class="number">255</span> &#125;)</span><br><span class="line">    <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="meta">@Column</span>()</span><br><span class="line">    <span class="attr">content</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="meta">@ManyToOne</span>(<span class="function"><span class="params">type</span> =&gt;</span> User, <span class="function"><span class="params">user</span> =&gt;</span> user.posts)</span><br><span class="line">    <span class="attr">user</span>: User;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getRepository &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Post &#125; <span class="keyword">from</span> <span class="string">&quot;./entity/Post&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postRepository = getRepository(Post)</span><br><span class="line"><span class="keyword">const</span> posts = postRepository.find(&#123;</span><br><span class="line">  <span class="attr">select</span>: [<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">  <span class="attr">relations</span>: [<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;user.name&#x27;</span>]</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>an in-memory database that persists on disk: redis</title>
    <url>/2020/01/17/an-in-memory-database-that-persists-on-disk-redis/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://floatsyi.com/2020/01/17/windows-subsystem-archliunx/">windows subsystem archliunx</a></li>
<li><a href="https://redis.io/">redis.io</a></li>
<li><a href="https://www.runoob.com/redis/redis-tutorial.html">Redis 菜鸟教程</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/antirez/redis">redis</a></li>
</ul>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 wsl2 archliunx<br>请参考  <a href="https://floatsyi.com/2020/01/17/windows-subsystem-archliunx/">windows subsystem archliunx</a></p>
<p>在 wsl2 中安装 <a href="https://github.com/antirez/redis">redis</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S redis</span><br></pre></td></tr></table></figure>

<p>验证安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server --version</span><br><span class="line">redis-cli --version</span><br></pre></td></tr></table></figure>

<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p>看书吧！！</p>
<ul>
<li>《redis 开发与运维》</li>
<li>《redis 深度历险核心原理与应用实践》</li>
</ul>
<p>官网文档： <a href="https://redis.io/documentation">https://redis.io/documentation</a></p>
]]></content>
      <tags>
        <tag>in-memory database</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>powershell 美化</title>
    <url>/2020/01/17/powershell-%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://floatsyi.com/2019/09/27/Windows-Terminal/">Windows-Terminal</a></li>
<li><a href="https://sspai.com/post/52868">告别 Windows 终端的难看难用，从改造 PowerShell 的外观开始</a></li>
<li><a href="https://sspai.com/post/52907">5 个 PowerShell 主题，让你的 Windows 终端更好看</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/microsoft/terminal/">microsoft/terminal</a></li>
<li><a href="https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/windowsterminal">iTerm2-Color-Schemes</a></li>
</ul>
<span id="more"></span>


<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装及配置终端模拟器 <a href="https://github.com/microsoft/terminal/">microsoft/terminal</a><br>请参考 <a href="https://floatsyi.com/2019/09/27/Windows-Terminal/">Windows-Terminal</a></p>
<p>安装 oh-my-posh 和 posh-git</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> posh<span class="literal">-git</span> <span class="literal">-Scope</span> CurrentUser</span><br><span class="line"><span class="built_in">Install-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span> <span class="literal">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>

<p>安装 colortool</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop install colortool</span><br></pre></td></tr></table></figure>

<p>clone <a href="https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/windowsterminal">iTerm2-Color-Schemes</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git clone -<span class="literal">-depth</span> <span class="number">1</span> https://github.com/mbadolato/iTerm2<span class="literal">-Color</span><span class="literal">-Schemes</span>.git</span><br></pre></td></tr></table></figure>

<h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">code $PROFILE</span><br></pre></td></tr></table></figure>

<p>Microsoft.PowerShell_profile.ps1</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> posh<span class="literal">-git</span></span><br><span class="line"><span class="built_in">Import-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span></span><br><span class="line"><span class="built_in">Set-Culture</span> en<span class="literal">-US</span></span><br><span class="line"><span class="built_in">Set-Theme</span> Sorin</span><br><span class="line"><span class="built_in">clear</span></span><br><span class="line"><span class="comment"># Paradox</span></span><br></pre></td></tr></table></figure>

<p>修改主题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~\iTerm2-Color-Schemes\schemes</span><br><span class="line">colortool -d ./Tomorrow.itermcolors</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>powershell</tag>
        <tag>美化</tag>
      </tags>
  </entry>
  <entry>
    <title>windows subsystem archliunx</title>
    <url>/2020/01/17/windows-subsystem-archliunx/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://floatsyi.com/2019/12/29/The-Package-Manager-for-Windows-choco-and-scoop/">The-Package-Manager-for-Windows-choco-and-scoop</a></li>
<li><a href="https://floatsyi.com/2019/09/26/%E6%9C%80%E4%BD%B3-Linux-%E5%8F%91%E8%A1%8C%E7%89%88-Windows-10-WSL/">最佳 Linux 发行版 Windows 10(WSL)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/51270874">利用WSL打造Arch开发环境</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/yuk7/ArchWSL">ArchWSL</a></li>
</ul>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 scoop<br>请参考 <a href="https://floatsyi.com/2019/12/29/The-Package-Manager-for-Windows-choco-and-scoop/">The-Package-Manager-for-Windows-choco-and-scoop</a></p>
<p>安装 wsl<br>请参考 <a href="https://floatsyi.com/2019/09/26/%E6%9C%80%E4%BD%B3-Linux-%E5%8F%91%E8%A1%8C%E7%89%88-Windows-10-WSL/">最佳 Linux 发行版 Windows 10(WSL)</a></p>
<p>安装 <a href="https://github.com/yuk7/ArchWSL">ArchWSL</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop bucket add extras</span><br><span class="line">sudo scoop install archwsl -g</span><br></pre></td></tr></table></figure>

<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p>安装 manjaro<br>请参考 <a href="https://zhuanlan.zhihu.com/p/51270874">利用WSL打造Arch开发环境</a></p>
]]></content>
      <tags>
        <tag>wsl2</tag>
        <tag>wsl</tag>
        <tag>archlinux</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建 gitlab 私有服务器</title>
    <url>/2020/01/18/%E6%90%AD%E5%BB%BA-gitlab-%E7%A7%81%E6%9C%89%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p><img src="http://r.photo.store.qq.com/psc?/V12iDrZG1mzmnh/uMeul31pGB4ZvQm8Ou4xce4K6t5XUs*00HfOVo2TO2*NPs6.IOoJEaGAkW3AXoEpfxJp.NG7e84FX17E8ZoF44QtfpEXuEh21dPdtO8g7IA!/r" alt="gitlab private servers"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://docs.gitlab.com/ee/administration/">gitlab docs</a></li>
<li><a href="https://github.com/sameersbn/docker-gitlab/blob/master/README.md">docker-gitlab README.md</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/topics/docker">docker</a></li>
<li><a href="https://github.com/sameersbn/docker-gitlab">docker-gitlab</a></li>
</ul>
<span id="more"></span>

<h2 id="使用-docker-部署-gitlab"><a href="#使用-docker-部署-gitlab" class="headerlink" title="使用 docker 部署 gitlab"></a>使用 docker 部署 gitlab</h2><p>scoop 和 choco 的安装请参考: <a href="https://floatsyi.com/2019/12/29/The-Package-Manager-for-Windows-choco-and-scoop/">The-Package-Manager-for-Windows-choco-and-scoop</a><br>使用 scoop 安装 wget</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install <span class="built_in">wget</span></span><br></pre></td></tr></table></figure>

<p>使用 wget 下载 <a href="https://github.com/sameersbn/docker-gitlab">docker-gitlab</a> 的 docker-compose 配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml -O gitlab-docker.yml</span><br></pre></td></tr></table></figure>


<p>下载随机字符串生成工具 pwgen(windows UI 版) （liunx 系统可以使用自带的 pwgen -Bsv1 64）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo choco install pwgen --yes</span><br></pre></td></tr></table></figure>

<p>打开 pwgen 然后生成 64 字符长度的随机字符串如下(生产环境不可暴露)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PlYHu1efqnSiXf8YKAvCQyexqvyqHVpCvrbQFRFekk8OEWocq5joTjbrbpo25XB2</span><br></pre></td></tr></table></figure>

<p>创建 .env 文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">touch .env</span><br></pre></td></tr></table></figure>

<p>.env</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHARACTERS_LONG_64_SECRETS_KEY_BASE=PlYHu1efqnSiXf8YKAvCQyexqvyqHVpCvrbQFRFekk8OEWocq5joTjbrbpo25XB2</span><br><span class="line">DB_NAME=gitlabhq_production</span><br><span class="line">DB_PORT=5432</span><br><span class="line">DB_USER=gitlab</span><br><span class="line">DB_PASS=password</span><br><span class="line">DB_EXTENSION=pg_trgm</span><br><span class="line">REDIS_PORT=6379</span><br><span class="line">GITLAB_PORT=10080</span><br><span class="line">GITLAB_SSH_PORT=10022</span><br><span class="line">TZ=Asia/Shanghai</span><br><span class="line">GITLAB_TIMEZONE=Beijing</span><br><span class="line">SMTP_ENABLED=false</span><br><span class="line">SMTP_DOMAIN=www.example.com</span><br><span class="line">SMTP_HOST=smtp.gmail.com</span><br><span class="line">SMTP_PORT=587</span><br><span class="line">SMTP_USER=mailer@example.com</span><br><span class="line">SMTP_PASS=password</span><br><span class="line">SMTP_STARTTLS=true</span><br><span class="line">SMTP_AUTHENTICATION=login</span><br></pre></td></tr></table></figure>

<p>创建 docker 数据卷， 请参考: <a href="https://docker_practice.gitee.io/zh-cn/data_management/volume.html">https://docker_practice.gitee.io/zh-cn/data_management/volume.html</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker volume create redis<span class="literal">-data</span></span><br><span class="line">docker volume create postgresql<span class="literal">-data</span></span><br><span class="line">docker volume create gitlab<span class="literal">-data</span></span><br></pre></td></tr></table></figure>

<p>编辑 gitlab-docker.yml<br>gitlab 可用配置参数请参考: <a href="https://github.com/sameersbn/docker-gitlab/blob/master/README.md#available-configuration-parameters">https://github.com/sameersbn/docker-gitlab/blob/master/README.md#available-configuration-parameters</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">code gitlab-docker.yml</span><br></pre></td></tr></table></figure>

<p>gitlab-docker.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sameersbn/redis:4.0.9-2</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--loglevel</span> <span class="string">warning</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">redis-data:/var/lib/redis:Z</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">postgresql:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sameersbn/postgresql:10-2</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">postgresql-data:/var/lib/postgresql:Z</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_USER=$&#123;DB_USER&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_PASS=$&#123;DB_PASS&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_NAME=$&#123;DB_NAME&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_EXTENSION=$&#123;DB_EXTENSION&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">gitlab:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sameersbn/gitlab:12.5.5</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">postgresql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;$&#123;GITLAB_PORT&#125;:80&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;$&#123;GITLAB_SSH_PORT&#125;:22&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">gitlab-data:/home/git/data:Z</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DEBUG=false</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_ADAPTER=postgresql</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_HOST=postgresql</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_PORT=$&#123;DB_PORT&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_USER=$&#123;DB_USER&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_PASS=$&#123;DB_PASS&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_NAME=$&#123;DB_NAME&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">REDIS_HOST=redis</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">REDIS_PORT=$&#123;REDIS_PORT&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">TZ=$&#123;TZ&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_TIMEZONE=$&#123;GITLAB_TIMEZONE&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_HTTPS=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SSL_SELF_SIGNED=false</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_HOST=localhost</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_PORT=$&#123;GITLAB_PORT&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_SSH_PORT=$&#123;GITLAB_SSH_PORT&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_RELATIVE_URL_ROOT=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_SECRETS_DB_KEY_BASE=$&#123;CHARACTERS_LONG_64_SECRETS_KEY_BASE&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_SECRETS_SECRET_KEY_BASE=$&#123;CHARACTERS_LONG_64_SECRETS_KEY_BASE&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_SECRETS_OTP_KEY_BASE=$&#123;CHARACTERS_LONG_64_SECRETS_KEY_BASE&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_ROOT_PASSWORD=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_ROOT_EMAIL=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_NOTIFY_ON_BROKEN_BUILDS=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_NOTIFY_PUSHER=false</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_EMAIL=notifications@example.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_EMAIL_REPLY_TO=noreply@example.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_INCOMING_EMAIL_ADDRESS=reply@example.com</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_BACKUP_SCHEDULE=daily</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_BACKUP_TIME=01:00</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_ENABLED=$&#123;SMTP_ENABLED&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_DOMAIN=$&#123;SMTP_DOMAIN&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_HOST=$&#123;SMTP_HOST&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_PORT=$&#123;SMTP_PORT&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_USER=$&#123;SMTP_USER&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_PASS=$&#123;SMTP_PASS&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_STARTTLS=$&#123;SMTP_STARTTLS&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_AUTHENTICATION=$&#123;SMTP_AUTHENTICATION&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_ENABLED=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_HOST=imap.gmail.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_PORT=993</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_USER=mailer@example.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_PASS=password</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_SSL=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_STARTTLS=false</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_ENABLED=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTO_SIGN_IN_WITH_PROVIDER=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_ALLOW_SSO=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_BLOCK_AUTO_CREATED_USERS=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTO_LINK_LDAP_USER=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTO_LINK_SAML_USER=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_EXTERNAL_PROVIDERS=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CAS3_LABEL=cas3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CAS3_SERVER=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CAS3_DISABLE_SSL_VERIFICATION=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CAS3_LOGIN_URL=/cas/login</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CAS3_VALIDATE_URL=/cas/p3/serviceValidate</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CAS3_LOGOUT_URL=/cas/logout</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GOOGLE_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GOOGLE_APP_SECRET=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GOOGLE_RESTRICT_DOMAIN=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_FACEBOOK_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_FACEBOOK_APP_SECRET=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_TWITTER_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_TWITTER_APP_SECRET=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GITHUB_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GITHUB_APP_SECRET=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GITHUB_URL=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GITHUB_VERIFY_SSL=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GITLAB_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GITLAB_APP_SECRET=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_BITBUCKET_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_BITBUCKET_APP_SECRET=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ASSERTION_CONSUMER_SERVICE_URL=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_IDP_CERT_FINGERPRINT=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_IDP_SSO_TARGET_URL=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ISSUER=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_LABEL=&quot;Our</span> <span class="string">SAML</span> <span class="string">Provider&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_NAME_IDENTIFIER_FORMAT=urn:oasis:names:tc:SAML:2.0:nameid-format:transient</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_GROUPS_ATTRIBUTE=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_EXTERNAL_GROUPS=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ATTRIBUTE_STATEMENTS_EMAIL=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ATTRIBUTE_STATEMENTS_NAME=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ATTRIBUTE_STATEMENTS_USERNAME=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ATTRIBUTE_STATEMENTS_FIRST_NAME=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ATTRIBUTE_STATEMENTS_LAST_NAME=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CROWD_SERVER_URL=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CROWD_APP_NAME=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CROWD_APP_PASSWORD=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTH0_CLIENT_ID=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTH0_CLIENT_SECRET=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTH0_DOMAIN=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTH0_SCOPE=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AZURE_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AZURE_API_SECRET=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AZURE_TENANT_ID=</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">redis-data:</span></span><br><span class="line">  <span class="attr">postgresql-data:</span></span><br><span class="line">  <span class="attr">gitlab-data:</span></span><br></pre></td></tr></table></figure>

<p>生成并运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose -f gitlab-docker.yml up</span><br></pre></td></tr></table></figure>

<p>打开 <a href="http://127.0.0.1:10080/">http://127.0.0.1:10080</a> 修改默认的 root 用户密码</p>
<h2 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h2><p>google 邮箱被墙了， 所以这里避免麻烦，配置 sina 邮箱<br>参考: <a href="https://docs.gitlab.com/omnibus/settings/smtp.html">https://docs.gitlab.com/omnibus/settings/smtp.html</a></p>
<p>首先登录邮箱， 开启 smtp<br>然后修改 gitlab-docker.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sameersbn/redis:4.0.9-2</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--loglevel</span> <span class="string">warning</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">redis-data:/var/lib/redis:Z</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">postgresql:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sameersbn/postgresql:10-2</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">postgresql-data:/var/lib/postgresql:Z</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_USER=$&#123;DB_USER&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_PASS=$&#123;DB_PASS&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_NAME=$&#123;DB_NAME&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_EXTENSION=$&#123;DB_EXTENSION&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">gitlab:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sameersbn/gitlab:12.5.5</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">postgresql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;$&#123;GITLAB_PORT&#125;:80&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;$&#123;GITLAB_SSH_PORT&#125;:22&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">gitlab-data:/home/git/data:Z</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DEBUG=false</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_ADAPTER=postgresql</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_HOST=postgresql</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_PORT=$&#123;DB_PORT&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_USER=$&#123;DB_USER&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_PASS=$&#123;DB_PASS&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_NAME=$&#123;DB_NAME&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">REDIS_HOST=redis</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">REDIS_PORT=$&#123;REDIS_PORT&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">TZ=$&#123;TZ&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_TIMEZONE=$&#123;GITLAB_TIMEZONE&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_HTTPS=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SSL_SELF_SIGNED=false</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_HOST=localhost</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_PORT=$&#123;GITLAB_PORT&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_SSH_PORT=$&#123;GITLAB_SSH_PORT&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_RELATIVE_URL_ROOT=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_SECRETS_DB_KEY_BASE=$&#123;CHARACTERS_LONG_64_SECRETS_KEY_BASE&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_SECRETS_SECRET_KEY_BASE=$&#123;CHARACTERS_LONG_64_SECRETS_KEY_BASE&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_SECRETS_OTP_KEY_BASE=$&#123;CHARACTERS_LONG_64_SECRETS_KEY_BASE&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_ROOT_PASSWORD=$&#123;GITLAB_ROOT_PASSWORD&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_ROOT_EMAIL=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_NOTIFY_ON_BROKEN_BUILDS=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_NOTIFY_PUSHER=false</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_EMAIL=$&#123;GITLAB_EMAIL&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_EMAIL_REPLY_TO=$&#123;GITLAB_EMAIL_REPLY_TO&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_INCOMING_EMAIL_ADDRESS=$&#123;GITLAB_INCOMING_EMAIL_ADDRESS&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_BACKUP_SCHEDULE=daily</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_BACKUP_TIME=01:00</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_ENABLED=$&#123;SMTP_ENABLED&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_DOMAIN=$&#123;SMTP_DOMAIN&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_HOST=$&#123;SMTP_HOST&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_PORT=$&#123;SMTP_PORT&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_USER=$&#123;SMTP_USER&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_PASS=$&#123;SMTP_PASS&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_STARTTLS=$&#123;SMTP_STARTTLS&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_AUTHENTICATION=$&#123;SMTP_AUTHENTICATION&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_ADDRESS=$&#123;SMTP_ADDRESS&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_ENABLE_STARTTLS_AUTO=$&#123;SMTP_ENABLE_STARTTLS_AUTO&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_TLS=$&#123;SMTP_TLS&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_EMAIL_FROM=$&#123;GITLAB_EMAIL_FROM&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_ENABLED=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_HOST=imap.gmail.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_PORT=993</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_USER=mailer@example.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_PASS=password</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_SSL=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_STARTTLS=false</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_ENABLED=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTO_SIGN_IN_WITH_PROVIDER=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_ALLOW_SSO=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_BLOCK_AUTO_CREATED_USERS=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTO_LINK_LDAP_USER=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTO_LINK_SAML_USER=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_EXTERNAL_PROVIDERS=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CAS3_LABEL=cas3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CAS3_SERVER=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CAS3_DISABLE_SSL_VERIFICATION=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CAS3_LOGIN_URL=/cas/login</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CAS3_VALIDATE_URL=/cas/p3/serviceValidate</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CAS3_LOGOUT_URL=/cas/logout</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GOOGLE_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GOOGLE_APP_SECRET=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GOOGLE_RESTRICT_DOMAIN=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_FACEBOOK_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_FACEBOOK_APP_SECRET=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_TWITTER_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_TWITTER_APP_SECRET=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GITHUB_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GITHUB_APP_SECRET=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GITHUB_URL=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GITHUB_VERIFY_SSL=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GITLAB_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GITLAB_APP_SECRET=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_BITBUCKET_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_BITBUCKET_APP_SECRET=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ASSERTION_CONSUMER_SERVICE_URL=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_IDP_CERT_FINGERPRINT=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_IDP_SSO_TARGET_URL=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ISSUER=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_LABEL=&quot;Our</span> <span class="string">SAML</span> <span class="string">Provider&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_NAME_IDENTIFIER_FORMAT=urn:oasis:names:tc:SAML:2.0:nameid-format:transient</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_GROUPS_ATTRIBUTE=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_EXTERNAL_GROUPS=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ATTRIBUTE_STATEMENTS_EMAIL=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ATTRIBUTE_STATEMENTS_NAME=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ATTRIBUTE_STATEMENTS_USERNAME=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ATTRIBUTE_STATEMENTS_FIRST_NAME=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ATTRIBUTE_STATEMENTS_LAST_NAME=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CROWD_SERVER_URL=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CROWD_APP_NAME=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CROWD_APP_PASSWORD=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTH0_CLIENT_ID=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTH0_CLIENT_SECRET=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTH0_DOMAIN=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTH0_SCOPE=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AZURE_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AZURE_API_SECRET=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AZURE_TENANT_ID=</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">redis-data:</span></span><br><span class="line">  <span class="attr">postgresql-data:</span></span><br><span class="line">  <span class="attr">gitlab-data:</span></span><br></pre></td></tr></table></figure>

<p>修正 .env 中的 SMTP_USE, SMTP_PASS, GITLAB_EMAIL_FROM<br>.env</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHARACTERS_LONG_64_SECRETS_KEY_BASE=PlYHu1efqnSiXf8YKAvCQyexqvyqHVpCvrbQFRFekk8OEWocq5joTjbrbpo25XB2</span><br><span class="line">DB_NAME=gitlabhq_production</span><br><span class="line">DB_PORT=5432</span><br><span class="line">DB_USER=gitlab</span><br><span class="line">DB_PASS=password</span><br><span class="line">DB_EXTENSION=pg_trgm</span><br><span class="line">REDIS_PORT=6379</span><br><span class="line">GITLAB_PORT=10080</span><br><span class="line">GITLAB_SSH_PORT=10022</span><br><span class="line">TZ=Asia/Shanghai</span><br><span class="line">GITLAB_TIMEZONE=Beijing</span><br><span class="line">GITLAB_EMAIL=youremailpassword</span><br><span class="line">GITLAB_EMAIL_REPLY_TO=youremailpassword</span><br><span class="line">GITLAB_INCOMING_EMAIL_ADDRESS=youremailpassword</span><br><span class="line">GITLAB_EMAIL_FROM=youremailpassword</span><br><span class="line">SMTP_ENABLED=true</span><br><span class="line">SMTP_DOMAIN=sina.com</span><br><span class="line">SMTP_HOST=smtp.sina.com</span><br><span class="line">SMTP_PORT=465</span><br><span class="line">SMTP_USER=youremail@sina.com</span><br><span class="line">SMTP_PASS=youremailpassword</span><br><span class="line">SMTP_STARTTLS=true</span><br><span class="line">SMTP_AUTHENTICATION=login</span><br><span class="line">SMTP_ADDRESS=smtp.sina.com</span><br><span class="line">SMTP_ENABLE_STARTTLS_AUTO=true</span><br><span class="line">SMTP_TLS=true</span><br></pre></td></tr></table></figure>

<p><code>ctrl+c</code> 停止 gitlab 容器, 重新运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose -f gitlab-docker.yml up</span><br></pre></td></tr></table></figure>

<p>新开个终端, 进入 gitlab 容器, 发送测试邮件，以验证邮件配置正确<br>参考: <a href="https://docs.gitlab.com/ee/administration/troubleshooting/debug.html#mail-not-working">https://docs.gitlab.com/ee/administration/troubleshooting/debug.html#mail-not-working</a><br>参考: <a href="https://docs.gitlab.com/ee/administration/troubleshooting/gitlab_rails_cheat_sheet.html#use-the-rails-runner">https://docs.gitlab.com/ee/administration/troubleshooting/gitlab_rails_cheat_sheet.html#use-the-rails-runner</a><br>参考: <a href="https://docs.docker.com/engine/reference/commandline/ps/">https://docs.docker.com/engine/reference/commandline/ps/</a><br>参考: <a href="https://docs.docker.com/engine/reference/commandline/exec/">https://docs.docker.com/engine/reference/commandline/exec/</a><br>参考: <a href="https://github.com/sameersbn/docker-gitlab/issues/929">https://github.com/sameersbn/docker-gitlab/issues/929</a><br>注意修正邮箱地址<br>powershell</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$id</span>=docker <span class="built_in">ps</span> <span class="literal">-qf</span> <span class="string">&#x27;name=gitlab&#x27;</span>;sudo docker exec <span class="literal">-it</span> <span class="variable">$id</span> bash <span class="literal">-c</span> <span class="string">&quot;sudo -u git -H bundle exec rails console production&quot;</span></span><br><span class="line">Notify.test_email(<span class="string">&#x27;yourotheremail@email.com&#x27;</span>, <span class="string">&#x27;Hello World&#x27;</span>, <span class="string">&#x27;This is a test message&#x27;</span>).deliver_now</span><br></pre></td></tr></table></figure>

<p>bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it $(docker ps -qf <span class="string">&#x27;name=gitlab&#x27;</span>) bash -c <span class="string">&quot;sudo -u git -H bundle exec rails console production&quot;</span></span><br><span class="line">Notify.test_email(<span class="string">&#x27;yourotheremail@email.com&#x27;</span>, <span class="string">&#x27;Hello World&#x27;</span>, <span class="string">&#x27;This is a test message&#x27;</span>).deliver_now</span><br></pre></td></tr></table></figure>

<h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p>访问 <a href="http://127.0.0.1:10080/admin">http://127.0.0.1:10080/admin</a><br>然后参考 <a href="http://localhost:10080/users/password/edit?reset_password_token=rpXz8_psLCC4zhcEgnZo">http://localhost:10080/users/password/edit?reset_password_token=rpXz8_psLCC4zhcEgnZo</a> 添加用户即可<br>添加用户后, 该用户邮箱会收到设置密码的链接</p>
<p>也可以直接设置 GITLAB_SIGNUP_ENABLED=true 来开放用户注册</p>
<h2 id="配置-SSH-config"><a href="#配置-SSH-config" class="headerlink" title="配置 SSH config"></a>配置 SSH config</h2><p>参考: <a href="https://github.com/FloatingShuYin/development-environment-manual#%E9%85%8D%E7%BD%AE-git">https://github.com/FloatingShuYin/development-environment-manual#%E9%85%8D%E7%BD%AE-git</a><br>参考: <a href="https://www.ssh.com/ssh/config">https://www.ssh.com/ssh/config</a><br>~/.ssh/config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># gitlab localhost</span><br><span class="line">Host 127.0.0.1</span><br><span class="line">    HostName 127.0.0.1</span><br><span class="line">    Port 10022</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_gitlab_private</span><br><span class="line"># gitlab</span><br><span class="line">Host gitlab.com</span><br><span class="line">    HostName gitlab.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_gitlab</span><br><span class="line"># gitlab private</span><br><span class="line">Host internal.maodouling.com</span><br><span class="line">    HostName internal.maodouling.com</span><br><span class="line">    Port 2224</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_gitlab_private</span><br><span class="line"># github</span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure>
<p>值得一提的是这里 .env 中 <code>GITLAB_SSH_PORT=10022</code> 将 ssh 默认端口 22 映射到了主机端口 10022</p>
<p>将 ssh pubilc key 添加到 gitlab 中后，即可执行测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@127.0.0.1</span><br></pre></td></tr></table></figure>

<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li><a href="https://docs.docker.com/compose/compose-file/#secrets">Docker secrets and configs</a></li>
<li><a href="https://stackoverflow.com/questions/35218194/what-is-z-flag-in-docker-containers-volumes-from-option">what is ‘z’ flag in docker container’s volumes-from option?</a></li>
</ul>
]]></content>
      <tags>
        <tag>gitlab</tag>
        <tag>private servers</tag>
      </tags>
  </entry>
  <entry>
    <title>prettier stylelint husky lint-staged 与 create-react-app typescript 样板集成</title>
    <url>/2020/01/19/prettier-stylelint-husky-lint-staged-%E4%B8%8E-create-react-app-typescript-%E6%A0%B7%E6%9D%BF%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://prettier.io/docs/en/comparison.html">Prettier docs: Prettier vs. Linters</a></li>
<li><a href="https://prettier.io/docs/en/why-prettier.html">Prettier docs: Why Prettier?</a></li>
<li><a href="http://slides.com/ai/stylelint#/">Stylelint: Why and How to Lint CSS</a></li>
<li><a href="https://prettier.io/docs/en/integrating-with-linters.html">Prettier docs: integrating-with-linters</a></li>
<li><a href="https://stylelint.io/#extend-a-shared-configuration">stylelint docs: extend-a-shared-configuration</a></li>
<li><a href="https://floatsyi.com/2019/09/26/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/">代码规范与项目结构</a></li>
<li><a href="https://create-react-app.dev/docs/getting-started#creating-a-typescript-app">create-react-app docs: creating-a-typescript-app</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/facebook/create-react-app">create-react-app</a></li>
<li><a href="https://github.com/eslint/eslint">eslint</a></li>
<li><a href="https://github.com/prettier/prettier">prettier</a></li>
<li><a href="https://github.com/okonet/lint-staged">lint-staged</a></li>
<li><a href="https://github.com/typicode/husky">husky</a></li>
<li><a href="https://github.com/stylelint/stylelint">stylelint</a></li>
<li><a href="https://github.com/prettier/stylelint-config-prettier">stylelint-config-prettier</a></li>
<li><a href="https://github.com/stylelint/stylelint-config-recommended">stylelint-config-recommended</a></li>
<li><a href="https://github.com/hugomrdias/prettier-stylelint">stylelint-prettier</a></li>
<li><a href="https://github.com/prettier/eslint-config-prettier">eslint-config-prettier</a></li>
<li><a href="https://github.com/prettier/eslint-plugin-prettier">eslint-plugin-prettier</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">vscode-eslint</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint">vscode-stylelint</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">vscode-prettier</a></li>
</ul>
<span id="more"></span>

<h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><ul>
<li><p>为什么要在已有 <a href="https://github.com/eslint/eslint">eslint</a> 的 <a href="https://github.com/facebook/create-react-app">create-react-app</a> 中加入 <a href="https://github.com/prettier/prettier">prettier</a> ?<br>请参考: <a href="https://prettier.io/docs/en/comparison.html">Prettier docs: Prettier vs. Linters</a><br>请参考: <a href="https://prettier.io/docs/en/why-prettier.html">Prettier docs: Why Prettier?</a></p>
</li>
<li><p>为什么要使用 <a href="https://github.com/stylelint/stylelint">stylelint</a> ?<br>请参考: <a href="http://slides.com/ai/stylelint#/">Stylelint: Why and How to Lint CSS</a></p>
</li>
</ul>
<h2 id="集成步骤"><a href="#集成步骤" class="headerlink" title="集成步骤"></a>集成步骤</h2><p>请参考: <a href="https://prettier.io/docs/en/integrating-with-linters.html">Prettier docs: integrating-with-linters</a><br>请参考: <a href="https://stylelint.io/#extend-a-shared-configuration">stylelint docs: extend-a-shared-configuration</a><br>请参考: <a href="https://create-react-app.dev/docs/getting-started#creating-a-typescript-app">create-react-app docs: creating-a-typescript-app</a><br>请参考: <a href="https://floatsyi.com/2019/09/26/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/">代码规范与项目结构</a></p>
<p>使用 <a href="https://github.com/facebook/create-react-app">create-react-app</a> 创建样板文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn create react<span class="literal">-app</span> myapp -<span class="literal">-typescript</span></span><br></pre></td></tr></table></figure>

<p>添加开发时依赖</p>
<ul>
<li><a href="https://github.com/prettier/prettier">prettier</a> <a href="https://github.com/okonet/lint-staged">lint-staged</a> <a href="https://github.com/typicode/husky">husky</a></li>
<li><a href="https://github.com/stylelint/stylelint">stylelint</a> <a href="https://github.com/prettier/stylelint-config-prettier">stylelint-config-prettier</a> <a href="https://github.com/stylelint/stylelint-config-recommended">stylelint-config-recommended</a> <a href="https://github.com/hugomrdias/prettier-stylelint">stylelint-prettier</a></li>
<li><a href="https://github.com/prettier/eslint-config-prettier">eslint-config-prettier</a> <a href="https://github.com/prettier/eslint-plugin-prettier">eslint-plugin-prettier</a></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn add prettier lint<span class="literal">-staged</span> husky stylelint stylelint<span class="literal">-prettier</span> stylelint<span class="literal">-config</span><span class="literal">-prettier</span> stylelint<span class="literal">-config</span><span class="literal">-recommended</span> eslint<span class="literal">-config</span><span class="literal">-prettier</span> eslint<span class="literal">-plugin</span><span class="literal">-prettier</span> <span class="literal">-D</span></span><br></pre></td></tr></table></figure>

<p>添加配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch .eslintrc .eslintignore .gitattributes .prettierrc .stylelintrc</span><br></pre></td></tr></table></figure>

<p>.eslintrc</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;extends&quot;</span>: [<span class="string">&quot;react-app&quot;</span>, <span class="string">&quot;plugin:prettier/recommended&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span>: [<span class="string">&quot;prettier&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;rules&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;prettier/prettier&quot;</span>: <span class="string">&quot;error&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>.eslintignore</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># build</span><br><span class="line">build/</span><br></pre></td></tr></table></figure>

<p>.gitattributes</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* text=auto eol=lf</span><br></pre></td></tr></table></figure>

<p>.prettierrc</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;semi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;endOfLine&quot;</span>: <span class="string">&quot;lf&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>.stylelintrc</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;extends&quot;</span>: [<span class="string">&quot;stylelint-config-recommended&quot;</span>, <span class="string">&quot;stylelint-prettier/recommended&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span>: [<span class="string">&quot;stylelint-prettier&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;rules&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;prettier/prettier&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>package.json 删除 eslintConfig 字段并添加以下字段</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;eslint \&quot;src/**/*.&#123;js,jsx,ts,tsx&#125;\&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lint:fix&quot;</span>: <span class="string">&quot;yarn lint --fix&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;stylelint&quot;</span>: <span class="string">&quot;stylelint \&quot;src/**/*.&#123;css,scss&#125;\&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;stylelint:fix&quot;</span>: <span class="string">&quot;yarn stylelint --fix&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;src/**/*.&#123;js,jsx,ts,tsx,json,css,scss,md&#125;&quot;</span>: [<span class="string">&quot;prettier --write&quot;</span>, <span class="string">&quot;git add&quot;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;husky&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;hooks&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;pre-commit&quot;</span>: <span class="string">&quot;lint-staged&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>检查脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn lint</span><br></pre></td></tr></table></figure>

<p>检查并修复脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn lint:fix</span><br></pre></td></tr></table></figure>

<p>检查样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn stylelint</span><br></pre></td></tr></table></figure>

<p>检查并修复样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn stylelint:fix</span><br></pre></td></tr></table></figure>

<h2 id="eslint-与-stylelint-的-vscode-扩展"><a href="#eslint-与-stylelint-的-vscode-扩展" class="headerlink" title="eslint 与 stylelint 的 vscode 扩展"></a>eslint 与 stylelint 的 vscode 扩展</h2><ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">vscode-eslint</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint">vscode-stylelint</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">vscode-prettier</a></li>
</ul>
<p>vscode setting.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 插件名： ESLint插件的配置</span></span><br><span class="line"><span class="comment">   * 描述：根据定义的规则对相应的语言的语法风格进行严格的约束，以统一编码风格降低阅读沟通成本</span></span><br><span class="line"><span class="comment">   * 详情：https: //marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">&quot;eslint.enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 禁用 vscode 默认的 js 格式化</span></span><br><span class="line">  <span class="attr">&quot;javascript.validate.enable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;editor.formatOnPaste&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 保存时自动执行 eslint fix</span></span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;source.fixAll.eslint&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;source.fixAll.stylelint&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 插件名: stylelint</span></span><br><span class="line"><span class="comment">   * 描述： css 语法效验</span></span><br><span class="line"><span class="comment">   * 详情： https: //marketplace.visualstudio.com/items?itemName=shinnn.stylelint</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">&quot;stylelint.enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;css.validate&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;less.validate&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;scss.validate&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;[json]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[css]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 插件名：prettier</span></span><br><span class="line"><span class="comment">   * 描述：按照设定的规则格式化对应的文档</span></span><br><span class="line"><span class="comment">   * 详情：https: //marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode</span></span><br><span class="line"><span class="comment">   * 注意：此插件被 Vetur 插件依赖</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">&quot;prettier.trailingComma&quot;</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;prettier.tabWidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// 使用单引号？</span></span><br><span class="line">  <span class="attr">&quot;prettier.singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 要分号？</span></span><br><span class="line">  <span class="attr">&quot;prettier.semi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;[javascript]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[typescript]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[typescriptreact]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[jsx]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[tsx]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[jsonc]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[md]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[javascriptreact]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>-</p>
]]></content>
      <tags>
        <tag>typescript</tag>
        <tag>prettier</tag>
        <tag>stylelint</tag>
        <tag>husky</tag>
        <tag>lint-staged</tag>
        <tag>create-react-app</tag>
        <tag>eslint</tag>
      </tags>
  </entry>
  <entry>
    <title>git 复杂流程 2020</title>
    <url>/2020/01/20/git-%E5%A4%8D%E6%9D%82%E6%B5%81%E7%A8%8B-2020/</url>
    <content><![CDATA[<p><img src="https://git-scm.com/book/en/v2/images/areas.png" alt="git"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-Git-%E5%9F%BA%E7%A1%80">pro git</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/git/git">git</a></li>
</ul>
<span id="more"></span>

<h2 id="复杂流程"><a href="#复杂流程" class="headerlink" title="复杂流程"></a>复杂流程</h2><h3 id="常规开发步骤"><a href="#常规开发步骤" class="headerlink" title="常规开发步骤"></a>常规开发步骤</h3><ol>
<li><p>clone 远程分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone uri</span><br></pre></td></tr></table></figure></li>
<li><p>阅读 README.md 文档, 确保项目可运行并通过测试</p>
</li>
<li><p>新建并切换到本地开发分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b DEV_doublethink</span><br></pre></td></tr></table></figure></li>
<li><p>添加新功能后，确保项目可运行并通过测试</p>
</li>
<li><p>(add 工作目录(working directory)中的已修改文件(modified file)到暂存区(staging area)): 暂存文件差异(stage fixes)<br>commit 暂存区(staging area)到本地 git 仓库(.git repository)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;tpye(scope): subject&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>创建远程(仓库)分支并提交本地(仓库)分支到远程(仓库)分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin DEV_doublethink:DEV_doublethink</span><br></pre></td></tr></table></figure></li>
<li><p>在 git web 页面中提交 mr,等待 mr</p>
</li>
<li><p>mr 完成后切换到本地 master 分支并拉取远程 master 分支最新代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git pull --rebase</span><br></pre></td></tr></table></figure></li>
<li><p>切换到本地开发分支 DEV_doublethink， rebase 本地 master 分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout DEV_doublethink</span><br><span class="line">git rebase master</span><br></pre></td></tr></table></figure></li>
<li><p>删除远程 DEV_doublethink 分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin -d DEV_doublethink</span><br></pre></td></tr></table></figure></li>
<li><p>回到第 4 步.</p>
</li>
</ol>
<h3 id="追加修改到上一次的-commit"><a href="#追加修改到上一次的-commit" class="headerlink" title="追加修改到上一次的 commit"></a>追加修改到上一次的 commit</h3><ol>
<li><p>先修改需要修改的文件</p>
</li>
<li><p><code>git add .</code>  暂存修改到暂存区</p>
</li>
<li><p><code>git commit --amend --no-edit</code> 将暂存区文件追加到上一次 commit</p>
</li>
<li><p>继续 <code>git push</code> 推送即可</p>
</li>
</ol>
<p>如果只是想修改 commit 注释， <code>git commit --amend</code> 可以进入 vim 编辑模式编辑上次 commit 注释.</p>
<h3 id="撤销-commit"><a href="#撤销-commit" class="headerlink" title="撤销 commit"></a>撤销 commit</h3><p>不删除工作空间改动代码，撤销 commit，并且撤销 git add .</p>
<ol>
<li><code>git reset --mixed HEAD^</code><br>这个为默认参数, git reset –mixed HEAD^ 和 git reset HEAD^ 效果是一样的。</li>
</ol>
<p>HEAD^ 的意思是上一个版本，也可以写成 HEAD<del>1<br>如果你进行了 2 次 commit，想都撤回，可以使用 HEAD</del>2</p>
<p>不删除工作空间改动代码，也不撤销 git add .<br>2. <code>git reset --soft HEAD^</code></p>
<p><strong>删除</strong>工作空间改动代码，撤销 commit，撤销 git add .<br>3. <code>git reset --hard HEAD^</code></p>
<h3 id="git-补丁的生成与应用"><a href="#git-补丁的生成与应用" class="headerlink" title="git 补丁的生成与应用"></a>git 补丁的生成与应用</h3><p>参考： <a href="https://www.jianshu.com/p/e5d801b936b6">https://www.jianshu.com/p/e5d801b936b6</a></p>
<h3 id="如何在-Git-里撤销-几乎-任何操作"><a href="#如何在-Git-里撤销-几乎-任何操作" class="headerlink" title="如何在 Git 里撤销(几乎)任何操作"></a>如何在 Git 里撤销(几乎)任何操作</h3><p>参考： <a href="https://www.cnblogs.com/allencelee/p/5603914.html">https://www.cnblogs.com/allencelee/p/5603914.html</a></p>
]]></content>
      <tags>
        <tag>速查</tag>
        <tag>git</tag>
        <tag>2020</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 react-app-rewired 扩展 cra 样板的配置文件</title>
    <url>/2020/01/21/%E4%BD%BF%E7%94%A8-react-app-rewired-%E6%89%A9%E5%B1%95-cra-%E6%A0%B7%E6%9D%BF%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://floatsyi.com/2020/01/19/prettier-stylelint-husky-lint-staged-%E4%B8%8E-create-react-app-typescript-%E6%A0%B7%E6%9D%BF%E9%9B%86%E6%88%90/">prettier stylelint husky lint-staged 与 create-react-app typescript 样板集成</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/timarney/react-app-rewired">react-app-rewired</a></li>
<li><a href="https://github.com/tailwindcss/tailwindcss">tailwindcss</a></li>
</ul>
<span id="more"></span>

<h2 id="安装-react-app-rewired"><a href="#安装-react-app-rewired" class="headerlink" title="安装 react-app-rewired"></a>安装 <a href="https://github.com/timarney/react-app-rewired">react-app-rewired</a></h2><p>添加开发时依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add react-app-rewired -D</span><br></pre></td></tr></table></figure>

<p>新建 config-overrides.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch config-overrides.js</span><br></pre></td></tr></table></figure>

<p>config-overrides.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">override</span>(<span class="params">config, env</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//do stuff with the webpack config...</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">-   <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;react-scripts start&quot;</span>,</span><br><span class="line">+   <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;react-app-rewired start&quot;</span>,</span><br><span class="line">-   <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;react-scripts build&quot;</span>,</span><br><span class="line">+   <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;react-app-rewired build&quot;</span>,</span><br><span class="line">-   <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;react-scripts test --env=jsdom&quot;</span>,</span><br><span class="line">+   <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;react-app-rewired test --env=jsdom&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eject&quot;</span>: <span class="string">&quot;react-scripts eject&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置-stylelint-和-tailwindcss"><a href="#配置-stylelint-和-tailwindcss" class="headerlink" title="配置 stylelint 和 tailwindcss"></a>配置 <a href="https://github.com/stylelint/stylelint">stylelint</a> 和 <a href="https://github.com/tailwindcss/tailwindcss">tailwindcss</a></h2><p>添加开发时依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add stylelint-webpack-plugin -D</span><br></pre></td></tr></table></figure>
<p>运行时依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add tailwindcss</span><br></pre></td></tr></table></figure>

<p>config-overrides.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> StylelintPlugin = <span class="built_in">require</span>(<span class="string">&#x27;stylelint-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> postcss = <span class="built_in">require</span>(<span class="string">&#x27;react-app-rewire-postcss&#x27;</span>)</span><br><span class="line"><span class="comment">// https://tailwindcss.com/docs/controlling-file-size/</span></span><br><span class="line"><span class="keyword">const</span> purgecss = <span class="built_in">require</span>(<span class="string">&#x27;@fullhuman/postcss-purgecss&#x27;</span>)(&#123;</span><br><span class="line">  <span class="comment">// Specify the paths to all of the template files in your project</span></span><br><span class="line">  <span class="attr">content</span>: [</span><br><span class="line">    <span class="string">&#x27;./src/**/*.tsx&#x27;</span>,</span><br><span class="line">    <span class="comment">// etc.</span></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Include any special characters you&#x27;re using in this regular expression</span></span><br><span class="line">  <span class="attr">defaultExtractor</span>: <span class="function"><span class="params">content</span> =&gt;</span> content.match(<span class="regexp">/[\w-/:]+(?&lt;!:)/g</span>) || [],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// https://github.com/timarney/react-app-rewired</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">webpack</span>: <span class="function"><span class="keyword">function</span>(<span class="params">config, env</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> isDev = env === <span class="string">&#x27;development&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> isPro = env === <span class="string">&#x27;production&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// https://github.com/csstools/react-app-rewire-postcss</span></span><br><span class="line">    postcss(config, &#123;</span><br><span class="line">      <span class="attr">ident</span>: <span class="string">&#x27;postcss&#x27;</span>,</span><br><span class="line">      <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">&#x27;tailwindcss&#x27;</span>),</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>),</span><br><span class="line">        ...(isPro ? [purgecss] : []),</span><br><span class="line">      ],</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isDev) &#123;</span><br><span class="line">      <span class="comment">// https://vanja.gavric.org/blog/integrate-stylelint-into-create-react-app-without-ejecting/</span></span><br><span class="line">      <span class="comment">// https://github.com/webpack-contrib/stylelint-webpack-plugin</span></span><br><span class="line">      config.plugins.push(</span><br><span class="line">        <span class="keyword">new</span> StylelintPlugin(&#123;</span><br><span class="line">          <span class="comment">// options here</span></span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>tailwind.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://tailwindcss.com/docs/configuration</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">important</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">variants</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>react-app-rewired</tag>
        <tag>cra</tag>
      </tags>
  </entry>
  <entry>
    <title>A JavaScript library for building user interfaces: React</title>
    <url>/2020/02/02/A-JavaScript-library-for-building-user-interfaces-React/</url>
    <content><![CDATA[<blockquote>
<p>我知道我自己的知识缺陷，但是当我需要它们的时候我可以比较快的掌握它们。<br>这些缺陷不会让我的知识和经验贬值，我可以做好很多事情，比如说：当我需要某些技术的时候学会它们。<br>— Dan Abramov</p>
</blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/53587347">Dan Abramov(React 核心开发，Redux 作者) 谈他不懂的技术</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://floatsyi.com/2020/01/19/prettier-stylelint-husky-lint-staged-%E4%B8%8E-create-react-app-typescript-%E6%A0%B7%E6%9D%BF%E9%9B%86%E6%88%90/">prettier stylelint husky lint-staged 与 create-react-app typescript 样板集成</a></li>
<li><a href="https://floatsyi.com/2020/01/21/%E4%BD%BF%E7%94%A8-react-app-rewired-%E6%89%A9%E5%B1%95-cra-%E6%A0%B7%E6%9D%BF%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/">2020-01-21-使用-react-app-rewired-扩展-cra-样板的配置文件</a></li>
<li><a href="https://zh-hans.reactjs.org/docs/getting-started.html">react docs</a></li>
<li><a href="https://zh-hans.reactjs.org/docs/hooks-intro.html">react docs: hook</a></li>
<li><a href="https://zh-hans.reactjs.org/docs/testing.html">react docs: test</a></li>
<li><a href="https://reacttraining.com/react-router/web/example/basic">react router docs</a></li>
<li><a href="https://testing-library.com/docs/react-testing-library/intro">react-testing-library docs</a></li>
<li><a href="https://jestjs.io/docs/en/getting-started">jest docs</a></li>
<li><a href="https://floatsyi.com/2020/02/28/Vegetarian-friendly-state-for-React-easy-peasy/">Vegetarian friendly state for React: easy-peasy</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/facebook/react">react</a></li>
<li><a href="https://github.com/ReactTraining/react-router">react-router</a></li>
<li><a href="https://github.com/testing-library/react-testing-library">react-testing-library</a></li>
<li><a href="https://github.com/facebook/jest">jest</a></li>
</ul>
<span id="more"></span>

<h2 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create-react-app"></a>create-react-app</h2><p>这个东西就是 react 官方的脚手架了，生成项目模板用的<br>参考:</p>
<ul>
<li><a href="https://floatsyi.com/2020/01/19/prettier-stylelint-husky-lint-staged-%E4%B8%8E-create-react-app-typescript-%E6%A0%B7%E6%9D%BF%E9%9B%86%E6%88%90/">prettier stylelint husky lint-staged 与 create-react-app typescript 样板集成</a></li>
<li><a href="https://floatsyi.com/2020/01/21/%E4%BD%BF%E7%94%A8-react-app-rewired-%E6%89%A9%E5%B1%95-cra-%E6%A0%B7%E6%9D%BF%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/">2020-01-21-使用-react-app-rewired-扩展-cra-样板的配置文件</a></li>
</ul>
<h2 id="react"><a href="#react" class="headerlink" title="react"></a><a href="https://github.com/facebook/react">react</a></h2><p>参考: <a href="https://zh-hans.reactjs.org/docs/getting-started.html">react docs</a></p>
<h2 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h2><p>参考: <a href="https://zh-hans.reactjs.org/docs/hooks-intro.html">react docs: hook</a></p>
<h2 id="react-router"><a href="#react-router" class="headerlink" title="react-router"></a><a href="https://github.com/ReactTraining/react-router">react-router</a></h2><p>参考: <a href="https://reacttraining.com/react-router/web/example/basic">react router docs</a></p>
<h2 id="react-testing-library-and-jest"><a href="#react-testing-library-and-jest" class="headerlink" title="react-testing-library and jest"></a><a href="https://github.com/testing-library/react-testing-library">react-testing-library</a> and <a href="https://github.com/facebook/jest">jest</a></h2><p>参考:</p>
<ul>
<li><a href="https://zh-hans.reactjs.org/docs/testing.html">react docs: test</a></li>
<li><a href="https://testing-library.com/docs/react-testing-library/intro">react-testing-library docs</a></li>
<li><a href="https://jestjs.io/docs/en/getting-started">jest docs</a></li>
</ul>
<h2 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h2><p>参考:</p>
<ul>
<li><a href="https://floatsyi.com/2020/02/28/Vegetarian-friendly-state-for-React-easy-peasy/">Vegetarian friendly state for React: easy-peasy</a></li>
</ul>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li><a href="https://overreacted.io/">Personal blog by Dan Abramov. I explain with words and code.</a></li>
<li><a href="https://overreacted.io/zh-hans/react-as-a-ui-runtime/">将 React 作为 UI 运行时</a></li>
<li><a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/#tldr">useEffect 完整指南</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/91501173">技术周刊 2019-11-12：JavaScript 年度安全报告，React 介绍并发模式</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/83552786">React Hooks(一): From Redux to Hooks</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/98554943">React Hooks(二): useCallback 之痛</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/99977314">React Hooks(三): 并发之道，初入协程</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/68434464">Hooks 时代的 React 状态管理方案</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/24926575">正确掌握React 生命周期(Lifecycle)</a></li>
<li><a href="https://juejin.im/post/5d00a67cf265da1b8a4f156f">9102，作为前端必须知道 hook 怎么玩了</a></li>
<li><a href="https://github.com/rehooks/awesome-react-hooks">rehooks/awesome-react-hooks</a></li>
<li><a href="https://github.com/streamich/react-use">react-use/react-use</a></li>
<li><a href="https://github.com/gragland/usehooks">gragland/usehooks</a></li>
<li><a href="https://juejin.im/post/5d594ea5518825041301bbcb#heading-1">2019年了，整理了N个实用案例帮你快速迁移到React Hooks</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/81752821">精读《React Hooks 最佳实践》</a></li>
<li><a href="https://juejin.im/post/5c98fb35518825157172acc6">(译) 在 React Hooks 中如何请求数据？</a></li>
<li><a href="https://juejin.im/post/5dc953235188250c6c41683e">React Suspense + 自定义Hook开启数据请求新方式</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/91228591">精读《Hooks 取数 - swr 源码》</a></li>
<li><a href="https://juejin.im/post/5de72afbe51d45584f536f57">SWR 源码浅析</a></li>
</ul>
]]></content>
      <tags>
        <tag>react</tag>
        <tag>react-hook</tag>
        <tag>react-router</tag>
      </tags>
  </entry>
  <entry>
    <title>Web API: Canvas</title>
    <url>/2020/02/12/Web-API-Canvas/</url>
    <content><![CDATA[<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API">MDN Docs: Canvas</a> 底部还有封装 canvas 的库推荐</li>
<li><a href="http://fabricjs.com/fabric-intro-part-1#why_fabric">fabricjs</a></li>
</ul>
<p>看文档就会的东西 没什么好说的</p>
]]></content>
      <tags>
        <tag>Web API</tag>
        <tag>Canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>Vegetarian friendly state for React: easy-peasy</title>
    <url>/2020/02/28/Vegetarian-friendly-state-for-React-easy-peasy/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/68434464">Hooks 时代的 React 状态管理方案</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/ctrlplusb/easy-peasy">easy-peasy</a></li>
<li><a href="https://github.com/apollographql/apollo-client">apollo-client</a></li>
</ul>
<span id="more"></span>

<h2 id="关于前端项目全局状态管理库的选型-react"><a href="#关于前端项目全局状态管理库的选型-react" class="headerlink" title="关于前端项目全局状态管理库的选型(react)"></a>关于前端项目全局状态管理库的选型(react)</h2><p>参考 <a href="https://zhuanlan.zhihu.com/p/68434464">Hooks 时代的 React 状态管理方案</a></p>
<h3 id="纯-Hooks-的实现"><a href="#纯-Hooks-的实现" class="headerlink" title="纯 Hooks 的实现"></a>纯 Hooks 的实现</h3><p><a href="https://github.com/mcclayton/react-state-patterns">react-state-patterns</a><br><a href="https://github.com/avkonst/hookstate">hookstate</a><br><a href="https://github.com/jamiebuilds/unstated-next">unstated-next</a><br><a href="https://github.com/dai-shi/react-hooks-global-state">react-hooks-global-state</a><br><a href="https://github.com/diegohaz/constate">constate</a></p>
<h3 id="比较奇怪的实现"><a href="#比较奇怪的实现" class="headerlink" title="比较奇怪的实现"></a>比较奇怪的实现</h3><p><a href="https://github.com/staltz/use-profunctor-state">use-profunctor-state</a></p>
<h3 id="先定义-model，再以-Hooks-的方式消费的实现"><a href="#先定义-model，再以-Hooks-的方式消费的实现" class="headerlink" title="先定义 model，再以 Hooks 的方式消费的实现"></a>先定义 model，再以 Hooks 的方式消费的实现</h3><ul>
<li><a href="https://github.com/ctrlplusb/easy-peasy">easy-peasy</a></li>
<li><a href="https://github.com/cerebral/overmind">overmind</a></li>
<li><a href="https://github.com/fabiospampinato/overstated">overstated</a></li>
<li><a href="https://github.com/LeetCode-OpenSource/ayanami">ayanami</a></li>
<li><a href="https://github.com/nanxiaobei/flooks">flooks</a></li>
</ul>
<h3 id="老牌的实现"><a href="#老牌的实现" class="headerlink" title="老牌的实现"></a>老牌的实现</h3><ul>
<li><a href="https://github.com/reduxjs/redux">redux</a></li>
<li><a href="https://github.com/mobxjs/mobx">mobx</a></li>
<li><a href="https://github.com/mobxjs/mobx-state-tree">mobx-state-tree</a></li>
</ul>
<h3 id="GraphQL的实现"><a href="#GraphQL的实现" class="headerlink" title="GraphQL的实现"></a>GraphQL的实现</h3><ul>
<li><a href="https://github.com/apollographql/apollo-client">apollo-client</a></li>
</ul>
<h2 id="抉择"><a href="#抉择" class="headerlink" title="抉择"></a>抉择</h2><p>纯 hook 的实现过于简单,基本上是直接基于 react context api,基本没有模块的实现, 仅仅是单一的状态树.<br>而老牌的如 <a href="https://github.com/reduxjs/redux">redux</a> 则过于复杂, Flux 的概念其实非常不错, 而且基于此的生态十分健壮, 但样板代码又实在是太多了, 显得非常啰嗦.</p>
<p>所以只能在 <a href="https://github.com/ctrlplusb/easy-peasy">easy-peasy</a>  <a href="https://github.com/cerebral/overmind">overmind</a> <a href="https://github.com/fabiospampinato/overstated">overstated</a>  <a href="https://github.com/LeetCode-OpenSource/ayanami">ayanami</a>  <a href="https://github.com/nanxiaobei/flooks">flooks</a> 中选一个了.<br><a href="https://github.com/LeetCode-OpenSource/ayanami">ayanami</a> 和 <a href="https://github.com/cerebral/overmind">overmind</a> 其实都挺不错, 但是都有一个缺点, 引入了其他概念.<br>如 <a href="https://github.com/LeetCode-OpenSource/ayanami">ayanami</a> 就是基于 rxjs 的实现. 我想喜欢 rxjs 的团队应该会喜欢这个方案.</p>
<p><a href="https://github.com/nanxiaobei/flooks">flooks</a> 去中心化的确不错, 但基于字符串的 api 将会与 typescript 的类型支持进行艰难的斗争<br>我看了源码, 作者完全放弃了这方面的努力. 羸弱的类型支持, 将使 typescript 形同虚设.</p>
<p>而 <a href="https://github.com/fabiospampinato/overstated">overstated</a> 如果没有 <a href="https://github.com/ctrlplusb/easy-peasy">easy-peasy</a> 我就选他了</p>
<p><a href="https://github.com/ctrlplusb/easy-peasy">easy-peasy</a> 基于 <a href="https://github.com/reduxjs/redux">redux</a> 与 immer .<br>前者, 使我们能够直接拥有 <a href="https://github.com/reduxjs/redux">redux</a> 的繁荣生态, 而不必接纳 <a href="https://github.com/reduxjs/redux">redux</a> 啰嗦的样板代码.<br>后者, 使我们以 Mutable 的形式, 完成 Immutable 的操作.<br>更高的抽象, 简单的概念, 均衡.</p>
<p>而如果要用 GraphQL 的话, 集请求与状态管理于一身的 <a href="https://github.com/apollographql/apollo-client">apollo-client</a> 将是不二之选.</p>
]]></content>
      <tags>
        <tag>react</tag>
        <tag>state</tag>
      </tags>
  </entry>
  <entry>
    <title>我终于理解了正则表达式</title>
    <url>/2020/03/01/%E6%88%91%E7%BB%88%E4%BA%8E%E7%90%86%E8%A7%A3%E4%BA%86%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/EZLippi/practical-programming-books/blob/master/src/30-minutes-to-learn-regex.md">30-minutes-to-learn-regex.md</a></li>
<li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md">learn-regex</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://regexper.com/#%2F%28%5E%5Cs*%29%7C%28%5Cs*%24%29%7C%28%5B%5Cr%5Cn%5D%29%2Fg">regexper 正则可视化</a></li>
</ul>
<span id="more"></span>

<h2 id="正则表达式解决的问题"><a href="#正则表达式解决的问题" class="headerlink" title="正则表达式解决的问题"></a>正则表达式解决的问题</h2><p>如果我们要理解一个工具, 必须先理解它在解决一个什么样的问题.</p>
<p>参考 <a href="https://github.com/EZLippi/practical-programming-books/blob/master/src/30-minutes-to-learn-regex.md">30-minutes-to-learn-regex.md</a> 我们知道</p>
<blockquote>
<p>正则表达式是一种查找以及字符串替换操作。正则表达式在文本编辑器中广泛使用，比如正则表达式被用于：</p>
</blockquote>
<ul>
<li>检查文本中是否含有指定的特征词</li>
<li>找出文中匹配特征词的位置</li>
<li>从文本中提取信息，比如：字符串的子串</li>
<li>修改文本</li>
</ul>
<h2 id="试图理解"><a href="#试图理解" class="headerlink" title="试图理解"></a>试图理解</h2><p>我们从最简单的开始: <strong>从文本中提取信息，如字符串的子串</strong></p>
<p>如果我们要从一个字符串中找出某个子串, 最简单的办法是什么?<br>没错就是直接把这个子串写出来, 这个写出来的过程我们可以称为<code>描述子串</code>.</p>
<p>如果我们要在字符串 <code>abcd</code> 中找到它的子串 <code>bc</code>, 我们就先描述一个子串 <code>bc</code>, 然后去让正则表达式解析器去解析并匹配它.<br>这个很容易理解, 但是这样理解还不够!! 我们得理解子串 <code>bc</code> 的真正含义!</p>
<p><code>b</code> 是什么? 每错 <code>b</code> 是一个字符, <code>c</code> 也是一个字符, 它们都是字符,<br>但是如果我们要理解一个工具, 必须先理解它在解决一个什么样的问题.<br><code>b</code> 和 <code>c</code> 这两个字符解决了什么问题? 没错, <strong>它们向正则表达式解析器描述了它们本身!</strong></p>
<p>重要的事情说三次<br>它们向正则表达式解析器描述了它们本身<br>它们向正则表达式解析器描述了它们本身<br>它们向正则表达式解析器描述了它们本身.</p>
<p>很好因为<code>b</code> 和 <code>c</code> 向正则表达式解析器描述了它们本身, 于是正则表达式解析器就找到了它们描述的子串<code>bc</code>,<br>一切都是那么自然!! 所以我们决定将类似 <code>b</code> <code>c</code> 这样的字符称为 <strong><code>自指描述符</code></strong>, 自己指代自己.</p>
<p>但是, 这不够强大, 比如, 我们要描述任意一个单位字符该怎么描述? 它不是 <code>b</code> 不是 <code>c</code>, 而是任意一个字符, 该怎么描述呢?<br>我们想想办法, 我们可以定义一个特殊的字符 <code>.</code> 没错就是小数点<br>我们告诉正则表达式解析器, 说: 你可听好了, 我给你一个字符<code>.</code>, 它描述的是任意一个字符, 它可以指代任意一个字符.<br>正则表达式解析器说: 好的, 我明白了, 以后字符 <code>.</code> 就是指代任意一个字符! 以后我们就把 <code>.</code> 这个字符叫做 <strong><code>任意描述符</code></strong> 吧.</p>
<p>正则表达式解析器又说: 可是如果你想告诉我<strong>那个字符它只是想指代它本身可怎么办</strong> 字符 <code>.</code> 指代了任意一个字符, 它怎么指代<strong>只</strong>指代它本身呢?<br>我们想想办法, 我们可以定义一个特殊的字符 <code>\</code> 没错就是斜杠!<br>我们告诉正则表达式解析器说: 你可听好了, 我给你一个字符 <code>\</code>, 它描述的是将字符 <code>\</code> 后的任意一个字符转义为它本身,<br>正则表达式解析器说: 好的, 我明白了, 以后字符 <code>\</code> 就是将字符 <code>\</code> 后的任意一个字符转义为它本身! 以后我们就把 <code>\</code> 这个字符叫做 <strong><code>转义符</code></strong> 吧.</p>
<p>现在我们可以用字符 <code>.</code> 指代任意一个字符, 并用子串 <code>\.</code> 指代为字符 <code>.</code> 本身. 完美!</p>
<p>如果我们描述一个字串 <code>..</code> 它描述的是什么?<br>有可能 <code>aa</code> <code>ab</code> <code>zd</code> <code>xy</code> …等等, 任意一个两个字符的子串,<br>没错, 但是如果我们描述一个子串 <code>cd</code>, 它描述的是什么?<br>没错, 就是 <code>cd</code> 本身,<br>我们可以称这个由 <code>..</code> 到 <code>cd</code> 的过程为坍缩.<br>什么坍缩了? <code>cd</code> 是 <code>..</code> 的子集, 所以是<strong>可能匹配的集合坍缩了.</strong></p>
<p>把这里理解了, 再依此把下面两篇文章看懂, 就可以完全理解正则表达式了!</p>
<ul>
<li><a href="https://github.com/EZLippi/practical-programming-books/blob/master/src/30-minutes-to-learn-regex.md">30-minutes-to-learn-regex.md</a></li>
<li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md">learn-regex</a></li>
</ul>
]]></content>
      <tags>
        <tag>正则</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>hyperextensible Vim-based text editor: neovim</title>
    <url>/2020/08/07/hyperextensible-Vim-based-text-editor-neovim/</url>
    <content><![CDATA[<p>首先看完这个</p>
<ul>
<li><a href="https://github.com/wsdjeg/vim-galore-zh_cn">vim-galore-zh_cn</a></li>
</ul>
<p>看不太懂可以看这些作为补充, 辅助理解</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/54078065">2019 了, 别再推 Vundle 了</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/68111471">精通 VIM, 此文就够了</a></li>
<li><a href="https://www.oschina.net/translate/learn-vim-progressively?lang=chs&p=1">Vim学习指南</a></li>
</ul>
<p>然后看完这些</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV164411P7tw">上古神器Vim：从恶言相向到爱不释手 - 终极Vim教程01 - 带你配置属于你自己的最强IDE</a></li>
<li><a href="https://www.bilibili.com/video/BV1e4411V7AA">上古神器Vim：从恶言相向到爱不释手 - 终极Vim教程02 - 带你配置属于你自己的最强IDE</a></li>
<li><a href="https://www.bilibili.com/video/BV1r4411G7de">上古神器Vim：从恶言相向到爱不释手 - 终极Vim教程03 - 带你配置属于你自己的最强IDE</a></li>
<li><a href="https://www.bilibili.com/video/BV1Ka4y1E7AM">【硬货】让你的vim像vscode一样强大 —— coc.nvim终极指南</a></li>
</ul>
<p>然后</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/37352209">VimScript 五分钟入门（翻译）</a></li>
</ul>
<p>最后由于 vim 的 tsx 语法高亮还有一些问题,所以写 tsx 还是用 vscode 要好, 不过仍然可以在 vscode 中使用 neovim, 此时 vscode 作为 neovim 的前端.<br>这里使用 vscode 的社区构建版本 vscodium.</p>
<ul>
<li><a href="https://github.com/neovim/neovim">neovim</a></li>
<li><a href="https://github.com/ChristianChiarulli/nvim">nvcode</a></li>
<li><a href="https://github.com/asvetliakov/vscode-neovim">vscode-neovim</a></li>
<li><a href="https://www.chrisatmachine.com/Neovim/22-vscodium-neovim/">vscodium-neovim</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>文档站点的分析及选型</title>
    <url>/2021/07/05/%E6%96%87%E6%A1%A3%E7%AB%99%E7%82%B9%E7%9A%84%E5%88%86%E6%9E%90%E5%8F%8A%E9%80%89%E5%9E%8B/</url>
    <content><![CDATA[<p>一个组件库一般是有官方的文档站点的， 我们的组件库现在是没有官方文档站点的，因此我们的组件库应该要有官方文档站点。</p>
<p>那么怎么做？ 我们可以参考现成的流行方案。</p>
<p>那么现在有哪些流行方案呢？根据我在互联网的粗略检索，我认为现成的流行方案大致可以分为以下两种：</p>
<ul>
<li><p><a href="https://github.com/reactjs">react</a> 系列的 <a href="https://docusaurus.io/">docusaurus</a></p>
<p>​    <img src="http://r.photo.store.qq.com/psc?/V12iDrZG1mzmnh/45NBuzDIW489QBoVep5mcZ9B5MRbR*al8IGo9Amg1fIWJ708HTHgnJXduPcHeXu9xHbvbFQm9I0.L.kVO6YGU.ssRmRYJAxB6n6y2sNBBes!/r" alt="https://docusaurus.io/"></p>
</li>
<li><p><a href="https://github.com/vuejs/vue">vue</a> 系列的 <a href="https://vuepress.vuejs.org/zh/">vuepress</a></p>
<p>​    <img src="http://r.photo.store.qq.com/psc?/V12iDrZG1mzmnh/45NBuzDIW489QBoVep5mcZ9B5MRbR*al8IGo9Amg1fKKnOuDu*JyPIklh5PEqJacGSeHT5u4KPN8SDA4vsbK0NCgRxsI9B6G5plll3EoNEE!/r" alt="image-20210705140403492"></p>
</li>
</ul>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从这两个项目的官网上可以看到， 一个文档站点由以下几个主要部分组成：</p>
<ul>
<li>顶部导航栏</li>
<li>侧边栏大纲</li>
<li>文章主体</li>
</ul>
<p>而顶部导航栏除去导航功能外，还包括<a href="https://semver.org/lang/zh-CN/">语义化版本</a>、 <a href="https://developer.mozilla.org/zh-CN/docs/orphaned/Web/Localization">本地化和国际化</a>、 项目仓库地址、主题以及站点搜索。</p>
<h2 id="侧边栏生成"><a href="#侧边栏生成" class="headerlink" title="侧边栏生成"></a>侧边栏生成</h2><p>侧边栏大纲部分是根据文章标题等级自动生成的，其生成算法大概同下:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> heading = <span class="string">&#x27;H1&#x27;</span> | <span class="string">&#x27;H2&#x27;</span> | <span class="string">&#x27;H3&#x27;</span> | <span class="string">&#x27;H4&#x27;</span> | <span class="string">&#x27;H5&#x27;</span> | <span class="string">&#x27;H6&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> getHeadingList = [...document.querySelectorAll(<span class="string">&#x27;h1, h2, h3, h4, h5, h6&#x27;</span>)].map(<span class="function">(<span class="params">it</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// do something</span></span><br><span class="line"> <span class="keyword">return</span> it.nodeName</span><br><span class="line">&#125;)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> logCount = (<span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  time = <span class="number">0</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> <span class="function">(<span class="params">message = <span class="string">&#x27;&#x27;</span></span>) =&gt;</span> <span class="built_in">void</span> <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;message&#125;</span><span class="subst">$&#123;++time&#125;</span>`</span>))()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heading2Menu = <span class="function">(<span class="params">headings: heading[]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// O(n)</span></span><br><span class="line">  <span class="keyword">const</span> toTree = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    ref = &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="keyword">type</span>: <span class="string">&#x27;root&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">      result: [],</span></span></span><br><span class="line"><span class="params"><span class="function">      rootLevel: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">      prevLevel: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">      headings: [...headings],</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; <span class="keyword">type</span>, result, headings, rootLevel, prevLevel &#125; = ref</span><br><span class="line"></span><br><span class="line">    logCount(<span class="string">`headings.length: <span class="subst">$&#123;headings.length&#125;</span>, toTree() count:`</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> isRoot = <span class="keyword">type</span> === <span class="string">&#x27;root&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> _result: result = isRoot ? result : []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (headings.length !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> heading = headings[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">const</span> level = <span class="built_in">Number</span>(heading.slice(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!isRoot &amp;&amp; (level &lt;= rootLevel || level &lt;= prevLevel)) <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (isRoot) rootLevel = level</span><br><span class="line"></span><br><span class="line">      headings.shift()</span><br><span class="line"></span><br><span class="line">      _result.push(&#123;</span><br><span class="line">        <span class="attr">name</span>: heading,</span><br><span class="line">        <span class="attr">childs</span>: toTree(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;child&#x27;</span>,</span><br><span class="line">          result,</span><br><span class="line">          rootLevel,</span><br><span class="line">          <span class="attr">prevLevel</span>: level,</span><br><span class="line">          headings,</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> toTree()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后是文章主体。我们知道开发文档一般采用 <a href="https://www.markdown.xyz/getting-started/">markdown</a> 文档格式进行编写，而站点网站的主要功能就是根据 <a href="https://www.markdown.xyz/getting-started/">markdown</a> 文档生成静态 HTML。</p>
<h2 id="markdown-解析器"><a href="#markdown-解析器" class="headerlink" title="markdown 解析器"></a><a href="https://www.markdown.xyz/getting-started/">markdown</a> 解析器</h2><p>根据 <a href="https://www.markdown.xyz/getting-started/">markdown</a> 文档生成静态 HTML，这是  <a href="https://www.markdown.xyz/getting-started/">markdown</a> 解析器所做的工作。</p>
<p>无论是 <a href="https://docusaurus.io/">docusaurus</a> 所采用的 <a href="https://github.com/jonschlinkert/remarkable">remarkable</a> 解析器，还是 <a href="https://vuepress.vuejs.org/zh/">vuepress</a> 所采用的 <a href="https://github.com/markdown-it/markdown-it">markdown-it</a> 解析器，它们都是 <a href="https://github.com/commonmark/commonmark-spec">commonmark-spec</a> 的实现，　因此架构上大同小异。</p>
<h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><p><a href="https://www.markdown.xyz/getting-started/">markdown</a> 解析器一般由 parser 和 render 两大部分组成。</p>
<p>parser 的工作大概就是载入  <a href="https://www.markdown.xyz/getting-started/">markdown</a> 文件然后逐个字符读取，根据读取到的不同字符串应用不同的规则生成 token, 然后将该 token push 到最后要返回的 tokens 数组中。</p>
<p>render 的工作大概就是拿到 parser 的解析结果既 tokens，根据不同的 token 应用不同的规则生成 HTML string。</p>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>这一时半会说不清楚，请参考: <a href="https://juejin.cn/post/6844903834041450510">https://juejin.cn/post/6844903834041450510</a></p>
<h2 id="语义化版本"><a href="#语义化版本" class="headerlink" title="语义化版本"></a><a href="https://semver.org/lang/zh-CN/">语义化版本</a></h2><blockquote>
<p> 版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p>
<ul>
<li>主版本号：当你做了不兼容的 API 修改，</li>
<li> 次版本号：当你做了向下兼容的功能性新增，</li>
<li>修订号：当你做了向下兼容的问题修正。</li>
<li>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</li>
</ul>
</blockquote>
<p>组件库有很多版本因此其文档也需要版本化，更多请参考　<a href="https://docusaurus.io/zh-CN/docs/versioning">https://docusaurus.io/zh-CN/docs/versioning</a></p>
<h2 id="本地化和国际化"><a href="#本地化和国际化" class="headerlink" title="本地化和国际化"></a><a href="https://developer.mozilla.org/zh-CN/docs/orphaned/Web/Localization">本地化和国际化</a></h2><blockquote>
<p>本地化（通常缩写为 L10n）能够使网站、Web应用或任何其他形式的内容适用于特定语言的范围和文化圈。国际化（通常缩写为 I18n）被设计用来使网站或应用程序尽可能的实现本地化。</p>
</blockquote>
<p>没什么好说的　请参考　<a href="https://docusaurus.io/zh-CN/docs/i18n/crowdin">https://docusaurus.io/zh-CN/docs/i18n/crowdin</a>　与　<a href="https://docusaurus.io/zh-CN/docs/i18n/git">https://docusaurus.io/zh-CN/docs/i18n/git</a>        </p>
<h2 id="站点搜索"><a href="#站点搜索" class="headerlink" title="站点搜索"></a>站点搜索</h2><p>一个好的站点搜索可以让我们快速定位到我们要找的文档内容，大大提高我们的检索效率。</p>
<p>请参考 <a href="https://www.algolia.com/">algolia</a></p>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>主题分为站点主题和代码主题。</p>
<h3 id="站点主题"><a href="#站点主题" class="headerlink" title="站点主题"></a>站点主题</h3><p> <a href="https://docusaurus.io/">docusaurus</a> 提供了白天与黑夜两种模式，可以在导航栏右侧的主题按钮点击进行切换。</p>
<p>而 vue 则有官方和社区提供的主题包可供导入使用。 </p>
<p>除此之外，主题还有布局和功能上的变化。　</p>
<p>更多请参考　<a href="https://docusaurus.io/zh-CN/docs/api/themes">https://docusaurus.io/zh-CN/docs/api/themes</a>　和　<a href="https://vuepress.vuejs.org/zh/theme/">https://vuepress.vuejs.org/zh/theme/</a></p>
<h3 id="代码主题"><a href="#代码主题" class="headerlink" title="代码主题"></a>代码主题</h3><p>由于 <a href="https://www.markdown.xyz/getting-started/">markdown</a> 最终被解析渲染成 HTML，　因此开源社区主流的代码高亮库，如 <a href="https://github.com/highlightjs/highlight.js">highlight.js</a> 、 <a href="https://github.com/PrismJS/prism">prism</a> 、<a href="https://github.com/shikijs/shiki">shiki</a> 等就可以应用在此处。</p>
<blockquote>
<p><a href="https://github.com/highlightjs/highlight.js">highlight.js</a> 和 <a href="https://github.com/PrismJS/prism">prism</a> 都是在代码文本中插入标签包裹需要高亮的元素并通过 CSS 文件来设置高亮样式，而 <a href="https://github.com/shikijs/shiki">shiki</a>，一个基于 TextMate 语法的代码高亮器。它直接生成带样式的包裹元素，所以不需要引入额外的 CSS 文件。</p>
</blockquote>
<p>更多请参考 <a href="https://cn.sli.dev/custom/highlighters.html#highlighters">https://cn.sli.dev/custom/highlighters.html#highlighters</a></p>
<p>一般 <a href="https://www.markdown.xyz/getting-started/">markdown</a> 解析器都提供了代码主题的配置选型，如下所示: </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Remarkable &#125; <span class="keyword">from</span> <span class="string">&#x27;remarkable&#x27;</span></span><br><span class="line"><span class="keyword">import</span> hljs <span class="keyword">from</span> <span class="string">&#x27;highlight.js&#x27;</span> <span class="comment">// https://highlightjs.org/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Actual default values</span></span><br><span class="line"><span class="keyword">const</span> md = <span class="keyword">new</span> Remarkable(&#123;</span><br><span class="line">  highlight (str, lang) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lang &amp;&amp; hljs.getLanguage(lang)) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hljs.highlight(lang, str).value;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> hljs.highlightAuto(str).value;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span> <span class="comment">// use external default escaping</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h2><blockquote>
<p>PWA（Progressive Web Apps，渐进式 Web 应用）运用现代的 Web API 以及传统的渐进式增强策略来创建跨平台 Web 应用程序。这些应用无处不在、功能丰富，使其具有与原生应用相同的用户体验优势。这组文档和指南告诉您有关 PWA 的所有信息。</p>
</blockquote>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>最后是站点的部署，一般部署到项目源码仓库免费的 <a href="https://pages.github.com/">github pages</a> 上即可。</p>
<p>请参考：　<a href="https://docusaurus.io/zh-CN/docs/deployment">https://docusaurus.io/zh-CN/docs/deployment</a></p>
<h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><p><a href="https://docusaurus.io/">docusaurus</a> 与 <a href="https://vuepress.vuejs.org/zh/">vuepress</a> 都是非常优秀的开源文档站点项目，但由于开发团队主要使用 <a href="https://github.com/reactjs">react</a> 技术栈，最后选用了 <a href="https://docusaurus.io/">docusaurus</a> 。</p>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li><a href="https://docusaurus.io/zh-CN/docs#comparison-with-other-tools">docusaurus: 与其他工具的对比</a></li>
</ul>
]]></content>
      <tags>
        <tag>docs</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p> issues: <a href="https://github.com/hexojs/hexo-deployer-git/issues/199">https://github.com/hexojs/hexo-deployer-git/issues/199</a></p>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Makedown语法一览</title>
    <url>/2017/10/22/Makedown%E8%AF%AD%E6%B3%95%E4%B8%80%E8%A7%88/</url>
    <content><![CDATA[<ul>
<li>本文最后迭代于(FloatingShuYin@2017-11-15 14:25:53)</li>
<li>去<a href="http://www.appinn.com/markdown/" title="Title">Makedown语法说明</a>。</li>
<li>去<a href="http://markdown.tw/" title="Title">繁体版</a></li>
<li>看看繁体版的<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md">原始檔</a>:来自GitHub</li>
<li>下载本文的<a href="https://share.weiyun.com/b251ecf3e36c8b3e542ae36c02a0e08d">原始档</a>:来自微云网盘的分享</li>
</ul>
<p><span id="top"></span></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>此文档是我学习Makedown语法时候的练习笔记</li>
<li>参考自 <a href="http://www.appinn.com/markdown/">Makedown语法说明</a></li>
<li>此文档内容来自<a href="http://www.appinn.com/markdown/" title="Title">Makedown语法说明</a>。</li>
</ul>
<span id="more"></span>
<hr>
<h2 id="代码引用"><a href="#代码引用" class="headerlink" title="代码引用"></a>代码引用</h2><ul>
<li>先看如何在Makedown中插入代码</li>
<li>如果要标记一小段行内代码，就需要用反引号把它包起来</li>
<li>反引号就是ESC下面的那个键，值得注意的是要在半角（英文）模式下输入。</li>
</ul>
<p>例如：<br><code>使用`document.write(Hello World!)`让浏览器输出Hell World!的字符。</code><br>解析成的HTML代码为：<br><code>&lt;p&gt;使用&lt;code&gt;document.write(Hello World!)&lt;/code&gt;让浏览器输出Hell World!的字符。&lt;/p&gt;</code></p>
<ul>
<li>可以看到的被反引号包裹起来的代码将解析插入到HTML的<code>&lt;code&gt;&lt;/code&gt;</code>标签中</li>
<li>因此就可以让浏览器渲染用反引号包裹起来的代码</li>
</ul>
<p>让代码看起来是这样：<br><code>document.write(Hello World!)</code></p>
<ul>
<li>如果需要插入多行代码的话就需要至少3个反引号把代码块包起来<!--more-->
例如：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">sayhello:function()&#123;</span><br><span class="line">	document.write(Hello World!)</span><br><span class="line">&#125;</span><br><span class="line">sayhello()</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<p>效果显示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sayhello:function()&#123;</span><br><span class="line">	document.write(Hello World!)</span><br><span class="line">&#125;</span><br><span class="line">sayhello()</span><br></pre></td></tr></table></figure>
<ul>
<li>如果要在代码区段内插入反引号，可以用多个反引号来开始和结束代码区段：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">``There is a literal backtick (`) here.``</span><br></pre></td></tr></table></figure>

<p>解析成的HTML代码为：<br><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</code></p>
<p>效果显示：<br> <code>There is a literal backtick (`) here.</code></p>
<ul>
<li>而如果需要像我这样演示在代码中插入反引号而不被解析的话，像这样：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A single backtick in a code span: `` ` ``</span><br><span class="line">A backtick-delimited string in a code span: `` `foo` ``</span><br></pre></td></tr></table></figure>

<p>只需要在代码前后输入（不想被解析的反引号的个数+1）个反引号</p>
<ul>
<li>也就是说想让浏览器显示出这样的效果：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A single backtick in a code span: `` ` ``</span><br><span class="line">A backtick-delimited string in a code span: `` `foo` ``</span><br></pre></td></tr></table></figure>
<p>就需要在md文档中写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">A single backtick in a code span: `` ` ``</span><br><span class="line">A backtick-delimited string in a code span: `` `foo` ``</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<ul>
<li>在代码区段内，&amp; 和方括号都会被自动地转成 HTML 实体</li>
<li>这让插入 HTML 原始码变得非常容易，Markdown 会把下面这段：</li>
</ul>
<p><code>Please don&#39;t use any `&lt;blink&gt;` tags.</code><br>解析成<br><code>&lt;p&gt;Please don&#39;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;</code><br>可以这样写：<br><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</code><br>以产生<br><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;</code></p>
<hr>
<h2 id="代码并排排版"><a href="#代码并排排版" class="headerlink" title="代码并排排版"></a>代码并排排版</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float:left&quot;</span>&gt;</span></span><br><span class="line">```html</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1. Bootstrap heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>h2. Bootstrap heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>h3. Bootstrap heading<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>h4. Bootstrap heading<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>h5. Bootstrap heading<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>h6. Bootstrap heading<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">```</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">```html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;h1&quot;</span>&gt;</span>h1. Bootstrap heading<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;h2&quot;</span>&gt;</span>h2. Bootstrap heading<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;h3&quot;</span>&gt;</span>h3. Bootstrap heading<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;h4&quot;</span>&gt;</span>h4. Bootstrap heading<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;h5&quot;</span>&gt;</span>h5. Bootstrap heading<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;h6&quot;</span>&gt;</span>h6. Bootstrap heading<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">```</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示效果：</p>
<p>
<div style="float:left">
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1. Bootstrap heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>h2. Bootstrap heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>h3. Bootstrap heading<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>h4. Bootstrap heading<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>h5. Bootstrap heading<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>h6. Bootstrap heading<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>
</div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;h1&quot;</span>&gt;</span>h1. Bootstrap heading<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;h2&quot;</span>&gt;</span>h2. Bootstrap heading<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;h3&quot;</span>&gt;</span>h3. Bootstrap heading<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;h4&quot;</span>&gt;</span>h4. Bootstrap heading<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;h5&quot;</span>&gt;</span>h5. Bootstrap heading<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;h6&quot;</span>&gt;</span>h6. Bootstrap heading<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</p>


<p><strong>值得注意的是，使用浮动的方式来实现这种排版效果，div的结束标签下方不能有空行<br>不然会会导致下面的makedown排版出现意想不到的后果。</strong></p>
<h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p><strong>你可以在反引号 <code>`</code> 的后边加上代码语法名称即可将代码块高亮</strong></p>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```HTML</span><br><span class="line">&lt;html&gt;</span><br><span class="line">      &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf8&quot;&gt;</span><br><span class="line">        &lt;title&gt;变量声明和数据传递&lt;/title&gt;</span><br><span class="line">        &lt;/head&gt;</span><br><span class="line">        &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;HELLO WORLD&lt;/h1&gt;</span><br><span class="line">      &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<p>显示效果为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>变量声明和数据传递<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>HELLO WORLD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="页内跳转"><a href="#页内跳转" class="headerlink" title="页内跳转"></a>页内跳转</h2><ul>
<li>有两种方式可以在MarkDown中实现页内跳转</li>
</ul>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- [1.语法示例](#1)</span><br><span class="line"></span><br><span class="line">- [1.1图片](#1.1)</span><br><span class="line"></span><br><span class="line">- [1.2换行](#1.2)</span><br><span class="line"></span><br><span class="line">- [1.3强调](#1.3)</span><br></pre></td></tr></table></figure>

<p>生成效果:</p>
<pre><code>1.语法示例
    1.1图片
    1.2换行
    1.3强调
</code></pre>
<p>在正文中，只要将章节标题的id对应上去即可:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h2 id=&quot;1&quot;&gt;1.语法示例&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">这是第一段</span><br><span class="line"></span><br><span class="line">&lt;h3 id=&quot;1.1&quot;&gt;1.1图片&lt;/h3&gt;</span><br><span class="line">这是第一段第一节</span><br><span class="line">&lt;h3 id=&quot;1.2&quot;&gt;1.2换行&lt;/h3&gt;</span><br><span class="line">这是第一段第二节</span><br><span class="line">&lt;h3 id=&quot;1.1&quot;&gt;1.3强调&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">这是第一段第三节</span><br><span class="line"></span><br><span class="line">这是第一段第三节</span><br><span class="line"></span><br><span class="line">这是第一段第三节</span><br><span class="line"></span><br><span class="line">这是第一段第三节</span><br><span class="line"></span><br><span class="line">这是第一段第三节</span><br></pre></td></tr></table></figure>

<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ul>
<li>使用html标签实现</li>
</ul>
<ol>
<li>定义一个锚(id)：<code>&lt;span id=&quot;jump&quot;&gt;跳转到的地方&lt;/span&gt;</code></li>
<li>使用markdown语法：<code>[点击跳转](#jump)</code></li>
</ol>
<hr>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="兼容-HTML"><a href="#兼容-HTML" class="headerlink" title="兼容 HTML"></a>兼容 HTML</h2><ul>
<li>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</li>
<li>要制约的只有一些 HTML <em>区块元素</em></li>
<li>比如<code>&lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt;</code>等标签</li>
<li>必须在前后加上空行与其它内容区隔开</li>
<li>还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。</li>
</ul>
<p>例子如下：<br> 这是一个普通段落。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 开头的↑上面要有空行</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;*Foo*&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"> 结尾的↓下面要有空行</span><br></pre></td></tr></table></figure>
<p> 这是另一个普通段落。</p>
<ul>
<li>在 HTML <em>区块</em> 标签间的 Markdown 格式语法不会被处理。</li>
<li>比如，在 HTML 区块内使用 Markdown 样式的”-“是不会起作用的</li>
<li>值得注意的是我在区块标签中使用 <em>强调</em> 是有作用的</li>
<li>而我看的Makedow文档说不起作用？莫非有玄学加成？</li>
<li>可能是解析层面做了一些处理，不深究他→ <em>强调</em></li>
</ul>
<p>例子如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p style=&quot;color: #fc9f4d&quot;&gt;</span><br><span class="line">	- *我是要被强调的*</span><br><span class="line">	- 可以看到在p这个区块标签中Makedown语法 *强调* 依旧起作用</span><br><span class="line">	- 但是“-”语法却没有起作用，被原原本本的输出来了</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>显示效果：</p>
<p style="color: #fc9f4d">
    - *我是要被强调的*
    - 可以看到在p这个区块标签中Makedown语法 *强调* 依旧起作用
    - 但是“-”语法却没有起作用，被原原本本的输出来了
</p>


<ul>
<li><p>HTML 的区段（行内）标签可以在 Markdown 的段落、列表或是标题里随意使用。</p>
</li>
<li><p>如 <code>&lt;span&gt;、&lt;cite&gt;、&lt;del&gt;</code></p>
</li>
<li><p>举例说明：</p>
</li>
<li><p>可以直接使用HTML 的 <code>&lt;a&gt; 或 &lt;img&gt;</code> 这些标签</p>
</li>
<li><p>而不用 Markdown 提供的链接或是图像标签语法。</p>
</li>
<li><p>和处在 HTML <em>区块</em> 标签间不同，Markdown 语法在 HTML <em>区段</em> 标签间是有效的。</p>
</li>
</ul>
<p>代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;</span><br><span class="line">- *我要被Makedown语法强调*</span><br><span class="line">- 我是第二段</span><br><span class="line">- 可以看到的，这个“-”Makedown语法被解析渲染了</span><br><span class="line">- 所以在 *区段* 标签中是支持使用Makedown语法的</span><br><span class="line">&lt;/span&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>显示效果：</p>
<span>
- *我要被Makedown语法强调*
- 我是第二段
- 可以看到的，这个“-”Makedown语法被解析渲染了
- 所以在 *区段* 标签中是支持使用Makedown语法的
</span>

<hr>
<h2 id="特殊字符自动转换"><a href="#特殊字符自动转换" class="headerlink" title="特殊字符自动转换"></a>特殊字符自动转换</h2><ul>
<li>在 传统HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp;</li>
<li> &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体。</li>
<li>如果只是想要显示这些字符的原型，必须要使用实体的形式，像是<code>&amp;lt; 和 &amp;amp;</code></li>
<li>但是 在 Makedown中 你可以很自然的书写字符</li>
<li>在 Makedown 中，如果你使用的 &amp;字符是 HTML 字符实体的一部分,它会保留原状，</li>
<li>否则它会被转换成 <code>&amp;amp;</code>。</li>
</ul>
<p>例如：</p>
<ul>
<li><p>如果要在文档中插入一个版权符号，可以这样写：<br><code>&amp;copy;</code></p>
</li>
<li><p>Markdown 会保留它不动。而若你写：<br><code>AT&amp;T</code></p>
</li>
<li><p>Markdown 就会将它转为：<br><code>AT&amp;amp;T</code></p>
</li>
<li><p><code>&lt;</code>符号同样，如果是把 &lt; 符号作为 HTML 标签的定界符使用</p>
</li>
<li><p>那 Markdown 也不会对它做任何转换</p>
</li>
<li><p>但是如果你写：<br><code>4 &lt; 5</code></p>
</li>
<li><p>Markdown 将会把它转换为：<br><code>4 &amp;lt; 5</code></p>
</li>
<li><p>值得注意的是，在code范围内,不论是行内还是区块<code> &lt; 和 &amp;</code> 两个符号<br>都一定会被转换成 HTML 实体</p>
</li>
<li><p>这项特性让你可以很容易地用 Markdown 写 HTML code</p>
</li>
</ul>
<p>例子如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;color: #9e7a7a&quot;</span>&gt;</span></span><br><span class="line">问刘十九</span><br><span class="line">白<span class="symbol">&amp;nbsp;</span>居<span class="symbol">&amp;nbsp;</span>易</span><br><span class="line">绿蚁新醅酒<span class="tag">&lt;/<span class="name">br</span>&gt;</span>红泥小火炉<span class="tag">&lt;/<span class="name">br</span>&gt;</span>晚来天欲雪<span class="tag">&lt;/<span class="name">br</span>&gt;</span>能饮一杯无</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>显示效果:</p>
<p style="text-align: center;color: #9e7a7a">
问刘十九
白&nbsp;居&nbsp;易
绿蚁新醅酒</br>红泥小火炉</br>晚来天欲雪</br>能饮一杯无
</p>

<hr>
<h2 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h2><h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><ul>
<li><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行。</p>
</li>
<li><p>空行的定义是显示上看起来像是空的，便会被视为空行。</p>
</li>
<li><p>比方说，若某一行只包含空格和制表符，则该行也会被视为空行</p>
</li>
<li><p>普通段落不该用空格或制表符来缩进。</p>
</li>
<li><p>「由一个或多个连续的文本行组成」这句话其实暗示了Markdown允许段落内的强迫换行（插入换行符）</p>
</li>
<li><p>这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项）</p>
</li>
<li><p>其它的格式会把每个换行符都转成 <br /> 标签。</p>
</li>
<li><p>如果你确实想要依赖 Markdown 来插入 <br /> 标签的话，在插入处先按入两个以上的空格然后回车。</p>
</li>
</ul>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><ul>
<li>Markdown 支持两种标题的语法:类 Setext 和类 atx 形式。</li>
<li>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</li>
</ul>
<p style="text-align: center">
This is an H1
=============

<h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2></p>

<p>任何数量的 = 和 - 都可以有效果。</p>
<p>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p>
<p style="text-align: center">
# 这是 H1

<h2 id="这是-H2"><a href="#这是-H2" class="headerlink" title="这是 H2"></a>这是 H2</h2><h6 id="这是-H6"><a href="#这是-H6" class="headerlink" title="这是 H6"></a>这是 H6</h6></p>

<p>你可以选择性地「闭合」类atx样式的标题，这纯粹只是美观用的<br>若是觉得这样看起来比较舒适,你就可以在行尾加上 #<br>而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p>
<p style="text-align: center">
# 这是 H1 #

<h2 id="这是-H2-1"><a href="#这是-H2-1" class="headerlink" title="这是 H2"></a>这是 H2</h2><h3 id="这是-H3"><a href="#这是-H3" class="headerlink" title="这是 H3"></a>这是 H3</h3></p>

<h3 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h3><ul>
<li>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。<br>如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 <code>&gt;</code> ：</li>
</ul>
<pre style="text-align: left;margin-left: 22%">
<code>
> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
>
> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
> id sem consectetuer libero luctus adipiscing.
</code>
</pre>

<ul>
<li>这是效果</li>
</ul>
<blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p>
</blockquote>
<ul>
<li>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：</li>
</ul>
<pre style="text-align: left;margin-left: 22%">
<code>
> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
</code>
</pre>

<ul>
<li>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：</li>
</ul>
<pre style="text-align: left;margin-left: 22%">
<code>
> This is the first level of quoting.
>
> > This is nested blockquote.
>
> Back to the first level.
</code>
</pre>

<ul>
<li>这是效果</li>
</ul>
<blockquote>
<p>This is the first level of quoting.</p>
<blockquote>
<p>This is nested blockquote.</p>
</blockquote>
<p>Back to the first level.</p>
</blockquote>
<ul>
<li>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</li>
</ul>
<pre style="text-align: left;margin-left: 22%">
<code>
> #### 在引用的区块内测试使用标题
>
> 1.   这是第一行列表项。
> 2.   这是第二行列表项。
>
> 给出一些例子代码：
>
>     return shell_exec("echo $input | $markdown_script");

</code>
</pre>


<ul>
<li>这是效果</li>
</ul>
<blockquote>
<h4 id="在引用的区块内测试使用标题"><a href="#在引用的区块内测试使用标题" class="headerlink" title="在引用的区块内测试使用标题"></a>在引用的区块内测试使用标题</h4><ol>
<li>  这是第一行列表项。</li>
<li>  这是第二行列表项。</li>
</ol>
<p>给出一些例子代码：</p>
<pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre>
</blockquote>
<ul>
<li>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。</li>
</ul>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li>Markdown 支持有序列表和无序列表。</li>
<li>无序列表使用星号、加号或是减号作为列表标记：</li>
</ul>
<pre style="text-align: left;margin-left: 22%">
<code>
*   Red
*   Green
*   Blue
</code>
</pre>

<p>等同于</p>
<pre style="text-align: left;margin-left: 22%">
<code>
+   Red
+   Green
+   Blue
</code>
</pre>

<p>也等同于</p>
<pre style="text-align: left;margin-left: 22%">
<code>
-   Red
-   Green
-   Blue
</code>
</pre>

<ul>
<li><p>这是效果</p>
</li>
<li><p>  Red</p>
</li>
<li><p>  Green</p>
</li>
<li><p>  Blue</p>
</li>
<li><p>有序列表则使用数字接着一个英文句点：</p>
</li>
</ul>
<pre style="text-align: left;margin-left: 22%">
<code>
1.  Bird
2.  McHale
3.  Parish
</code>
</pre>

<ul>
<li>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</li>
</ul>
<pre style="text-align: left;margin-left: 22%">
    <code>
    <ol>
    <li>Bird</li>
    <li>McHale</li>
    <li>Parish</li>
    </code>
</pre>

<ul>
<li>如果你的列表标记写成：</li>
</ul>
<pre style="text-align: left;margin-left: 22%">
<code>
1.  Bird
1.  McHale
1.  Parish
</code>
</pre>

<ul>
<li>或甚至是</li>
</ul>
<pre style="text-align: left;margin-left: 22%">
<code>
2. Bird
1. McHale
8. Parish
</code>
</pre>

<ul>
<li><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p>
</li>
<li><p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p>
</li>
<li><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p>
</li>
<li><p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">    viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">-   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">    Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>效果</p>
<ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<br>  Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<br>  viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>  Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul>
</li>
<li><p>但是如果你懒，那也行：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">-   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>效果是一样的</p>
<ul>
<li>  Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<br>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<br>viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>  Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul>
</li>
<li><p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <code>&lt;p&gt;</code> 标签包起来，举例来说:</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-   Bird</span><br><span class="line">-   Magic</span><br></pre></td></tr></table></figure>

<p>会被转换为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;Bird&lt;/li&gt;</span><br><span class="line">&lt;li&gt;Magic&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<p>但是这个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-   Bird</span><br><span class="line"></span><br><span class="line">-   Magic</span><br></pre></td></tr></table></figure>
<p>会被转换为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.  This is a list item with two paragraphs. Lorem ipsum dolor</span><br><span class="line">    sit amet, consectetuer adipiscing elit. Aliquam hendrerit</span><br><span class="line">    mi posuere lectus.</span><br><span class="line"></span><br><span class="line">    Vestibulum enim wisi, viverra nec, fringilla in, laoreet</span><br><span class="line">    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</span><br><span class="line">    sit amet velit.</span><br><span class="line"></span><br><span class="line">2.  Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure>

<ul>
<li>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-   This is a list item with two paragraphs.</span><br><span class="line"></span><br><span class="line">    This is the second paragraph in the list item. You&#x27;re</span><br><span class="line">only required to indent the first line. Lorem ipsum dolor</span><br><span class="line">sit amet, consectetuer adipiscing elit.</span><br><span class="line"></span><br><span class="line">-   Another item in the same list.</span><br></pre></td></tr></table></figure>
<ul>
<li>效果：</li>
</ul>
<ol>
<li><p>This is a list item with two paragraphs. Lorem ipsum dolor<br> sit amet, consectetuer adipiscing elit. Aliquam hendrerit<br> mi posuere lectus.</p>
<p> Vestibulum enim wisi, viverra nec, fringilla in, laoreet<br> vitae, risus. Donec sit amet nisl. Aliquam semper ipsum<br> sit amet velit.</p>
</li>
<li><p> Suspendisse id sem consectetuer libero luctus adipiscing.</p>
</li>
</ol>
<ul>
<li>如果要在列表项目内放进引用，那 &gt; 就需要缩进：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-   A list item with a blockquote:</span><br><span class="line"></span><br><span class="line">    &gt; This is a blockquote</span><br><span class="line">    &gt; inside a list item.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>效果：</p>
<ul>
<li><p>A list item with a blockquote:</p>
<blockquote>
<p>This is a blockquote<br>inside a list item.</p>
</blockquote>
</li>
</ul>
</li>
<li><p>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-   一列表项包含一个列表区块：</span><br><span class="line"></span><br><span class="line">        &lt;代码写在这&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>实例效果：</p>
<ul>
<li>一列表项包含一个列表区块：<pre><code>  sayhello:function()&#123;
      document.write(Hello World!)
  &#125;
  sayhello()
</code></pre>
</li>
</ul>
</li>
<li><p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p>
</li>
</ul>
<p><code>1986. What a great season.</code></p>
<ul>
<li>换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。</li>
</ul>
<p><code>1986\. What a great season.</code></p>
<hr>
<h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><ul>
<li><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <pre> 和 <code> 标签来把代码区块包起来。</p>
<ul>
<li><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p>
<pre><code>  这是一个普通段落：

      这是一个代码区块。
</code></pre>
</li>
</ul>
</li>
<li><p>Markdown 会转换成：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;这是一个普通段落：&lt;/p&gt;</span><br><span class="line">&lt;pre&gt;</span><br><span class="line">&lt;code&gt;</span><br><span class="line">这是一个代码区块。</span><br><span class="line">&lt;/code&gt;</span><br><span class="line">&lt;/pre&gt;</span><br></pre></td></tr></table></figure>


<ul>
<li>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</li>
</ul>
<p>Here is an example of AppleScript:</p>
<pre><code>tell application &quot;Foo&quot;
    beep
end tell
</code></pre>
<ul>
<li>会被转换为:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;</span><br><span class="line">    beep</span><br><span class="line">end tell</span><br><span class="line">&lt;/code&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</li>
<li>在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体</li>
<li>这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码</li>
<li>只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</li>
</ul>
<pre><code>&lt;div class=&quot;footer&quot;&gt;
    &amp;copy; 2004 Foo Corporation
&lt;/div&gt;
</code></pre>
<p>会被转换为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;pre&gt;</span><br><span class="line">&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;</span><br><span class="line">    &amp;amp;copy; 2004 Foo Corporation</span><br><span class="line">&amp;lt;/div&amp;gt;</span><br><span class="line">&lt;/code&gt;</span><br><span class="line">&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</li>
</ul>
<hr>
<h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><ul>
<li>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</li>
</ul>
<p><code>* * *</code></p>
<p><code>***</code></p>
<p><code>*****</code></p>
<p><code>- - -</code></p>
<p><code>---------------------------------------</code></p>
<ul>
<li>效果如下：</li>
</ul>
<hr>
<hr>
<hr>
<hr>
<hr>
<h2 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支援兩種形式的連結語法： <strong>行內</strong>和<strong>參考</strong>兩種形式。<br>不管是哪一种，链接文字都是用 [方括号] 来标记。<br>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p>
<p><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.</code></p>
<p><code>[This link](http://example.net/) has no title attribute.</code></p>
<p>会产生：</p>
<p><code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt; an example&lt;/a&gt; inline link.&lt;/p&gt;</code></p>
<p><code>&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no title attribute.&lt;/p&gt;</code></p>
<p>如果你是要链接到同样主机的资源，你可以使用相对路径：<br><code>See my [About](/about/) page for details.</code></p>
<p><em><strong>参考式</strong></em>的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：<br><code>This is [an example][id] reference-style link.</code><br>你也可以选择性地在两个方括号中间加上一个空格：<br><code>This is [an example] [id] reference-style link.</code><br>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：<br><code>[id]: http://example.com/  &quot;Optional Title Here&quot;</code><br>链接内容定义的形式为：</p>
<ul>
<li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li>
<li>接着一个冒号</li>
<li>接着一个以上的空格或制表符</li>
<li>接着链接的网址</li>
<li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li>
</ul>
<p>下面这三种链接的定义都是相同：<br>        [foo]: <a href="http://example.com/">http://example.com/</a>  “Optional Title Here”<br>         [foo]: <a href="http://example.com/">http://example.com/</a>  ‘Optional Title Here’<br>         [foo]: <a href="http://example.com/">http://example.com/</a>  (Optional Title Here)<br><em><strong>请注意：</strong></em> 有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。<br>链接网址也可以用方括号包起来：<br><code>[id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;</code><br>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：<br><code>[id]: http://example.com/longish/path/to/resource/here     &quot;Optional Title Here&quot;</code><br>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。<br>链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的:<br>        [link text][a]<br>        [link text][A]<br>隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p>
<p><code>[Google][]</code></p>
<p>然后定义链接内容：</p>
<p><code>[Google]: http://google.com/</code></p>
<p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p>
<p><code>Visit [Daring Fireball][] for more information.</code></p>
<p>然后接着定义链接：</p>
<p><code>[Daring Fireball]: http://daringfireball.net/</code></p>
<p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p>
<p>下面是一个参考式链接的范例：</p>
<pre><code>    I get 10 times more traffic from [Google] [1] than from
    [Yahoo] [2] or [MSN] [3].

      [1]: http://google.com/        &quot;Google&quot;
      [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;
      [3]: http://search.msn.com/    &quot;MSN Search&quot;
</code></pre>
<p>如果改成用链接名称的方式写：</p>
<pre><code>    I get 10 times more traffic from [Google][] than from
    [Yahoo][] or [MSN][].

      [google]: http://google.com/        &quot;Google&quot;
      [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;
      [msn]:    http://search.msn.com/    &quot;MSN Search&quot;
</code></pre>
<p>上面两种写法都会产生下面的 HTML。</p>
<p>`<p>I get 10 times more traffic from<br>    &lt;a href=”<a href="http://google.com/&quot;title=&quot;Google&quot;&gt;Google">http://google.com/&quot;title=&quot;Google&quot;&gt;Google</a><br>    </a> than from<br>    <a href="http://search.yahoo.com/" title="Yahoo Search">Yahoo</a><br>or <a href="http://search.msn.com/" title="MSN Search">MSN</a>.</p>
</p>`

<p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p>
<p><code>I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;) than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or [MSN](http://search.msn.com/ &quot;MSN Search&quot;).</code></p>
<p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。<br>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p>
<h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>Markdown 使用星号<code>（*）</code>和底线<code>（_）</code>作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 * 或 _ 包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如：</p>
<p><code>*single asterisks*</code></p>
<p><code>_single underscores_</code></p>
<p><code>**double asterisks**</code></p>
<p><code>__double underscores__</code></p>
<p>会转成：</p>
<pre><code>    &lt;em&gt;single asterisks&lt;/em&gt;

    &lt;em&gt;single underscores&lt;/em&gt;

    &lt;strong&gt;double asterisks&lt;/strong&gt;

    &lt;strong&gt;double underscores&lt;/strong&gt;
</code></pre>
<p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。<br>强调也可以直接插在文字中间：</p>
<p><code>un*frigging*believable</code></p>
<p>但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。<br>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p>
<p><code>\*this text is surrounded by literal asterisks\*</code></p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。<br>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。<br>行内式的图片语法看起来像是：</p>
<p><code>![Alt text](/path/to/img.jpg)</code></p>
<p><code>![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code></p>
<p>详细叙述如下：<br>    一个惊叹号 !<br>    接着一个方括号，里面放上图片的替代文字<br>    接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。</p>
<p>参考式的图片语法则长得像这样：</p>
<p><code>![Alt text][id]</code></p>
<p><code>「id」</code>是图片参考的名称，图片参考的定义方式则和连结参考一样：</p>
<p><code>[id]: url/to/image  &quot;Optional title attribute&quot;</code></p>
<p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。<br>其它</p>
<h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p>
<p><code>&lt;http://example.com/&gt;</code></p>
<p>Markdown 会转为：</p>
<p><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</code></p>
<p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p>
<p><code>&lt;address@example.com&gt;</code></p>
<p>Markdown 会转成：</p>
<pre><code>    &lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
    &amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
    &amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;
    &amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;
</code></pre>
<p>在浏览器里面，这段字串（其实是 <code>&lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;</code>）会变成一个可以点击的「<a href="mailto:&#x61;&#100;&#100;&#x72;&#x65;&#115;&#115;&#64;&#x65;&#x78;&#97;&#x6d;&#112;&#x6c;&#x65;&#46;&#99;&#x6f;&#x6d;">&#x61;&#100;&#100;&#x72;&#x65;&#115;&#115;&#64;&#x65;&#x78;&#97;&#x6d;&#112;&#x6c;&#x65;&#46;&#99;&#x6f;&#x6d;</a>」链接。</p>
<p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p>
<h3 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <code>&lt;em&gt;</code> 标签），你可以在星号的前面加上反斜杠：</p>
<p><code>\*literal asterisks\*</code></p>
<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure>

<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>感谢 leafy7382 协助翻译，hlb、Randylien 帮忙润稿，ethantw 的汉字标准格式・CSS Reset， WM 回报文字错误。</p>
<p>感谢 fenprace，addv。</p>
<hr>
<ul>
<li><a href="#top">回到顶部</a></li>
<li>去<a href="http://www.appinn.com/markdown/" title="Title">Makedown语法说明</a>。</li>
<li>去<a href="http://markdown.tw/" title="Title">繁体版</a></li>
<li>看看繁体版的<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md">原始檔</a></li>
<li>下载本文的<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md">原始档</a></li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Makedown</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Makedown语法</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式语法一览</title>
    <url>/2017/10/31/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E4%B8%80%E8%A7%88/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"> p &gt; a &#123;</span><br><span class="line">    color: blue;</span><br><span class="line">  &#125;</span><br><span class="line">code &#123;</span><br><span class="line">   background-color: #2d2d2d;</span><br><span class="line">   color: #fdfcf8;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>此文档是我学习正则表达式语法时候的练习笔记</li>
<li>此文档内容来自<a href="https://developer.mozilla.org/zh-CN/" title="Title">MDN Web docs</a>的<a href="http://www.appinn.com/markdown/" title="Title">JavaScript指南-正则表达式</a>。</li>
</ul>
<h2 id="JavaScript中的正则表达式"><a href="#JavaScript中的正则表达式" class="headerlink" title="JavaScript中的正则表达式"></a>JavaScript中的正则表达式</h2><p>正则表达式是用于匹配字符串中字符组合的模式。在 <code>JavaScript</code>中，正则表达式也是对象。这些模式被用于 <code>RegExp</code> 的 <code>exec</code> 和 <code>test</code> 方法, 以及 <code>String</code> 的 <code>match</code>、<code>replace</code>、<code>search</code> 和 <code>split</code> 方法。本章介绍 <em>JavaScript正则表达式。</em><br> <span id="more"></span></p>
<h3 id="创建一个正则表达式"><a href="#创建一个正则表达式" class="headerlink" title="创建一个正则表达式"></a>创建一个正则表达式</h3><p>可以使用以下两种方法之一构建一个正则表达式：</p>
<ul>
<li>使用一个正则表达式字面量，其由包含在斜杠之间的模式组成，如下所示：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    /pattern/flags</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/ab+c/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/^[a-zA-Z]+[0-9]*\W?_$/gi</span>;</span><br></pre></td></tr></table></figure>
在加载脚本后，正则表达式字面值提供正则表达式的编译。当正则表达式保持不变时，<strong>使用此方法可获得更好的性能</strong>。</li>
<li>或者调用 <strong>RegExp</strong> 对象的构造函数，如下所示：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    new RegExp(pattern[,flags])</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 下面这三种传参方式都是可以的</span></span><br><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;ab+c&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^[a-zA-Z]+[0-9]*\\W?_$/</span>,<span class="string">&quot;gi&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;^[a-zA-Z]+[0-9]*\\W?_$&quot;</span>, <span class="string">&quot;gi&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>当你知道正则表达式模式将会改变，或者你不知道模式，并从另一个来源，如用户输入的时候，就可以选择使用RegExp对象构造函数</strong><br><strong>使用构造函数提供的正则表达式将在运行时编译。</strong></p>
<hr>
<h3 id="编写一个正则表达式的模式"><a href="#编写一个正则表达式的模式" class="headerlink" title="编写一个正则表达式的模式"></a>编写一个正则表达式的模式</h3><p>一个正则表达式模式是由简单的字符所构成的，比如<code>/abc/</code>, 或者是简单和特殊字符的组合，比如 <code>/ab*c/ </code>或 /Chapter <code>(\d+)\.\d*/</code>。后者用到了括号，它在正则表达式中可以被用作是一个 <em>记忆设备</em> 。这一部分正则所匹配的字符将会被记住，在后面可以被利用。正如使用 [括号的子字符串匹配] <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#%E4%BD%BF%E7%94%A8%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D" title="Title">foo</a></p>
<p><strong>使用简单的模式</strong></p>
<p>简单的模式是由你找到的直接匹配所构成的。比如，<code>/abc/</code>这个模式就匹配了在一个字符串中，仅仅字符 <code>&#39;abc&#39;</code> <em>同时出现并按照这个顺序</em>。在匹配字符串<code>&quot;Hi, do you know your abc&#39;s?&quot;</code>和 <code>&quot;The latest airplane designs evolved from slabcraft.&quot;</code> 的时候，就会匹配成功。在上面的两个实例中，匹配的是子字符串 <code>&#39;abc&#39;</code>。而在字符串 <code>&quot;Grab crab&quot; </code>中将不会被匹配，因为它不包含任何的 <code>&#39;abc&#39;</code> 子字符串。<br>使用特殊字符</p>
<p>当你需要搜索一个比直接匹配需要更多条件的匹配时，比如寻找一个或多个 ‘b’，或者寻找空格，那么这时模式将要包含特殊字符。比如， 模式<code>/ab*c/</code>匹配了一个单独的 ‘a’ 后面跟了零个或者多个 ‘b’（<code>*</code>的意思是前面一项出现了零个或者多个），且后面跟着 ‘c’ 的任何字符组合。在字符串 “cbbabbbbcdebc” 中，这个模式匹配了子字符串 “abbbbc”。</p>
<p>下面的表格列出了一个我们在正则表达式中可以利用的特殊字符的完整列表和描述。</p>
<h4 id="表-4-1-正则表达式中的特殊字符"><a href="#表-4-1-正则表达式中的特殊字符" class="headerlink" title="表 4.1 正则表达式中的特殊字符"></a>表 4.1 正则表达式中的特殊字符</h4><p><img src="http://oy9dwtsnx.bkt.clouddn.com/Screenshot-2017-11-1%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt="表 4.1 正则表达式中的特殊字符" title="正则表达式中的特殊字符"></p>
<p>将用户输入转义为正则表达式中的一个字面字符串, 可以通过简单的替换来实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapeRegExp</span>(<span class="params">string</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> string.replace(<span class="regexp">/([.*+?^=!:$&#123;&#125;()|[\]\/\\])/g</span>, <span class="string">&quot;\\$&amp;&quot;</span>);</span><br><span class="line">    <span class="comment">//$&amp;表示整个被匹配的字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="使用插入语"><a href="#使用插入语" class="headerlink" title="使用插入语"></a>使用插入语</h3><p>任何正则表达式的插入语都会使这部分匹配的副字符串被记忆。一旦被记忆，这个副字符串就可以被调用于其它用途，如同 使用括号的子字符串匹配之中所述。</p>
<p>比如， <code>/Chapter (\d+)\.\d*/</code> 解释了额外转义的和特殊的字符，并说明了这部分pattern应该被记忆。它精确地匹配后面跟着一个以上数字字符的字符 <code>&#39;Chapter &#39;</code>  (\d 意为任何数字字符，+ 意为1次以上)，跟着一个小数点（在这个字符中本身也是一个特殊字符；小数点前的 \ 意味着这个pattern必须寻找字面字符 ‘.’)，跟着任何数字字符0次以上。 (\d 意为数字字符， * 意为0次以上)。另外，插入语也用来记忆第一个匹配的数字字符。</p>
<p>此模式可以匹配字符串<code>&quot;Open Chapter 4.3, paragraph 6&quot;</code>，并且<code>&#39;4&#39;</code>将会被记住。此模式并不能匹配<code>&quot;Chapter 3 and 4&quot;</code>，因为在这个字符串中<code>&#39;3&#39;</code>的后面没有点号<code>&#39;.&#39;</code>。</p>
<p>括号中的<code>&quot;?:&quot;</code>，这种模式匹配的子字符串将不会被记住。比如，<code>(?:\d+)</code>匹配一次或多次数字字符，但是不能记住匹配的字符</p>
<hr>
<h3 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h3><p>正则表达式可以被用于<code>RegExp</code>的<code>exec</code>和<code>test</code>方法以及 <code>String</code>的<code>match</code>、<code>replace</code>、<code>search</code>和<code>split</code>方法。这些方法在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference" title="JavaScript 手册">JavaScript 手册</a>中有详细的解释。</p>
<h4 id="表-4-2-使用正则表达式的方法"><a href="#表-4-2-使用正则表达式的方法" class="headerlink" title="表 4.2 使用正则表达式的方法"></a>表 4.2 使用正则表达式的方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec" title="exec">exec</a></td>
<td>一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回null）。</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test" title="test">test</a></td>
<td>一个在字符串中测试是否匹配的RegExp方法，它返回true或false。</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match" title="match">match</a></td>
<td>一个在字符串中执行查找匹配的String方法，它返回一个数组或者在未匹配到时返回null。</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search" title="search">search</a></td>
<td>一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace" title="replace">replace</a></td>
<td>一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split" title="split">split</a></td>
<td>一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的String方法。</td>
</tr>
</tbody></table>
<p>当你想要知道在一个字符串中的一个匹配是否被找到，你可以使用test或search方法；想得到更多的信息（但是比较慢）则可以使用exec或match方法。如果你使用exec或match方法并且匹配成功了，那么这些方法将返回一个数组并且更新相关的正则表达式对象的属性和预定义的正则表达式对象（详见下）。如果匹配失败，那么exec方法返回null（也就是false）。</p>
<p>在接下来的例子中，脚本将使用exec方法在一个字符串中查找一个匹配</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myRe = <span class="regexp">/d(b+)d/g</span>;</span><br><span class="line"><span class="keyword">var</span> myArray = myRe.exec(<span class="string">&quot;cdbbdbsbz&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>如果你不需要访问正则表达式的属性，这个脚本通过另一个方法来创建myArray：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = <span class="regexp">/d(b+)d/g</span>.exec(<span class="string">&quot;cdbbdbsbz&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>如果你想通过一个字符串构建正则表达式，那么这个脚本还有另一种方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myRe = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;d(b+)d&quot;</span>, <span class="string">&quot;g&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> myArray = myRe.exec(<span class="string">&quot;cdbbdbsbz&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>通过这些脚本，匹配成功后将返回一个数组并且更新正则表达式的属性，如下表所示。</p>
<h4 id="表-4-3-正则表达式执行返回信息"><a href="#表-4-3-正则表达式执行返回信息" class="headerlink" title="表 4.3 正则表达式执行返回信息"></a>表 4.3 正则表达式执行返回信息</h4><table>
<thead>
<tr>
<th>对象</th>
<th>属性或索引</th>
<th>描述</th>
<th>在例子中对应的值</th>
</tr>
</thead>
<tbody><tr>
<td>myArray</td>
<td></td>
<td>匹配到的字符串和所有被记住的子字符串。</td>
<td><code>[&quot;dbbd&quot;, &quot;bb&quot;]</code></td>
</tr>
<tr>
<td></td>
<td>index</td>
<td>在输入的字符串中匹配到的以0开始的索引值。</td>
<td>``1`</td>
</tr>
<tr>
<td></td>
<td>input</td>
<td>初始字符串。</td>
<td><code>&quot;cdbbdbsbz&quot;</code></td>
</tr>
<tr>
<td></td>
<td>[0]</td>
<td>匹配到的所有字符串（并不是匹配后记住的字符串）。注：原文”The last matched characters.”，应该是原版错误。匹配到的最后一个字符索引。</td>
<td><code>&quot;dbbd&quot;</code></td>
</tr>
<tr>
<td>myRe</td>
<td>lastIndex</td>
<td>下一个匹配的索引值。（这个属性只有在使用g参数时可用在 通过参数进行高级搜索 一节有详细的描述.)</td>
<td><code>5</code></td>
</tr>
<tr>
<td></td>
<td>source</td>
<td>模式文本。在正则表达式创建时更新，不执行。</td>
<td><code>&quot;d(b+)d&quot;</code></td>
</tr>
</tbody></table>
<p>在这个例子中如第二种形式所示，你可以使用一个正则表达式创建一个没有分配给变量的对象初始化容器。如果你这样做，那么，每一次使用时都好比在使用一个新的正则表达式。因为这个原因，如果你使用这个未分配给一个变量的正则表达式，你将在随后不能访问这个正则表达式的属性。例如，假如你有如下脚本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myRe = <span class="regexp">/d(b+)d/g</span>;</span><br><span class="line"><span class="keyword">var</span> myArray = myRe.exec(<span class="string">&quot;cdbbdbsbz&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;The value of lastIndex is &quot;</span> + myRe.lastIndex);</span><br></pre></td></tr></table></figure>
<p>这个脚本输出如下：</p>
<p><code>The value of lastIndex is 5</code></p>
<p>然而，如果你有如下脚本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = <span class="regexp">/d(b+)d/g</span>.exec(<span class="string">&quot;cdbbdbsbz&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;The value of lastIndex is &quot;</span> + <span class="regexp">/d(b+)d/g</span>.lastIndex);</span><br></pre></td></tr></table></figure>
<p>它显示为：</p>
<p><code>The value of lastIndex is 0</code></p>
<p>当发生<code>/d(b+)d/g</code>使用两个不同状态的正则表达式对象，<code>lastIndex</code>属性会得到不同的值。如果你需要访问一个正则表达式的属性，则需要创建一个对象初始化生成器，你应该首先把它赋值给一个变量。<br>使用括号的子字符串匹配</p>
<p>一个正则表达式模式使用括号，将导致相应的子匹配被记住。例如，<code>/a(b)c /</code>可以匹配字符串<code>“abc”</code>，并且记得<code>“b”</code>。回调这些括号中匹配的子串，使用数组元素[1],……[n]。</p>
<p>使用括号匹配的子字符串的数量是无限的。返回的数组中保存所有被发现的子匹配。下面的例子说明了如何使用括号的子字符串匹配。</p>
<p>下面的脚本使用replace()方法来转换字符串中的单词。在匹配到的替换文本中，脚本使用替代的$ 1,$ 2表示第一个和第二个括号的子字符串匹配。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/(\w+)\s(\w+)/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;John Smith&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> newstr = str.replace(re, <span class="string">&quot;$2, $1&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newstr);</span><br></pre></td></tr></table></figure>
<p>这个表达式输出 <code>&quot;Smith, John&quot;</code>。</p>
<hr>
<h3 id="通过标志进行高级搜索"><a href="#通过标志进行高级搜索" class="headerlink" title="通过标志进行高级搜索"></a>通过标志进行高级搜索</h3><p>正则表达式有四个可选参数进行全局和不分大小写搜索。这些参数既可以单独使用也可以一起使用在任何顺序和包含正则表达式的部分中。</p>
<h4 id="正则表达式标志"><a href="#正则表达式标志" class="headerlink" title="正则表达式标志"></a>正则表达式标志</h4><table>
<thead>
<tr>
<th>标志</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>g</td>
<td>全局搜索。</td>
</tr>
<tr>
<td>i</td>
<td>不区分大小写搜索。</td>
</tr>
<tr>
<td>m</td>
<td>多行搜索。</td>
</tr>
<tr>
<td>y</td>
<td>执行“粘性”搜索,匹配从目标字符串的当前位置开始，可以使用y标志。</td>
</tr>
</tbody></table>
<p>包含一个标志的正则表达式，使用这个表达式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/pattern/</span>flags;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;pattern&quot;</span>, <span class="string">&quot;flags&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>值得注意的是，标志是一个正则表达式的一部分，它们在接下来的时间将不能添加或删除。</p>
<p>例如，<code>re = /\w+\s/g</code> 将创建一个查找一个或多个字符后有一个空格的正则表达式，或者组合起来像此要求的字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/\w+\s/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;fee fi fo fum&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> myArray = str.match(re);</span><br><span class="line"><span class="built_in">console</span>.log(myArray);</span><br></pre></td></tr></table></figure>
<p>这段代码将输出<code> [&quot;fee &quot;, &quot;fi &quot;, &quot;fo &quot;]</code>。在这个例子中，你可以将：</p>
<p><code>var re = /\w+\s/g;</code></p>
<p>替换成：</p>
<p><code>var re = new RegExp(&quot;\\w+\\s&quot;, &quot;g&quot;);</code></p>
<p>并且能获取到相同的结果。</p>
<p>m标志用于指定多行输入字符串应该被视为多个行。如果使用m标志，^和$匹配的开始或结束输入字符串中的每一行，而不是整个字符串的开始或结束。<br>例子<br>Edit</p>
<p>以下例子说明了一些正值表达式的用途。</p>
<h4 id="改变输入字符串的顺序"><a href="#改变输入字符串的顺序" class="headerlink" title="改变输入字符串的顺序"></a>改变输入字符串的顺序</h4><p>以下例子解释了正值表达式的构成和string.split() 以及 string.replace()的用途。它会整理一个只有粗略格式的含有全名（名字首先出现）的输入字符串，这个字符串被空格、换行符和一个分号分隔。最终，它会颠倒名字顺序（姓氏首先出现）和list的类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The name string contains multiple spaces and tabs,</span></span><br><span class="line"><span class="comment">// and may have multiple spaces between first and last names.</span></span><br><span class="line"><span class="keyword">var</span> names = <span class="string">&quot;Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ; Chris Hand &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> output = [<span class="string">&quot;---------- Original String\n&quot;</span>, names + <span class="string">&quot;\n&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prepare two regular expression patterns and array storage.</span></span><br><span class="line"><span class="comment">// Split the string into array elements.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pattern: possible white space then semicolon then possible white space</span></span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\s*;\s*/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Break the string into pieces separated by the pattern above and</span></span><br><span class="line"><span class="comment">// store the pieces in an array called nameList</span></span><br><span class="line"><span class="keyword">var</span> nameList = names.split(pattern);</span><br><span class="line"></span><br><span class="line"><span class="comment">// new pattern: one or more characters then spaces then characters.</span></span><br><span class="line"><span class="comment">// Use parentheses to &quot;memorize&quot; portions of the pattern.</span></span><br><span class="line"><span class="comment">// The memorized portions are referred to later.</span></span><br><span class="line">pattern = <span class="regexp">/(\w+)\s+(\w+)/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New array for holding names being processed.</span></span><br><span class="line"><span class="keyword">var</span> bySurnameList = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Display the name array and populate the new array</span></span><br><span class="line"><span class="comment">// with comma-separated names, last first.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The replace method removes anything matching the pattern</span></span><br><span class="line"><span class="comment">// and replaces it with the memorized string—second memorized portion</span></span><br><span class="line"><span class="comment">// followed by comma space followed by first memorized portion.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The variables $1 and $2 refer to the portions</span></span><br><span class="line"><span class="comment">// memorized while matching the pattern.</span></span><br><span class="line"></span><br><span class="line">output.push(<span class="string">&quot;---------- After Split by Regular Expression&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i, len;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, len = nameList.length; i &lt; len; i++)&#123;</span><br><span class="line">  output.push(nameList[i]);</span><br><span class="line">  bySurnameList[i] = nameList[i].replace(pattern, <span class="string">&quot;$2, $1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Display the new array.</span></span><br><span class="line">output.push(<span class="string">&quot;---------- Names Reversed&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, len = bySurnameList.length; i &lt; len; i++)&#123;</span><br><span class="line">  output.push(bySurnameList[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sort by last name, then display the sorted array.</span></span><br><span class="line">bySurnameList.sort();</span><br><span class="line">output.push(<span class="string">&quot;---------- Sorted&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, len = bySurnameList.length; i &lt; len; i++)&#123;</span><br><span class="line">  output.push(bySurnameList[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output.push(<span class="string">&quot;---------- End&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(output.join(<span class="string">&quot;\n&quot;</span>));</span><br></pre></td></tr></table></figure>
<h4 id="用特殊字符检验输入"><a href="#用特殊字符检验输入" class="headerlink" title="用特殊字符检验输入"></a>用特殊字符检验输入</h4><p>在以下例子中，我们期望用户输入一个电话号码。当用户点击“Check”按钮，我们的脚本开始检查这些数字是否合法。如果数字合法（匹配正值表达式所规定的字符序列），脚本显示一条感谢用户的信息并确认该数字。如果这串数字不合法，脚本提示用户电话号码不合法。.</p>
<p>包含非捕获括号 (?: 这个正值表达式寻找三个数字字符\d{3} 或者 | 一个左半括号(跟着三位数字\d{3}, 跟着一个封闭括号 ), (结束非捕获括号 ))， 后跟着一个短破折号或左斜杠或小数点，随后跟随三个数字字符，当记忆字符 ([-/.])捕获并记住，后面跟着三位小数 \d{3}，再后面跟随记住的左斜杠、右斜杠或小数点 \1，最后跟着四位小数 \d{4}。</p>
<p>当用户按下Enter设置RegExp.input，这些变化也能被激活。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=ISO-8859-1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Script-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> re = <span class="regexp">/(?:\d&#123;3&#125;|\(\d&#123;3&#125;\))([-\/\.])\d&#123;3&#125;\1\d&#123;4&#125;/</span>;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">testInfo</span>(<span class="params">phoneInput</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> OK = re.exec(phoneInput.value);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!OK)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">window</span>.alert(phoneInput.value + <span class="string">&#x27; isn\&#x27;t a phone number with area code!&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">else</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">window</span>.alert(<span class="string">&#x27;Thanks, your phone number is &#x27;</span> + OK[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Enter your phone number (with area code) and then click &quot;Check&quot;.</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span>The expected format is like ###-###-####.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;phone&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;testInfo(document.getElementById(&#x27;phone&#x27;));&quot;</span>&gt;</span>Check<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>Todo</code></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>JavaScript</tag>
        <tag>正则表达式语法</tag>
      </tags>
  </entry>
  <entry>
    <title>python --&gt; javascript 全栈指南</title>
    <url>/2019/06/14/%E4%BB%8E-python-%E5%88%B0-javascript-%E5%85%A8%E6%A0%88%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>你需要<a href="https://github.com/shadowsocks/shadowsocks-windows">科学上网</a>才能加载评论组件</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/kamranahmedse/developer-roadmap">developer-roadmap —— @github</a></li>
<li><a href="https://bop.mol.uno/04.about_python.html">简明python —— @gitbook</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/jobbole/awesome-javascript-cn">JavaScript 资源大全中文版，内容包括：包管理器、加载器、测试框架、运行器、QA、MVC框架和库、模板引擎等</a></li>
</ul>
<hr>
<h2 id="计算机是如何计算的-编译器是如何编译的"><a href="#计算机是如何计算的-编译器是如何编译的" class="headerlink" title="计算机是如何计算的,编译器是如何编译的"></a>计算机是如何计算的,编译器是如何编译的</h2><blockquote>
<p>从下而上的从想象中构建电子世界,<br>仰望前辈们欣勤建立的计算机大厦,<br>你会得到从上而下洞悉黑色盒子的能力,<br>你无法也不必关注太多的细节,<br>俯视电子世界,所有的电子河流都要回到电子海洋.</p>
</blockquote>
<span id="more"></span>

<p><a href="https://www.bilibili.com/video/av51948975">极简编译器原理 —— @bilibili 时长: 1小时</a></p>
<p>python 被 python 的解释器 Cpython(官方默认的解释器) 或者 PyPy(支持JIT) 转换成字节码<br>然后再由字节码虚拟机把字节码转换成机器语言</p>
<p><strong>python 人类可读的源代码 –&gt; 字节码 –&gt; 机器可读的机器语言</strong></p>
<p>JS 也是如此,<br>JS 被 JS 的解释器 v8(chrome浏览器和node的解释器,支持JIT) 转换成字节码<br>然后再由字节码虚拟机把字节码转换成机器语言</p>
<p><strong>javascript 人类可读的源代码 –&gt; 字节码 –&gt; 机器可读的机器语言</strong></p>
<h3 id="JS-与-node-与-python-语法比对"><a href="#JS-与-node-与-python-语法比对" class="headerlink" title="JS 与 node 与 python 语法比对"></a>JS 与 node 与 python 语法比对</h3><blockquote>
<p>毫无疑问, 这是比对学习法的最佳应用场景.</p>
</blockquote>
<p>在比对之前, 必须说明下, 什么是ES5, ES6.</p>
<p>JS 这门语言一直在持续更新, ECMAScript 是 JS 的语法标准,<br>你可以简单的理解为, ES5 是 python 2.x, ES6 是 python 3.x<br>现在普遍被浏览器所支持的版本是 ES5, 而 ES6 也已经被大多数现代浏览器所支持,<br>对于不支持 ES6 语法的浏览器, 我们可以通过 <a href="https://babeljs.io/">babel</a> 将其编译为 ES5,<br>而新添加的 API 则可以通过添加 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Polyfill">polyfill</a> 以兼容老旧的浏览器.</p>
<p>以下内容如果是 ES6 甚至是 ES7 版本的, 我会将其标注出来.</p>
<h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h4><p>python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>JS 与 node:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello World&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多行</span></span><br><span class="line"><span class="string">注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>JS 与 node:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 多行</span></span><br><span class="line"><span class="comment"> * 注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 局部变量</span></span><br><span class="line">value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局变量</span></span><br><span class="line"><span class="keyword">global</span> <span class="built_in">str</span> = <span class="string">&#x27;i\&#x27;m global string&#x27;</span></span><br></pre></td></tr></table></figure>

<p>JS 与 node:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 局部变量</span></span><br><span class="line"><span class="keyword">var</span> value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> value_0 = <span class="number">1</span> <span class="comment">// ES6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不可二次赋值的常量</span></span><br><span class="line"><span class="keyword">const</span> VALUE = <span class="number">1</span> <span class="comment">// ES6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 新增的解构赋值</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">2</span></span><br><span class="line"><span class="comment">// 简写为:</span></span><br><span class="line"><span class="keyword">const</span> [a, b, c] = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="built_in">window</span>.str = <span class="string">&#x27;i\&#x27;m global string in brower&#x27;</span> <span class="comment">// 在浏览器中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">global</span>.str = <span class="string">&#x27;i\&#x27;m global string in node&#x27;</span><span class="comment">// 在 node 中</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单行字符串</span></span><br><span class="line"><span class="string">&#x27;我是字符串&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行字符串</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">我是多行</span></span><br><span class="line"><span class="string">字符串</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>JS 与 node:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单行字符串</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;我是字符串&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多行字符串 (ES6, 这个符号通过 shift + ~打出)</span></span><br><span class="line"></span><br><span class="line"><span class="string">`我是多行</span></span><br><span class="line"><span class="string">字符串`</span></span><br></pre></td></tr></table></figure>

<h4 id="格式化方法-模板字符串"><a href="#格式化方法-模板字符串" class="headerlink" title="格式化方法(模板字符串)"></a>格式化方法(模板字符串)</h4><p>python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;World&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>)) <span class="comment"># &#x27;Hello World&#x27;</span></span><br></pre></td></tr></table></figure>

<p>JS 与 node:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;World&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;str&#125;</span>`</span>) <span class="comment">// &#x27;Hello World&#x27; (ES6)</span></span><br></pre></td></tr></table></figure>

<h4 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等于</span></span><br><span class="line">==</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不等</span></span><br><span class="line">!=</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 与</span></span><br><span class="line"><span class="keyword">and</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非</span></span><br><span class="line"><span class="keyword">not</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整除</span></span><br><span class="line">//</span><br></pre></td></tr></table></figure>

<p>JS 与 node:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等于</span></span><br><span class="line">===</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不等</span></span><br><span class="line">!==</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">||</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与</span></span><br><span class="line">&amp;&amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非</span></span><br><span class="line">!</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有整除符号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自增 自减</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">0</span> <span class="comment">// ES6</span></span><br><span class="line"></span><br><span class="line">n++ <span class="comment">// 是 n = n + 1 的简写</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(n) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h4 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h4><h5 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a><code>if</code> 语句</h5><p>python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">c = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a &gt; b&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> a &gt; c:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a &gt; c&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a &lt; b and a &lt; c&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单条 if</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> Ture:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;true&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>JS 与 node:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c] = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;a &gt; b&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; c)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;a &gt; c&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;a &lt; b and a &lt; c&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单条 if 可省略花括号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) <span class="built_in">console</span>.log(<span class="string">&#x27;true&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a><code>while</code> 语句</h5><p>python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> a &lt; b:</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第 &#123;&#125; 次循环&#x27;</span>.<span class="built_in">format</span>(a))</span><br></pre></td></tr></table></figure>

<p>JS 与 node:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">0</span> <span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">10</span> <span class="comment">// ES6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (a &lt; b) &#123;</span><br><span class="line">  a += <span class="number">1</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`第 <span class="subst">$&#123;a&#125;</span> 次循环`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a><code>for</code> 循环</h5><p>python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<p>JS 与 node:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// ES6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">of</span> arr) &#123; <span class="comment">// ES6</span></span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><p>python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>JS 与 node:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js 有三种写法...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say_hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> say_hello = <span class="function">() =&gt;</span> &#123; <span class="comment">// ES6 匿名箭头函数</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h5><p>python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">total</span>(<span class="params">a=<span class="number">5</span>, *numbers, **phonebook</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span>, a)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历元组中的所有项目</span></span><br><span class="line">    <span class="keyword">for</span> single_item <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;single_item&#x27;</span>, single_item)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历字典中的所有项目</span></span><br><span class="line">    <span class="keyword">for</span> first_part, second_part <span class="keyword">in</span> phonebook.items():</span><br><span class="line">        <span class="built_in">print</span>(first_part,second_part)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(total(<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,Jack=<span class="number">1123</span>,John=<span class="number">2231</span>,Inge=<span class="number">1560</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># a 10</span></span><br><span class="line"><span class="comment"># single_item 1</span></span><br><span class="line"><span class="comment"># single_item 2</span></span><br><span class="line"><span class="comment"># single_item 3</span></span><br><span class="line"><span class="comment"># Inge 1560</span></span><br><span class="line"><span class="comment"># John 2231</span></span><br><span class="line"><span class="comment"># Jack 1123</span></span><br><span class="line"><span class="comment"># None</span></span><br></pre></td></tr></table></figure>

<p>JS 与 node:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> total = <span class="function">(<span class="params">a = <span class="number">5</span>, phonebook, ...numbers</span>) =&gt;</span> &#123; <span class="comment">// ES6</span></span><br><span class="line">  <span class="comment">// ...numbers 是一个列表(数组),存储了所有剩余的参数: [1, 2, 3]</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>, a)</span><br><span class="line">  <span class="comment">// js 中没有元组 只有列表(数组)</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> single_item <span class="keyword">of</span> numbers) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;single_item&#x27;</span>, single_item)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历字典(对象)中的所有项目</span></span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">const</span> [first_part, second_part] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(phonebook)) &#123; <span class="comment">// ES6 的解构赋值</span></span><br><span class="line">    <span class="built_in">console</span>.log(first_part,second_part)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(total(<span class="number">10</span>, &#123;<span class="attr">Jack</span>: <span class="number">1123</span>,<span class="attr">John</span>: <span class="number">2231</span>, <span class="attr">Inge</span>: <span class="number">1560</span>&#125;, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// a 10</span></span><br><span class="line"><span class="comment">// VM331:6 single_item 1</span></span><br><span class="line"><span class="comment">// VM331:6 single_item 2</span></span><br><span class="line"><span class="comment">// VM331:6 single_item 3</span></span><br><span class="line"><span class="comment">// VM331:10 Jack 1123</span></span><br><span class="line"><span class="comment">// VM331:10 John 2231</span></span><br><span class="line"><span class="comment">// VM331:10 Inge 1560</span></span><br><span class="line"><span class="comment">// VM331:14 undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h5><p>python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n\nThe PYTHONPATH is&#x27;</span>, sys.path, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Square root of 16 is&quot;</span>, sqrt(<span class="number">16</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>JS 与 node:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 没有模块功能...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lodash <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; clone &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = lodash.clone(&#123;&#125;)</span><br><span class="line"><span class="keyword">const</span> obj_1 = clone(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// node</span></span><br><span class="line"><span class="keyword">const</span> os = required(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> release = required(<span class="string">&#x27;os&#x27;</span>).release</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="类"><a href="#类" class="headerlink" title="类"></a>类</h5><p>python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hi</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Hello, my name is&#x27;</span>, self.name)</span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&#x27;Swaroop&#x27;</span>)</span><br><span class="line">p.say_hi() <span class="comment"># Hello, my name is Swaroop</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>JS 与 node:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 没有类...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  say_hi () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello, my name is&#x27;</span>, <span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;Swaroop&#x27;</span>)</span><br><span class="line">p.say_hi() <span class="comment">// Hello, my name is Swaroop</span></span><br></pre></td></tr></table></figure>

<h5 id="深入理解"><a href="#深入理解" class="headerlink" title="深入理解"></a>深入理解</h5><p>以下两本通读一遍, 不要死记, 理解最重要</p>
<p><a href="http://javascript.ruanyifeng.com/#toc0">JavaScript 标准参考教程（alpha）(ES5语法: 1-5章节)</a><br><a href="http://es6.ruanyifeng.com/#README">ECMAScript 6 入门</a></p>
<hr>
<h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><ul>
<li><a href="https://github.com/FloatingShuYin/development-environment-manual">development-environment-manual —— @github 时长: 10分钟</a></li>
<li><a href="https://github.com/FloatingShuYin/development-environment-manual/blob/master/javascript.md">javascript 开发环境搭建(windows 10) —— @github 时长: 10分钟</a></li>
<li><a href="https://github.com/FloatingShuYin/development-environment-manual/blob/master/python.md">python 开发环境搭建(windows 10) —— @github 时长: 10分钟</a></li>
</ul>
<hr>
<h2 id="JS-与-node-以及-python-的运行环境"><a href="#JS-与-node-以及-python-的运行环境" class="headerlink" title="JS 与 node 以及 python 的运行环境"></a>JS 与 node 以及 python 的运行环境</h2><blockquote>
<p>上帝说: “要有光!”,于是,就有了光.</p>
</blockquote>
<h3 id="Node-JS-的结构"><a href="#Node-JS-的结构" class="headerlink" title="Node.JS 的结构"></a>Node.JS 的结构</h3><p><a href="https://segmentfault.com/a/1190000005892501">Node.JS 架构概览 —— @segmentfault 时长: 15分钟</a></p>
<p>JS 大多都运行在浏览器中,<br>而 node 就是 使用 JS 语法 的 python ,<br>node 和 python 都可以进行高权限的 io 操作, 因此可以在服务器上工作.</p>
<p>node 需要运行 JS 于是它集成了 v8 ,<br>node 需要异步 io 于是它集成了 libuv.<br>如此等等…</p>
<p>v8 和 libuv 这些都是什么? 它们都是一个个黑色的盒子,<br>你只需要在\需要了解它的时候\了解它.</p>
<h3 id="浏览器的结构"><a href="#浏览器的结构" class="headerlink" title="浏览器的结构"></a>浏览器的结构</h3><p><a href="https://www.infoq.cn/article/CS9-WZQlNR5h05HHDo1b">史上最全！图解浏览器的工作原理 —— @infoq 时长: 20分钟</a></p>
<p><a href="https://www.zybuluo.com/yangfch3/note/671516">浏览器内核、JS 引擎、页面呈现原理及其优化 —— @zybuluo 时长: 25分钟</a></p>
<p>chrome 浏览器需要渲染页面于是就集成了 webKit,<br>chrome 浏览器需要解析 XML 于是就集成了 libXML,<br>chrome 浏览器需要运行 JS 于是就集成了 v8.</p>
<p>如此等等…</p>
<p>没有太多的理由, 就像大地需要树, 于是大地就生长出了树.<br>树, 是一种优美的植物, 在电子世界里, 树, 是一种优美的数据结构.<br>它的层次之美,让它承载着茂盛的树冠.</p>
<p>这样华美的页面大概也只有树才能够支撑的起吧.</p>
<h3 id="浏览器中的树-HTML-CSS-JS"><a href="#浏览器中的树-HTML-CSS-JS" class="headerlink" title="浏览器中的树: HTML + CSS + JS"></a>浏览器中的树: HTML + CSS + JS</h3><p><a href="https://www.freecodecamp.cn/challenges/say-hello-to-html-element">HTML5 and CSS,边写边练,所见即所得,快速入门 —– @FreeCodeCamp 时长: 5小时</a><br><a href="https://www.imooc.com/learn/9">初识HTML+CSS —— @幕客网 时长: 9小时</a></p>
<blockquote>
<p>与生俱来的遗忘机制使我们没办法记住所有的细节,<br>而值得庆幸的是软件开发并不是一场愚蠢的闭卷考试.</p>
</blockquote>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element">HTML标签速查文档</a></li>
<li><a href="https://www.w3cschool.cn/html/dict">HTML标签速查文档-分类版</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference">CSS速查文档</a></li>
<li><a href="https://www.w3cschool.cn/css/dict">CSS速查文档-分类版</a></li>
</ul>
<blockquote>
<p>人们需要网页排版合理,有结构,于是就有了HTML.<br>人们需要网页华美绚丽,有色彩,于是就有了CSS.<br>人们需要网页动态活泼,有逻辑,于是就有了JS.</p>
</blockquote>
<p>HTML是一种 类XML数据结构, 它是树,它是浏览器中的树.</p>
<p>它最开始是这样的:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>它最后会成为你心中的样子,<br>HTML是树,<br>是你心中的树.</p>
<hr>
<h4 id="css-眼中的树"><a href="#css-眼中的树" class="headerlink" title="css 眼中的树"></a>css 眼中的树</h4><p>css眼中的树是方方正正的.</p>
<blockquote>
<p>CSS 装饰着 HTML 这株树, 成为了树的一部分.</p>
</blockquote>
<h5 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h5><p>css 总想改变树的样子,<br>它需要选择树的某一部分,<br>选择它,然后改变它.</p>
<p><a href="https://www.w3cschool.cn/css/dict">选择器全列表</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/50322177">前端杂谈: CSS 权重 (Specificity) @知乎 时长: 15分钟</a></p>
<h5 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h5><p><a href="https://zhuanlan.zhihu.com/p/59612287">盒子模型 —— @知乎 时长: 10分钟</a></p>
<p>建议使用 IE 盒子模型:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="块级格式化上下文-Block-Formatting-Context"><a href="#块级格式化上下文-Block-Formatting-Context" class="headerlink" title="块级格式化上下文(Block Formatting Context)"></a>块级格式化上下文(Block Formatting Context)</h5><p>我想你会喜欢这样的方块.</p>
<p><a href="https://juejin.im/post/59b73d5bf265da064618731d">学习 BFC (Block Formatting Context) —— @掘金 时长: 20分钟</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/64366441">css_11 | CSS——让“盒子”动起来：② “定位”和 BFC  @知乎 时长: 20分钟</a></p>
<h5 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h5><p><a href="http://zh.learnlayout.com/">学习 CSS 布局 —— @learnlayout 时长: 20分钟</a></p>
<h6 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h6><p><a href="https://flexboxfroggy.com/">FLEXBOX FROGGY: 超棒的 Flex 游戏交互式教程</a><br><a href="https://codepen.io/enxaneta/pen/adLPwv">直观感受 Flex Layout—— @codepen</a><br><a href="https://zhuanlan.zhihu.com/p/46684565">Flex —— @知乎 时长: 15分钟</a></p>
<h6 id="grid-布局"><a href="#grid-布局" class="headerlink" title="grid 布局"></a>grid 布局</h6><p><a href="https://cssgridgarden.com/">格子花园: 超棒的 Grid 游戏交互式教程</a></p>
<p><a href="https://codepen.io/MSEdgeDev/pen/mMQqZX">直观感受 CSS Grid Layout —— @codepen</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/46754464">轻松快速学习 Grid 布局 —— @知乎 时长: 15分钟</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/46757975">最全～ Grid vs Flex —— @知乎 时长: 15分钟</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/69809343">一行 css 代码搞定响应式布局 —— @知乎 时长: 15分钟</a></p>
<h5 id="重置默认样式"><a href="#重置默认样式" class="headerlink" title="重置默认样式"></a>重置默认样式</h5><p>由于各个浏览器会存在各不相同的默认 css 样式,<br>我们需要引入一个第三方库来让这些默认样式保持统一.</p>
<p><a href="https://necolas.github.io/normalize.css/">Normalize.css</a><br><a href="https://zhuanlan.zhihu.com/p/60816003">在 Normalize.css 基础上更进一步 ------@zhihu 时长: 5分钟</a></p>
<h5 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h5><p><a href="https://juejin.im/post/58f818bbb123db006233ab2a">16种方法实现水平居中垂直居中 —— @掘金 时长: 15分钟</a><br><a href="https://juejin.im/post/5b9a4477f265da0ad82bf921">CSS 实现水平垂直居中的1010种方式（史上最全）—— @掘金 时长: 15分钟</a></p>
<p>不考虑兼容性的话,<br>使用 flex 的方案最好,<br>这是标准方案.</p>
<h5 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h5><p><a href="https://www.jianshu.com/p/09bd5873bed4">CSS中的浮动和清除浮动 —— @简书 时长: 10分钟</a></p>
<h5 id="px、em、rem、-、vw、vh、vm"><a href="#px、em、rem、-、vw、vh、vm" class="headerlink" title="px、em、rem、%、vw、vh、vm"></a>px、em、rem、%、vw、vh、vm</h5><p><a href="https://zhuanlan.zhihu.com/p/66686493">px、em、rem、%、vw、vh、vm这些单位的区别 —— @知乎 时长: 5分钟</a></p>
<h5 id="CSS隐藏元素的几种方式及区别"><a href="#CSS隐藏元素的几种方式及区别" class="headerlink" title="CSS隐藏元素的几种方式及区别"></a>CSS隐藏元素的几种方式及区别</h5><p><a href="https://zhuanlan.zhihu.com/p/23977353">从隐藏元素谈起 —— @知乎 时长: 5分钟</a></p>
<h5 id="渐进增强与优雅降级"><a href="#渐进增强与优雅降级" class="headerlink" title="渐进增强与优雅降级"></a>渐进增强与优雅降级</h5><p><a href="https://www.zhihu.com/question/29634882">CSS选择 “渐进增强” 还是 “优雅降级”？ —— @知乎 时长: 5分钟</a><br><a href="https://www.zhangxinxu.com/wordpress/2010/09/%E9%9C%80%E8%AD%A6%E6%83%95css3%E5%B1%9E%E6%80%A7%E7%9A%84%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F/">需警惕CSS3属性的书写顺序</a></p>
<h5 id="CSS-代码规范"><a href="#CSS-代码规范" class="headerlink" title="CSS 代码规范"></a>CSS 代码规范</h5><blockquote>
<p>计算机科学中只有两个难题: 缓存失效和命名 ——Phil Karlton</p>
</blockquote>
<p><a href="http://getbem.com/naming/">CSS 命名规范</a><br><a href="https://github.com/ecomfe/spec/blob/master/css-style-guide.md">CSS 编码规范 —— @github 时长: 10分钟</a><br><a href="https://github.com/ikkou/awesome-css#architecture">Awesome CSS</a></p>
<hr>
<h4 id="JS-眼中的树"><a href="#JS-眼中的树" class="headerlink" title="JS 眼中的树"></a>JS 眼中的树</h4><p>JS 眼中的树是抽象的.</p>
<h5 id="DOM-Document-Object-Model"><a href="#DOM-Document-Object-Model" class="headerlink" title="DOM (Document Object Model)"></a>DOM (Document Object Model)</h5><p>浏览器把 HTML 这株树给抽象成了 DOM,<br>JS 通过调用 DOM 获得了 创建与毁灭 HTML 这株树的能力.</p>
<p><a href="http://javascript.ruanyifeng.com/#dom">DOM 模型 —— @JavaScript 标准参考教程（alpha）(第6章) 时长: 20分钟</a><br><a href="http://naotu.baidu.com/file/066f228731f401d54b19d033e660310d?token=c250785699717806">DOM 脑图</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/70671215">详解 HTML attribute 和 DOM property —— @知乎 时长: 15分钟</a></p>
<h5 id="CSSOM"><a href="#CSSOM" class="headerlink" title="CSSOM"></a>CSSOM</h5><p>浏览器把 HTML 树上的 CSS 给抽象成了 CSSOM,<br>JS 通过调用 CSSOM 获得了 修改 CSS 的能力.</p>
<p><a href="https://www.w3cplus.com/javascript/cssom-css-typed-om.html">初探CSS对象模型（CSSOM）—— @w3cplus 时长: 5分钟</a></p>
<h5 id="浏览器里的-JS-BOM-Brower-Object-Model"><a href="#浏览器里的-JS-BOM-Brower-Object-Model" class="headerlink" title="浏览器里的 JS, BOM (Brower Object Model)"></a>浏览器里的 JS, BOM (Brower Object Model)</h5><p>浏览器 把它自身 抽象成了 BOM,<br>JS 通过调用 BOM 获得了感知其载体——浏览器的能力.</p>
<p><a href="http://javascript.ruanyifeng.com/#bom">浏览器环境 —— @JavaScript 标准参考教程（alpha）(第7章) 时长: 20分钟</a></p>
<hr>
<h3 id="深入理解-JS-执行逻辑"><a href="#深入理解-JS-执行逻辑" class="headerlink" title="深入理解 JS 执行逻辑"></a>深入理解 JS 执行逻辑</h3><h4 id="调用堆栈"><a href="#调用堆栈" class="headerlink" title="调用堆栈"></a>调用堆栈</h4><p><a href="https://github.com/yygmind/blog">理解JavaScript 中的执行上下文和执行栈 —— @github</a></p>
<h4 id="作用域闭包"><a href="#作用域闭包" class="headerlink" title="作用域闭包"></a>作用域闭包</h4><p><a href="https://github.com/yygmind/blog">深入浅出图解作用域链和闭包 —— @github </a></p>
<h4 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h4><p><a href="https://github.com/yygmind/blog">JavaScript深入之史上最全–5种this绑定全面解析 —— @github</a></p>
<h4 id="深浅拷贝原理"><a href="#深浅拷贝原理" class="headerlink" title="深浅拷贝原理"></a>深浅拷贝原理</h4><p><a href="https://github.com/yygmind/blog">详细解析赋值、浅拷贝和深拷贝的区别 —— @github </a></p>
<h4 id="原型链与继承"><a href="#原型链与继承" class="headerlink" title="原型链与继承"></a>原型链与继承</h4><p>继承随便看看, 用 ES6 的 extend 关键字就好</p>
<p><a href="https://github.com/yygmind/blog">重新认识构造函数、原型和原型链 —— @github </a></p>
<h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><p><a href="https://github.com/yygmind/blog">JavaScript 高阶函数浅析 —— @github</a></p>
<h4 id="事件机制"><a href="#事件机制" class="headerlink" title="事件机制"></a>事件机制</h4><h4 id="事件循环-Event-Loop-以及-宏任务与微任务"><a href="#事件循环-Event-Loop-以及-宏任务与微任务" class="headerlink" title="事件循环(Event Loop) 以及 宏任务与微任务"></a>事件循环(Event Loop) 以及 宏任务与微任务</h4><p><a href="https://zhuanlan.zhihu.com/p/55511602">一次弄懂Event Loop —— @知乎 时长: 20分钟</a></p>
<h4 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h4><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><p><a href="https://zhuanlan.zhihu.com/p/24684803">这是一篇傻瓜都能看懂的Promises文章！—— @知乎 时长: 20分钟</a></p>
<h4 id="Async-Await原理"><a href="#Async-Await原理" class="headerlink" title="Async/Await原理"></a>Async/Await原理</h4><h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4><p><a href="https://infosec.mozilla.org/guidelines/web_security">Mozilla web security</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/45568315">前端安全系列之一：如何防止XSS攻击？ —— 知乎 时长: 25分钟</a><br><a href="https://zhuanlan.zhihu.com/p/46592479">前端安全系列之二：如何防止CSRF攻击？—— 知乎 时长: 40分钟</a></p>
<p><a href="https://github.com/OWASP/NodeGoat">了解OWASP十大安全风险,以及使用 node 的解决方案</a></p>
<h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><p><a href="https://zhuanlan.zhihu.com/p/67134654">最强前端性能优化，Google已经为你准备好了 —— @知乎 时长: 15分钟</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/52076790">你真的了解回流和重绘吗 —— @知乎 时长: 15分钟</a></p>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>跨域, 状态码， 请求头， 请求方法， Cookies 等都在这里</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/62191708">前端应该知道的 http 协议 —— @知乎 时长: 15分钟</a></li>
<li><a href="https://floatsyi.com/2019/11/28/TCP-IP-HTTP-QUIC-Axios/">TCP/IP, HTTP, QUIC, Axios</a></li>
</ul>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><ul>
<li><a href="https://floatsyi.com/2019/12/06/RESTful-API-and-GraphQL-API/">RESTful-API-and-GraphQL-API</a></li>
</ul>
<h2 id="版本管理-Git"><a href="#版本管理-Git" class="headerlink" title="版本管理: Git"></a>版本管理: Git</h2><p><a href="https://www.zhihu.com/question/20866683/answer/705180453">如何优雅地使用 Git？——  @知乎 时长: 5分钟</a><br><a href="http://iissnan.com/progit/">Pro Git简体中文版</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/69635847">如何配置 Git Commit Message ——  @知乎 时长: 10分钟</a></p>
<h2 id="升级的-css-预编译语言-sass-scss"><a href="#升级的-css-预编译语言-sass-scss" class="headerlink" title="升级的 css, 预编译语言: sass(scss)"></a>升级的 css, 预编译语言: sass(scss)</h2><h3 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h3><p><a href="https://juejin.im/post/5d70747cf265da03e16897c8">前端基础知识概述 – 移动端开发的屏幕、图像、字体与布局的兼容适配 —— @juejin 时长: 10分钟</a></p>
<p>让设计师根据 iphone 6 750px 的视口宽度设计 UI,</p>
<h4 id="REM-和-VM"><a href="#REM-和-VM" class="headerlink" title="REM 和 VM"></a>REM 和 VM</h4><p>非常好的一篇文章，还附带生产环境可用的代码</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/44599960">细说移动端 经典的REM布局 与 新秀VW布局</a></li>
</ul>
<p>使用以下 scss 适配代码,<br>此时设计图的 1px = 0.01rem.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: calc(<span class="number">100vw</span>/<span class="number">7.5</span>); <span class="comment">/* 当100vm = 750px时, font-size = 100px*/</span></span><br><span class="line">  <span class="attribute">font-size</span>: -webkit-calc(<span class="number">100vw</span>/<span class="number">7.5</span>);</span><br><span class="line">  -webkit-text-size-adjust: <span class="number">100%</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.16rem</span>; <span class="comment">/* 1rem = 100px */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 postcss 插件: postcss-px-to-viewport</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .postcssrc.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    <span class="string">&quot;postcss-px-to-viewport&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">viewportWidth</span>: <span class="number">750</span>, <span class="comment">// 视口宽度，这里设置为跟设计稿宽度一致；</span></span><br><span class="line">      <span class="attr">viewportHeight</span>: <span class="number">1334</span>, <span class="comment">// 视口高度</span></span><br><span class="line">      <span class="attr">unitPrecision</span>: <span class="number">3</span>, <span class="comment">// 转换后值的精度(小数位)</span></span><br><span class="line">      <span class="attr">viewportUnit</span>: <span class="string">&#x27;vw&#x27;</span>, <span class="comment">// 输出单位</span></span><br><span class="line">      <span class="attr">selectorBlackList</span>: [<span class="string">&#x27;.usepixel&#x27;</span>], <span class="comment">// 黑名单</span></span><br><span class="line">      <span class="attr">minPixelValue</span>: <span class="number">1</span>, <span class="comment">// 触发转换的最小值, 大于等于这个值才会转换</span></span><br><span class="line">      <span class="attr">mediaQuery</span>: <span class="literal">false</span> <span class="comment">// 是否转换媒体查询中的像素</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="升级的-JS-ES6"><a href="#升级的-JS-ES6" class="headerlink" title="升级的 JS: ES6"></a>升级的 JS: ES6</h2><p><a href="https://zhuanlan.zhihu.com/p/67492465">ES7 ES8 ES9 ES10 新特性总结思考 —— @知乎 时长: 15分钟</a></p>
<h2 id="在服务器运行的-JS-Node"><a href="#在服务器运行的-JS-Node" class="headerlink" title="在服务器运行的 JS: Node"></a>在服务器运行的 JS: Node</h2><h3 id="node-的事件循环-Event-Loop"><a href="#node-的事件循环-Event-Loop" class="headerlink" title="node 的事件循环(Event Loop)"></a>node 的事件循环(Event Loop)</h3><ul>
<li><a href="https://zhuanlan.zhihu.com/p/55511602">一次弄懂Event Loop</a></li>
</ul>
<h3 id="node-的-pip-npm-node-package-manager"><a href="#node-的-pip-npm-node-package-manager" class="headerlink" title="node 的 pip: npm (node package manager)"></a>node 的 pip: npm (node package manager)</h3><ul>
<li><a href="https://floatsyi.com/2019/10/30/node-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-npm-%E4%B8%8E-yarn/">node 包管理工具: npm 与 yarn</a></li>
</ul>
<h3 id="Node-js技术栈"><a href="#Node-js技术栈" class="headerlink" title="Node.js技术栈"></a>Node.js技术栈</h3><ul>
<li><a href="https://www.nodejs.red/">《Node.js技术栈》</a></li>
</ul>
<h2 id="有类型的-JS-TypeScript"><a href="#有类型的-JS-TypeScript" class="headerlink" title="有类型的 JS: TypeScript"></a>有类型的 JS: TypeScript</h2><p><a href="https://floatsyi.com/2019/10/07/%E6%9C%89%E7%B1%BB%E5%9E%8B%E7%9A%84-javascript-typescript/">有类型的 JS: TypeScript</a></p>
<h3 id="JS-代码规范"><a href="#JS-代码规范" class="headerlink" title="JS 代码规范"></a>JS 代码规范</h3><ul>
<li><a href="https://juejin.im/entry/5a02d18d6fb9a045076f178e">你可能不知道的 JavaScript 代码规范 —— 掘金 时长: 10分钟</a></li>
<li><a href="https://floatsyi.com/2019/09/26/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/">代码规范与项目结构</a></li>
</ul>
<h3 id="工程化的前端-打包工具-webpack"><a href="#工程化的前端-打包工具-webpack" class="headerlink" title="工程化的前端, 打包工具: webpack"></a>工程化的前端, 打包工具: webpack</h3><h3 id="前端的三架马车"><a href="#前端的三架马车" class="headerlink" title="前端的三架马车"></a>前端的三架马车</h3><h4 id="渐进式框架-Vue"><a href="#渐进式框架-Vue" class="headerlink" title="渐进式框架: Vue"></a>渐进式框架: Vue</h4><ul>
<li><a href="https://cn.vuejs.org/v2/guide/">Vue 官网</a></li>
</ul>
<h5 id="vue-cli3"><a href="#vue-cli3" class="headerlink" title="vue-cli3"></a>vue-cli3</h5><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><h6 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h6><p><a href="https://zhuanlan.zhihu.com/p/48758013">一篇文章学会 Vue 项目单元测试 ——  @知乎 时长: 20分钟</a></p>
<h4 id="用于构建用户界面的JavaScript库-React-JS"><a href="#用于构建用户界面的JavaScript库-React-JS" class="headerlink" title="用于构建用户界面的JavaScript库: React.JS"></a>用于构建用户界面的JavaScript库: React.JS</h4><ul>
<li><a href="https://github.com/adam-golab/react-developer-roadmap">react-developer-roadmap</a></li>
<li><a href="https://floatsyi.com/2020/02/02/A-JavaScript-library-for-building-user-interfaces-React/">A JavaScript library for building user interfaces: React</a></li>
</ul>
<h5 id="css-in-js"><a href="#css-in-js" class="headerlink" title="css in js"></a>css in js</h5><ul>
<li><a href="https://github.com/styled-components/styled-components">styled-components</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/26878157">精读《请停止 css-in-js 的行为》</a> 2017 年的文章， 请注意时效性！！！</li>
</ul>
<h5 id="css-modules"><a href="#css-modules" class="headerlink" title="css modules"></a>css modules</h5><ul>
<li><a href="https://github.com/css-modules/css-modules">css modules</a></li>
<li><a href="https://create-react-app.dev/docs/adding-a-css-modules-stylesheet">adding-a-css-modules-stylesheet</a></li>
</ul>
<h4 id="大而全的-angular8"><a href="#大而全的-angular8" class="headerlink" title="大而全的: angular8"></a>大而全的: angular8</h4><h4 id="服务端渲染-SSR"><a href="#服务端渲染-SSR" class="headerlink" title="服务端渲染 SSR"></a>服务端渲染 SSR</h4><h4 id="MVC-与-MVP-与-MVVM"><a href="#MVC-与-MVP-与-MVVM" class="headerlink" title="MVC 与 MVP 与 MVVM"></a>MVC 与 MVP 与 MVVM</h4><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><h4 id="Ramda-JS"><a href="#Ramda-JS" class="headerlink" title="Ramda.JS"></a>Ramda.JS</h4><p>……</p>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript !!!"></a>JavaScript !!!</h2><blockquote>
<p>任何可以用 JavaScript 来写的应用，最终都将用 JavaScript 来写.</p>
</blockquote>
<h3 id="node-后端框架-express-koa2-nest"><a href="#node-后端框架-express-koa2-nest" class="headerlink" title="node 后端框架: express, koa2, nest"></a>node 后端框架: express, koa2, nest</h3><h3 id="使用-JavaScript-HTML-和-CSS-构建跨平台的桌面应用-Electron"><a href="#使用-JavaScript-HTML-和-CSS-构建跨平台的桌面应用-Electron" class="headerlink" title="使用 JavaScript, HTML 和 CSS 构建跨平台的桌面应用: Electron"></a>使用 JavaScript, HTML 和 CSS 构建跨平台的桌面应用: Electron</h3><h3 id="使用-JavaScript-和-React-编写原生移动应用-React-Native"><a href="#使用-JavaScript-和-React-编写原生移动应用-React-Native" class="headerlink" title="使用 JavaScript 和 React 编写原生移动应用: React Native"></a>使用 JavaScript 和 React 编写原生移动应用: React Native</h3><h3 id="万物互联-IoT-JS"><a href="#万物互联-IoT-JS" class="headerlink" title="万物互联: IoT.JS"></a>万物互联: IoT.JS</h3><h3 id="深度学习-TensorFlow-JS"><a href="#深度学习-TensorFlow-JS" class="headerlink" title="深度学习: TensorFlow.JS"></a>深度学习: TensorFlow.JS</h3>]]></content>
      <categories>
        <category>文档</category>
        <category>python 至 JS</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python 至 JS</tag>
      </tags>
  </entry>
  <entry>
    <title>转型计划之初级后端(上)</title>
    <url>/2019/12/30/%E8%BD%AC%E5%9E%8B%E8%AE%A1%E5%88%92%E4%B9%8B%E5%88%9D%E7%BA%A7%E5%90%8E%E7%AB%AF-%E4%B8%8A/</url>
    <content><![CDATA[<p><img src="http://r.photo.store.qq.com/psc?/V12iDrZG1mzmnh/uMeul31pGB4ZvQm8Ou4xcfNn6PH6nDxmpAL9WP9RUJDaZcEhN6sEkwolkEuOlV3ELeE6lJvdAHyvM181ewfdQrJsvT91wgMwlBZmm2R.K7M!/r" alt="this is the way"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://iissnan.com/progit/">pro git</a></li>
<li><a href="https://nodejs.org/api/index.html">node api</a></li>
<li><a href="https://www.npmjs.com/">npm</a></li>
<li><a href="http://es6.ruanyifeng.com/#README">ECMAScript 6 入门</a></li>
<li><a href="http://expressjs.com/en/4x/api.html">express 4.x api</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/76796394">数据库设计规范（三大范式）</a></li>
<li><a href="https://juejin.im/post/5d68dff55188255b0600538e">MySQL数据库设计规范</a></li>
<li><a href="https://www.lucidchart.com/pages/er-diagrams#discovery__top">What is an Entity Relationship Diagram (ERD)?</a></li>
<li><a href="https://floatsyi.com/2019/10/31/SQL-%E8%AF%AD%E6%B3%95%E4%B8%80%E8%A7%88/">SQL 语法一览</a></li>
<li><a href="https://floatsyi.com/2019/12/06/RESTful-API-and-GraphQL-API/">RESTful-API-and-GraphQL-API</a></li>
<li><a href="https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore">You-Dont-Need-Lodash-Underscore</a></li>
<li><a href="https://floatsyi.com/2019/12/29/The-Package-Manager-for-Windows-choco-and-scoop/">The Package Manager for Windows: choco and scoop</a></li>
<li><a href="https://github.com/FloatingShuYin/development-environment-manual">development-environment-manual</a></li>
<li><a href="https://github.com/petkaantonov/bluebird">bluebird</a></li>
<li><a href="https://www.zhihu.com/question/25413141/answer/30767780">nodejs异步控制「co、async、Q 、『es6原生promise』、then.js、bluebird」有何优缺点？最爱哪个？哪个简单？</a></li>
<li><a href="https://www.zhihu.com/question/39571954">ES next中async/await proposal实现原理是什么？</a></li>
<li><a href="https://floatsyi.com/2019/11/28/TCP-IP-HTTP-QUIC-Axios/">TCP-IP-HTTP-QUIC-Axios</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/topcoder-platform/resources-api">resources-api</a></li>
<li><a href="https://github.com/topcoder-platform/submissions-api">submissions-api</a></li>
<li><a href="https://github.com/topcoder-platform/challenge-api">challenge-api</a></li>
<li><a href="https://www.draw.io/">draw.io</a></li>
<li><a href="https://github.com/nodejs/node">nodejs</a></li>
<li><a href="https://github.com/sequelize/sequelize">sequelize</a></li>
<li><a href="https://github.com/mapbox/node-sqlite3">sqlite3</a></li>
<li><a href="https://github.com/microsoft/TypeScript">typescript</a></li>
<li><a href="https://github.com/nestjs/nest">nestjs</a></li>
<li><a href="https://github.com/typeorm/typeorm">typeorm</a></li>
<li><a href="https://github.com/mysqljs/mysql">mysql</a></li>
<li><a href="https://github.com/topics/docker">docker</a></li>
<li><a href="https://github.com/lukesampson/scoop">scoop</a></li>
<li><a href="https://github.com/jaredpalmer/backpack">backpack</a></li>
<li><a href="https://www.getpostman.com/">postman</a></li>
<li><a href="https://github.com/kentcdodds/cross-env">cross-env</a></li>
<li><a href="https://github.com/petkaantonov/bluebird">bluebird</a></li>
<li><a href="https://github.com/hapijs/joi">joi</a></li>
<li><a href="https://github.com/expressjs/cors">cors</a></li>
<li><a href="https://github.com/lorenwest/node-config">config</a></li>
<li><a href="https://github.com/enricomarino/is">is</a></li>
<li><a href="https://github.com/lodash/lodash">lodash</a></li>
<li><a href="https://github.com/adaltas/node-http-status">HttpStatus</a></li>
<li><a href="https://github.com/expressjs/body-parser">bodyParser</a></li>
<li><a href="https://github.com/expressjs/express">express</a></li>
</ul>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前在 topcoder 写前端混过一段时间，对找真实世界的项目代码进行 Dissect 算是有点经验，<br>对着这个 ’蹭‘ 来的真实项目 Dissect 一番， 实践经验这都不是事。<br>这篇文章就是记录 Dissect 与 Refactor 过程的些许经验。</p>
<blockquote>
<p>This is the way</p>
</blockquote>
<p>首先要记录的是， topcoder 上的项目（以下简称： 项目）开发流程。<br>项目开发流程分为以下四个阶段：</p>
<ol>
<li>设计阶段</li>
<li>开发阶段</li>
<li>review 阶段</li>
<li>反馈阶段</li>
</ol>
<p>具体流程是：<br>先是某些组织（公司）在 topcoder 上发布需求文档， 然后 topcoder 上的设计人员根据需求文档设计开发所需的设计文档，<br>这些设计文档一般是 <code>ER Diagram.png</code> （ER 图） 和 <code>swagger.yaml</code>（api 文档），（前端项目的设计文档会有所不同） 此为设计阶段。<br>然后开发人员再根据这些设计文档以及需求文档所要求的技术栈，完成项目的编码阶段，<br>编码完成后需要将使用的 <a href="https://www.getpostman.com/">postman</a> 导出为 json 文档方便评审人员导入测试， 还需要编写 <code>Verification.md</code> （告知评审人员如何验证项目的文档） 此为开发阶段。<br>开发完成后再交由评审人员评审， 此为 review 阶段。<br>review 完成后， 如有要修改的地方则开发人员响应要求进行修改， 如此这般这个项目就算是完成。 此为反馈阶段。</p>
<p>这样一套流程下来， 才是真正的流水线工程， 职责分明， 分工明确， 所以效率很高。<br>这让我想起了 DDD (Domain-Driven Design 领域驱动设计)， 说不得那些发布在 topcoder 上的需求文档就是领域层处理后的产物。<br>与那牢厂所谓的狼性文化一对比， 呵呵。</p>
<p>我之所以能了解的如此细节， 正是因为我 ‘蹭’ 到了一份源码， 由于保密协议不方便透露业务实现细节，不过框架的选型与应用都是开源的，<br>这个项目使用的是 <a href="https://github.com/nodejs/node">nodejs</a> + <a href="https://github.com/expressjs/express">express</a> + <a href="https://github.com/sequelize/sequelize">sequelize</a> + <a href="https://github.com/mapbox/node-sqlite3">sqlite3</a><br>我会对这份 ‘蹭’ 到源码进行一些 ‘优化’， 并使用 <a href="https://github.com/microsoft/TypeScript">typescript</a> + <a href="https://github.com/nestjs/nest">nestjs</a> + <a href="https://github.com/typeorm/typeorm">typeorm</a> + <a href="https://github.com/mysqljs/mysql">mysql</a> +  <a href="https://github.com/topics/docker">docker</a> 进行重构，<br>以此来积累我的实践经验， 所以这篇文章就是我对其操作过程的一些笔记.</p>
<p>除了这个项目外， 我在 <a href="https://github.com/topcoder-platform?utf8=%E2%9C%93&q=api&type=&language=">topcoder 团队的 github 帐号</a> 下找到了以下几个开源的项目</p>
<ul>
<li><a href="https://github.com/topcoder-platform/resources-api">resources-api</a></li>
<li><a href="https://github.com/topcoder-platform/submissions-api">submissions-api</a></li>
<li><a href="https://github.com/topcoder-platform/challenge-api">challenge-api</a></li>
</ul>
<p>除了 ORM 框架与数据库外， 项目架构与我手中的这个， 几乎是相同的。</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>理解最重要， 切记切记</p>
<ul>
<li><a href="http://iissnan.com/progit/">pro git</a></li>
<li><a href="https://nodejs.org/api/index.html">node api</a></li>
<li><a href="http://es6.ruanyifeng.com/#README">ECMAScript 6 入门</a></li>
<li><a href="http://expressjs.com/en/4x/api.html">express 4.x api</a></li>
<li><a href="https://floatsyi.com/2019/10/31/SQL-%E8%AF%AD%E6%B3%95%E4%B8%80%E8%A7%88/">SQL 语法一览</a></li>
<li><a href="https://floatsyi.com/2019/12/06/RESTful-API-and-GraphQL-API/">RESTful-API-and-GraphQL-API</a></li>
</ul>
<h3 id="数据库设计规范"><a href="#数据库设计规范" class="headerlink" title="数据库设计规范"></a>数据库设计规范</h3><ul>
<li><a href="https://zhuanlan.zhihu.com/p/76796394">数据库设计规范（三大范式）</a></li>
<li><a href="https://juejin.im/post/5d68dff55188255b0600538e">MySQL数据库设计规范</a></li>
</ul>
<h4 id="ER-图"><a href="#ER-图" class="headerlink" title="ER 图"></a>ER 图</h4><ul>
<li><a href="https://www.lucidchart.com/pages/er-diagrams#discovery__top">What is an Entity Relationship Diagram (ERD)?</a></li>
<li><a href="https://www.guru99.com/er-diagram-tutorial-dbms.html">ER Diagram Tutorial in DBMS (with Example)</a></li>
</ul>
<p><img src="http://r.photo.store.qq.com/psc?/V12iDrZG1mzmnh/uMeul31pGB4ZvQm8Ou4xcaRVpfX5ekMLRP1NO3UzcOtSinGLIYySvXtpHNU..T5OgpasN5XUMfnLyySQt14FsWEs6z0OiX*WtpYpq1ISUvs!/r" alt="erd"><br><img src="http://r.photo.store.qq.com/psc?/V12iDrZG1mzmnh/uMeul31pGB4ZvQm8Ou4xcSzA3AUqoeFeZKXB6KxdQW4EZJdUds4NVsARcOto6Jc406Ic*XiTZULsKOOa.YFM1mAhVCamWP*7Xjkgtv4gOC0!/r" alt="ies"></p>
<h5 id="ER-图设计工具"><a href="#ER-图设计工具" class="headerlink" title="ER 图设计工具"></a>ER 图设计工具</h5><ul>
<li><a href="https://www.draw.io/">draw.io</a></li>
<li><a href="https://www.lucidchart.com/pages/">Lucidchart</a></li>
<li><a href="https://www.freedgo.com/">freedgo</a></li>
</ul>
<h2 id="Dissect"><a href="#Dissect" class="headerlink" title="Dissect"></a>Dissect</h2><p>Dissect 一个别人写的项目其实是比较枯燥的， 所以顺便做一些改动， 在证明自己真的读懂了之外， 添增些许乐趣， 让自己有兴趣持续做下去也算很重要的事情。</p>
<p>这里以 <a href="https://github.com/topcoder-platform/challenge-api">challenge-api</a> 为例</p>
<p>Dissect 一个 node 项目的步骤如下：</p>
<ol>
<li>读 package.json devDependencies 和 dependencies， 然后在 <a href="https://www.npmjs.com/">npm</a> 依个检索， 搞清楚这些依赖包都是做什么的<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;topcoder-challenges-api&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;TopCoder Challenges V5 API&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;app.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;node app.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;standard&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lint:fix&quot;</span>: <span class="string">&quot;standard --fix&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;init-es&quot;</span>: <span class="string">&quot;node src/init-es.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;init-db&quot;</span>: <span class="string">&quot;node src/init-db.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sync-es&quot;</span>: <span class="string">&quot;node src/scripts/sync-es.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;drop-tables&quot;</span>: <span class="string">&quot;node src/scripts/drop-tables.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;create-tables&quot;</span>: <span class="string">&quot;node src/scripts/create-tables.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;seed-tables&quot;</span>: <span class="string">&quot;node src/scripts/seed-tables.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;view-data&quot;</span>: <span class="string">&quot;node src/scripts/view-data.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;view-es-data&quot;</span>: <span class="string">&quot;node src/scripts/view-es-data.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;mocha --require test/prepare.js -t 20000 test/unit/*.test.js --exit&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;e2e&quot;</span>: <span class="string">&quot;mocha --require test/prepare.js -t 20000 test/e2e/*.test.js --exit&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test:cov&quot;</span>: <span class="string">&quot;nyc --reporter=html --reporter=text npm test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;e2e:cov&quot;</span>: <span class="string">&quot;nyc --reporter=html --reporter=text npm run e2e&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;TCSCODER&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;chai&quot;</span>: <span class="string">&quot;^4.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;chai-http&quot;</span>: <span class="string">&quot;^4.2.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;mocha&quot;</span>: <span class="string">&quot;^6.1.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;mocha-prepare&quot;</span>: <span class="string">&quot;^0.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;nyc&quot;</span>: <span class="string">&quot;^14.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;standard&quot;</span>: <span class="string">&quot;^12.0.1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;aws-sdk&quot;</span>: <span class="string">&quot;^2.466.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;axios&quot;</span>: <span class="string">&quot;^0.19.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;bluebird&quot;</span>: <span class="string">&quot;^3.5.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;body-parser&quot;</span>: <span class="string">&quot;^1.15.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;config&quot;</span>: <span class="string">&quot;^3.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cors&quot;</span>: <span class="string">&quot;^2.7.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dynamoose&quot;</span>: <span class="string">&quot;^1.8.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;elasticsearch&quot;</span>: <span class="string">&quot;^16.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;express&quot;</span>: <span class="string">&quot;^4.15.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;express-fileupload&quot;</span>: <span class="string">&quot;^1.1.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;express-interceptor&quot;</span>: <span class="string">&quot;^1.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;get-parameter-names&quot;</span>: <span class="string">&quot;^0.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;http-aws-es&quot;</span>: <span class="string">&quot;^6.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;http-status-codes&quot;</span>: <span class="string">&quot;^1.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;joi&quot;</span>: <span class="string">&quot;^14.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;jsonwebtoken&quot;</span>: <span class="string">&quot;^8.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lodash&quot;</span>: <span class="string">&quot;^4.17.11&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;moment&quot;</span>: <span class="string">&quot;^2.24.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tc-core-library-js&quot;</span>: <span class="string">&quot;appirio-tech/tc-core-library-js.git#v2.6.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;topcoder-bus-api-wrapper&quot;</span>: <span class="string">&quot;topcoder-platform/tc-bus-api-wrapper.git&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;uuid&quot;</span>: <span class="string">&quot;^3.3.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;winston&quot;</span>: <span class="string">&quot;^3.1.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;standard&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;ignore&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;mock-api&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;env&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;mocha&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;engines&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;node&quot;</span>: <span class="string">&quot;10.x&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>从这一行 <code>&quot;standard&quot;: &quot;^12.0.1&quot;</code> 就可以看出这个作者是很有品味的人， 这样的话， 代码规范就不用改了<br>看到这一行 <code>&quot;lodash&quot;: &quot;^4.17.11&quot;</code>, 我就知道有可以改动的地方了，原因在这里，<a href="https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore">You-Dont-Need-Lodash-Underscore</a><br>其实也不是什么大问题， 但是<strong>丑</strong>啊！</p>
<ol start="2">
<li><p>继续读 package.json， 这次是读 script 部分， 找到项目的入口文件, 然后读入口文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;node app.js&quot;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>入口文件太长就不贴了， 贴个链接: <a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/app.js">https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/app.js</a><br>可以看出这是一个原生 ES5 项目, 其实对于这样的项目 ES5 完全足够了， 但是没 ES6 <strong>好看</strong> 啊！！</p>
</li>
<li><p>这一步是读 README.md 文档， 按照文档要求确保开发环境符合要求， 快速搭建 node 开发环境请参考: <a href="https://github.com/FloatingShuYin/development-environment-manual">development-environment-manual</a><br>确保环境符合要后就把项目 git clone 到本地<br>然后先 <code>npm install</code> 安装依赖，再 <code>npm run start</code> 确保项目是可以运行起来的。</p>
</li>
<li><p>这一步是看 Verification.md 文档， 假想自己是评审人员需要评审这个项目一样，<br>先把项目评审一下， 了解项目的功能有哪些， 这对接下来的深入源码很有帮助。<br>在这一步我发现需要将 <a href="https://www.getpostman.com/">postman</a> json 文件导入 <a href="https://www.getpostman.com/">postman</a> 来测试 api， 所以需要先下载一个 <a href="https://www.getpostman.com/">postman</a><br><code>scoop install postman</code> 然后打开 <a href="https://www.getpostman.com/">postman</a> 将 docs 目录下的 <a href="https://www.getpostman.com/">postman</a> json 文件导入进去<br>这里用到了 scoop 包管理器， 安装请参考:  <a href="https://floatsyi.com/2019/12/29/The-Package-Manager-for-Windows-choco-and-scoop/">The Package Manager for Windows: choco and scoop</a> 使用则请读 scoop 官网文档: <a href="https://github.com/lukesampson/scoop">scoop</a>。</p>
</li>
<li><p>上面阅读 package.json 确认了两个可以更改的地方<br>一个是要将其改成 ES6 项目， 一个是要去除 lodash 依赖。</p>
</li>
</ol>
<h3 id="ES5-gt-ES6-lodash"><a href="#ES5-gt-ES6-lodash" class="headerlink" title="ES5 -&gt; ES6 lodash"></a>ES5 -&gt; ES6 <del>lodash</del></h3><p>我现在使用的 node 版本是最新的长期支持版本 12.14.0， node 在 13.2.0 版本开始支持不带标志的 ES modules，<br>但是，该实现仍是实验性的， 具体请看： <a href="https://nodejs.org/api/esm.html#esm_ecmascript_modules">https://nodejs.org/api/esm.html#esm_ecmascript_modules</a></p>
<p>因此我要使用 ES6 的话， 首先要下载一个 <a href="https://github.com/jaredpalmer/backpack">backpack</a> 库来帮我编译 ES modules 到 CommonJS.<br><a href="https://github.com/jaredpalmer/backpack">backpack</a>  就是将前端的 webpack 应用到了后端。 先将 <a href="https://github.com/jaredpalmer/backpack">backpack</a> README.MD 文档 读一遍 顺便点个 star<br>然后就可以开始使用了：</p>
<ol>
<li><p>首先将其安装到开发时依赖 <code>npm install backpack -D</code></p>
</li>
<li><p>然后 touch 一个 backpack.config.js 配置文件<br>touch 是 liunx 系统下新建文件的命令， 在 windows 系统中需要使用 <a href="https://github.com/lukesampson/scoop">scoop</a> 安装 touch <code>scoop install touch</code><br><code>touch backpack.config.js</code> 如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> paths = &#123;</span><br><span class="line">  <span class="attr">development</span>: <span class="string">&#x27;./app.js&#x27;</span>,</span><br><span class="line">  <span class="attr">production</span>: <span class="string">&#x27;./app.js&#x27;</span>,</span><br><span class="line">  <span class="attr">initDB</span>: <span class="string">&#x27;./src/init-db.js&#x27;</span>,</span><br><span class="line">  <span class="attr">testData</span>: <span class="string">&#x27;./src/test-data.js&#x27;</span>,</span><br><span class="line">  <span class="attr">viewData</span>: <span class="string">&#x27;./src/view-data.js&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mainPath = paths[process.env.NODE_ENV_PRIVATE]</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">webpack</span>: <span class="function">(<span class="params">config, options, webpack</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Perform customizations to config</span></span><br><span class="line">    <span class="comment">// Important: return the modified config</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// changes the name of the entry point from index -&gt; main.js</span></span><br><span class="line">    config.entry.main = [mainPath]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改 package.json script 如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;start&quot;</span>: <span class="string">&quot;npm run dev&quot;</span>,</span><br><span class="line"><span class="string">&quot;dev&quot;</span>: <span class="string">&quot;cross-env NODE_ENV_PRIVATE=development backpack dev&quot;</span>,</span><br><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;cross-env NODE_ENV_PRIVATE=production backpack build&quot;</span>,</span><br><span class="line"><span class="string">&quot;init-db&quot;</span>: <span class="string">&quot;cross-env NODE_ENV_PRIVATE=initDB backpack dev&quot;</span>,</span><br><span class="line"><span class="string">&quot;test-data&quot;</span>: <span class="string">&quot;cross-env NODE_ENV_PRIVATE=testData backpack dev&quot;</span>,</span><br><span class="line"><span class="string">&quot;view-data&quot;</span>: <span class="string">&quot;cross-env NODE_ENV_PRIVATE=viewData backpack dev&quot;</span>,</span><br></pre></td></tr></table></figure>
<p>这里我们需要使用环境变量来切换入口文件， 所以需要下载一个可以跨平台的设置环境变量的命令行工具: <a href="https://github.com/kentcdodds/cross-env">cross-env</a><br>添加一个开发依赖： <code>npm install cross-env -D</code></p>
</li>
<li><p>现在可以在项目中使用 ES6 Modules 了， 可以一边读代码一边修改<br>如： 在入口文件 app.js 中 将 <code>require(&#39;./app-bootstrap&#39;)</code> 改为 <code>import &#39;./app-bootstrap&#39;</code><br>这是 <a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/app.js#L5:1">app.js</a> 第一行代码， 它执行了当前目录下的app-bootstrap.js， 顾名思义， 这是一个初始化项目的文件。<br>打开 <a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/app-bootstrap.js">app-bootstrap.js</a> 内容如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> bluebird <span class="keyword">from</span> <span class="string">&#x27;bluebird&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Joi <span class="keyword">from</span> <span class="string">&#x27;joi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">global</span>.Promise = bluebird</span><br><span class="line">Joi.id = <span class="function">() =&gt;</span> Joi.string().required()</span><br></pre></td></tr></table></figure>
<p>可以看到这里声明了一个全局变量 Promise 并指向了导入的 <a href="https://github.com/petkaantonov/bluebird">bluebird</a> 库<br>看样子这是一个实现了 Promise 的库， 一开始我准备将其删掉， 因为我已经使用 <a href="https://github.com/jaredpalmer/backpack">backpack</a> 将这个项目改为 ES6 项目了<br>而 ES6 有原生实现的 Promise 了， 没必要再引入这个第三方 <a href="https://github.com/petkaantonov/bluebird">bluebird</a>，<br>但是后来我查了下这个 <a href="https://github.com/petkaantonov/bluebird">bluebird</a><br><a href="https://github.com/petkaantonov/bluebird">bluebird</a> 作者说</p>
<blockquote>
<p>Bluebird is a fully featured promise library with focus on innovative features and performance</p>
</blockquote>
</li>
</ol>
<p>关键字 <strong>performance</strong> 然后我就去知乎查了下这个 <a href="https://github.com/petkaantonov/bluebird">bluebird</a> 与 ES6 原生 Promise 的区别:</p>
<ul>
<li><a href="https://www.zhihu.com/question/25413141/answer/30767780">nodejs异步控制「co、async、Q 、『es6原生promise』、then.js、bluebird」有何优缺点？最爱哪个？哪个简单？</a></li>
<li><a href="https://www.zhihu.com/question/39571954">ES next中async/await proposal实现原理是什么？</a><br>于是 在 github 上点了个 star 把 <a href="https://github.com/petkaantonov/bluebird">bluebird</a> 留了下来。</li>
</ul>
<p>而 <a href="https://github.com/hapijs/joi">joi</a> 这个库， 它的作者是这样说的:</p>
<blockquote>
<p>The most powerful data validation library for JS</p>
</blockquote>
<p>数据验证库，没什么好说的。 点个 star 然后开始下一步。</p>
<ol start="5">
<li>继续看 <a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/app.js#L5:1">app.js</a><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="keyword">import</span> is <span class="keyword">from</span> <span class="string">&#x27;is&#x27;</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;config&#x27;</span></span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">&#x27;body-parser&#x27;</span></span><br><span class="line"><span class="keyword">import</span> cors <span class="keyword">from</span> <span class="string">&#x27;cors&#x27;</span></span><br><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">&#x27;./src/common/logger&#x27;</span></span><br><span class="line"><span class="keyword">import</span> HttpStatus <span class="keyword">from</span> <span class="string">&#x27;http-status-codes&#x27;</span></span><br></pre></td></tr></table></figure>
<a href="https://github.com/enricomarino/is">is</a> 类型断言库， 用来替换 <a href="https://github.com/lodash/lodash">lodash</a> 的 类型断言函数<br><a href="https://github.com/lodash/lodash">lodash</a> JavaScript 实用程序库<br><a href="https://github.com/lorenwest/node-config">config</a> 配置文件<br><a href="https://github.com/expressjs/express">express</a> web 框架<br><a href="https://github.com/expressjs/body-parser">bodyParser</a> 请求体解析中间件<br><a href="https://github.com/expressjs/cors">cors</a> (Cross-Origin Resource Sharing) 跨域资源共享中间件<br><a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/src/common/logger.js">logger</a> 日志<br><a href="https://github.com/adaltas/node-http-status">HttpStatus</a> 状态码</li>
</ol>
<p>没什么好说的 继续</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setup express app</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(</span><br><span class="line">  cors(&#123;</span><br><span class="line">    <span class="attr">exposedHeaders</span>: [<span class="string">&#x27;Content-Disposition&#x27;</span>, <span class="string">&#x27;Content-Type&#x27;</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">app.set(<span class="string">&#x27;port&#x27;</span>, config.PORT)</span><br></pre></td></tr></table></figure>
<p>同样没啥好说的， 生成一个 express 实体指向 app， 然后就是应用一些中间件， 设置了一个 express 变量 port.<br>继续看 <a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/app.js#L64:1">app.js</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Register routes</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./app-routes&#x27;</span>)(app)</span><br></pre></td></tr></table></figure>
<p>这里导入了一个路由注册方法， 将 express 的实例 app 给传递了进去</p>
<ol start="6">
<li>现在可以看看  <a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/app-routes.js#L5:11">app-routes.js</a> 搞清楚路由是如何被注册的<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Configure all routes for express app</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> HttpStatus <span class="keyword">from</span> <span class="string">&#x27;http-status-codes&#x27;</span></span><br><span class="line"><span class="keyword">import</span> helper <span class="keyword">from</span> <span class="string">&#x27;./src/common/helper&#x27;</span></span><br><span class="line"><span class="keyword">import</span> auth <span class="keyword">from</span> <span class="string">&#x27;./src/common/auth&#x27;</span></span><br><span class="line"><span class="keyword">import</span> errors <span class="keyword">from</span> <span class="string">&#x27;./src/common/errors&#x27;</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./src/routes&#x27;</span></span><br><span class="line"><span class="keyword">import</span> multer <span class="keyword">from</span> <span class="string">&#x27;multer&#x27;</span></span><br><span class="line"><span class="keyword">import</span> autoReap <span class="keyword">from</span> <span class="string">&#x27;multer-autoreap&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Controllers <span class="keyword">from</span> <span class="string">&#x27;./src/controllers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> upload = multer(&#123; <span class="attr">dest</span>: <span class="string">&#x27;./upload&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Configure all routes for express app</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>app the express app</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> app =&gt; &#123;</span><br><span class="line">  <span class="comment">// auto remove uploaded files</span></span><br><span class="line">  app.use(autoReap)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Load all routes</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> [path, verbs] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(routes)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [verb, def] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(verbs)) &#123;</span><br><span class="line">      <span class="keyword">const</span> method = Controllers[def.controller][def.method] <span class="comment">// eslint-disable-line</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!method) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;def.method&#125;</span> is undefined`</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> actions = []</span><br><span class="line"></span><br><span class="line">      actions.push(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">        req.signature = <span class="string">`<span class="subst">$&#123;def.controller&#125;</span>#<span class="subst">$&#123;def.method&#125;</span>`</span></span><br><span class="line">        next()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Authentication</span></span><br><span class="line">      <span class="keyword">if</span> (!def.public) &#123;</span><br><span class="line">        actions.push(auth())</span><br><span class="line">        actions.push(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (def.adminOnly &amp;&amp; !req.authUser.isAdmin) &#123;</span><br><span class="line">            next(</span><br><span class="line">              <span class="keyword">new</span> errors.ForbiddenError(</span><br><span class="line">                <span class="string">&quot;You don&#x27;t have rights to perform this action!&quot;</span></span><br><span class="line">              )</span><br><span class="line">            )</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (def.file) &#123;</span><br><span class="line">        actions.push(upload.single(def.file))</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      actions.push(method)</span><br><span class="line">      app[verb](path, helper.autoWrapExpress(actions))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check if the route is not found or HTTP method is not supported</span></span><br><span class="line">  app.use(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> route = routes[req.baseUrl]</span><br><span class="line">    <span class="keyword">if</span> (route) &#123;</span><br><span class="line">      res.status(HttpStatus.METHOD_NOT_ALLOWED).json(&#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;The requested HTTP method is not supported.&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.status(HttpStatus.NOT_FOUND).json(&#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;The requested resource cannot be found.&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
可以看到这里，我将 lodash 的方法改写成了原生的 ES6 写法<br>这个 app-routes.js 的主要作用是将 ‘./src/controllers’ 中定义的 controllers 与 ‘./src/routes’ 中定义的 routes 给对应上<br>打开 <a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/src/routes.js#L2:4">‘./src/routes’</a> 可以看到这就是一个中心化的 routes， 这里面定义了请求路径与请求方法以及其对应的 controller 和 对应 controller 中的 method， 还有一些作用域和权限相关的选项。<br>到这一步， 就可以知道这个项目所使用的架构就是大名鼎鼎的 MVC 架构。</li>
</ol>
<p>知道 routes path 如何与 controller 中 method 绑定后， 就可以着手查看其他文件。<br><a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/app-routes.js#L5:11">app-routes.js</a>文件中使用了很多 ‘/src/common’ 下的文件， 可以从这里开始了解抽取的公用逻辑函数。</p>
<ol start="7">
<li><a href="https://github.com/topcoder-platform/challenge-api">challenge-api</a> 的 ‘/src/common’ 下有三个文件</li>
</ol>
<ul>
<li><a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/src/common/errors.js">error.js</a></li>
<li><a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/src/common/helper.js">helper.js</a></li>
<li><a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/src/common/logger.js">logger.js</a><br>error.js 处理程序抛出的异常， logger.js 纪录程序的运行日志， 而 helper.js 的用途就比较复杂了， 应用程序中所有频繁出现的，可抽取的公用逻辑都可以集中放在这个文件中， 以降低代码冗余.<br>这里我除了将 lodash 的方法用 ES6 原生方法替代外， 还对 <a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/src/common/errors.js">error.js</a> 进行了重构，你可以看到， 原先的<a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/src/common/errors.js">error.js</a> 中定义了一个创建各种 http 异常的工厂函数， 这个工厂函数创造一些继承自 Error 的 HTTP 异常类， 继承的实现是使用的 node 自带的  util.inherits 方法， ES6 有原生的 class 语法， 所以我用 class 语法重构了这一部分， 如下:<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This file defines application errors</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@class <span class="variable">ErrorFactory</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorFactory</span> </span>&#123;</span><br><span class="line">  createCustomError (name, statusCode) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Helper Class to create generic error object with http status code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>name the error name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>statusCode the http status code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns <span class="type">&#123;Class&#125;</span> </span>the error constructor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CustomError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</span><br><span class="line">      <span class="title">constructor</span> (<span class="params">message = name, cause = statusCode</span>) &#123;</span><br><span class="line">        <span class="comment">// Calling parent constructor of base Error class.</span></span><br><span class="line">        <span class="built_in">super</span>(message, statusCode)</span><br><span class="line">        <span class="comment">// Saving class name in the property of our custom error as a shortcut.</span></span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">        <span class="comment">// Capturing stack trace, excluding constructor call from it.</span></span><br><span class="line">        <span class="built_in">Error</span>.captureStackTrace(<span class="built_in">this</span>, <span class="built_in">this</span>.constructor)</span><br><span class="line">        <span class="built_in">this</span>.message = message</span><br><span class="line">        <span class="built_in">this</span>.cause = cause</span><br><span class="line">        <span class="built_in">this</span>.httpStatus = statusCode</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> CustomError</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createCustomError = <span class="keyword">new</span> ErrorFactory().createCustomError</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">BadRequestError</span>: createCustomError(<span class="string">&#x27;BadRequestError&#x27;</span>, <span class="number">400</span>),</span><br><span class="line">  <span class="attr">UnauthorizedError</span>: createCustomError(<span class="string">&#x27;UnauthorizedError&#x27;</span>, <span class="number">401</span>),</span><br><span class="line">  <span class="attr">ForbiddenError</span>: createCustomError(<span class="string">&#x27;ForbiddenError&#x27;</span>, <span class="number">403</span>),</span><br><span class="line">  <span class="attr">NotFoundError</span>: createCustomError(<span class="string">&#x27;NotFoundError&#x27;</span>, <span class="number">404</span>),</span><br><span class="line">  <span class="attr">ConflictError</span>: createCustomError(<span class="string">&#x27;ConflictError&#x27;</span>, <span class="number">409</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
可以看到 js 是真的非常简洁和灵活， 要是用 java 来写不知道要罗嗦成什么样， 还美名其曰: 设计模式。</li>
</ul>
<ol start="8">
<li><p>将 ‘/src/common’ 下的文件都读一遍后就可以回头继续读 <a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api@master/-/blob/app.js#L68:5">app.js</a> 了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The error handler</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line no-unused-vars</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  logger.logFullError(err, req.signature || <span class="string">`<span class="subst">$&#123;req.method&#125;</span> <span class="subst">$&#123;req.url&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> errorResponse = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> status = err.isJoi</span><br><span class="line">    ? HttpStatus.BAD_REQUEST</span><br><span class="line">    : err.httpStatus || HttpStatus.INTERNAL_SERVER_ERROR</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (is.array(err.details) &amp;&amp; err.isJoi) &#123;</span><br><span class="line">    err.details.forEach(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (e.message) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is.undef(errorResponse.message)) &#123;</span><br><span class="line">          errorResponse.message = e.message</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          errorResponse.message += <span class="string">`, <span class="subst">$&#123;e.message&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (is.undef(errorResponse.message)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err.message &amp;&amp; status !== HttpStatus.INTERNAL_SERVER_ERROR) &#123;</span><br><span class="line">      errorResponse.message = err.message</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      errorResponse.message = <span class="string">&#x27;Internal server error&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  res.status(status).json(errorResponse)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// if (!module.parent) &#123;</span></span><br><span class="line">app.listen(app.get(<span class="string">&#x27;port&#x27;</span>), <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  logger.info(<span class="string">`Express server listening on port <span class="subst">$&#123;app.get(<span class="string">&#x27;port&#x27;</span>)&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">expressApp</span>: app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里自定义了一个集中处理错误的中间件， 没什么好说的。</p>
</li>
<li><p>然后就可以看下在 ‘src’ 根目录和 ‘src/script’ 目录下其他入口文件， 这里是一些初始化数据库 创建表 同步表 查看表数据的一些 script<br>由于这个 <a href="https://github.com/topcoder-platform/challenge-api">challenge-api</a> 项目使用的是 AWS 云服务， 数据库是云数据库 Amazon DynamoDB， 而我手中这个是本地的 sqlite3，<br>所以没什么好说的， 读一遍 <a href="https://docs.aws.amazon.com/index.html#tutorials">AWS 文档</a> 就能看懂。</p>
</li>
<li><p>最后一步就是看核心的 <a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api@master/-/tree/src/models">‘src/models’</a> <a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api@master/-/tree/src/controllers">‘src/controllers’</a> <a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api@master/-/tree/src/services">‘src/services’</a><br>如果你看过 Verification.md 文档， 然后做过这一步： 假想自己是评审人员需要评审这个项目<br>你就能很容易的借助 <a href="https://www.getpostman.com/">postman</a> 一边测试 api 一边理解这部分的业务逻辑了。</p>
</li>
</ol>
<p>确保项目中的所有 lodash 依赖剔除后， 删除 lodash 依赖 <code>npm uninstall lodash</code> 然后重新 <code>npm run start</code> 确保项目没有因此改动而出现错误。</p>
<p>转型计划之初级后端上篇: Dissect 到此结束， 下一篇是使用 <a href="https://github.com/microsoft/TypeScript">typescript</a> + <a href="https://github.com/nestjs/nest">nestjs</a> + <a href="https://github.com/typeorm/typeorm">typeorm</a> + <a href="https://github.com/mysqljs/mysql">mysql</a> + <a href="https://github.com/topics/docker">docker</a> Refactor.</p>
<blockquote>
<p>this is the way</p>
</blockquote>
]]></content>
      <tags>
        <tag>数据库设计规范</tag>
        <tag>ER 图</tag>
        <tag>初级后端</tag>
        <tag>转型计划</tag>
      </tags>
  </entry>
  <entry>
    <title>转型计划之初级后端(下)</title>
    <url>/2020/01/03/%E8%BD%AC%E5%9E%8B%E8%AE%A1%E5%88%92%E4%B9%8B%E5%88%9D%E7%BA%A7%E5%90%8E%E7%AB%AF-%E4%B8%8B/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://docs.nestjs.com/cli/overview">nest-cli docs</a></li>
<li><a href="https://floatsyi.com/2019/12/30/%E8%BD%AC%E5%9E%8B%E8%AE%A1%E5%88%92%E4%B9%8B%E5%88%9D%E7%BA%A7%E5%90%8E%E7%AB%AF-%E4%B8%8A/">转型计划之初级后端(上)</a></li>
<li><a href="https://floatsyi.com/2019/12/31/%E8%BD%AC%E5%9E%8B%E8%AE%A1%E5%88%92%E4%B9%8B%E5%88%9D%E7%BA%A7%E5%90%8E%E7%AB%AF-%E4%B8%AD/">转型计划之初级后端(中)</a></li>
<li><a href="https://github.com/lorenwest/node-config/wiki/Securing-Production-Config-Files">使用 Git-crypt 加密生产配置文件</a></li>
<li><a href="https://typeorm.io/#/">typeorm docs</a></li>
<li><a href="https://nodejs.org/zh-cn/docs/guides/nodejs-docker-webapp/">把一个 Node.js web 应用程序给 Docker 化</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/nestjs/nest-cli">nest-cli</a></li>
<li><a href="https://github.com/tylerlong/yarn-upgrade-all">yarn-upgrade-all</a></li>
<li><a href="https://github.com/yarnpkg/yarn">yarn</a></li>
<li><a href="https://github.com/npm/npm">npm</a></li>
<li><a href="https://github.com/lorenwest/node-config">config</a></li>
<li><a href="https://github.com/motdotla/dotenv">dotenv</a></li>
<li><a href="https://github.com/prettier/prettier">prettier</a></li>
<li><a href="https://github.com/prettier/prettier-vscode">prettier-vscode</a></li>
<li><a href="https://github.com/microsoft/vscode">vscode</a></li>
<li><a href="https://github.com/facebook/jest">jest</a></li>
<li><a href="https://github.com/gremo/nest-winston">nest-winston</a></li>
<li><a href="https://github.com/winstonjs/winston">winston</a></li>
<li><a href="https://github.com/typestack/class-validator">class-validator</a></li>
<li><a href="https://github.com/typestack/class-transformer">class-transformer</a></li>
<li><a href="https://hub.docker.com/_/mysql">image:mysql</a></li>
<li><a href="https://hub.docker.com/_/adminer">image:adminer</a></li>
<li><a href="https://github.com/topics/docker">docker</a></li>
<li><a href="https://github.com/mysqljs/mysql">mysql</a></li>
<li><a href="https://github.com/typeorm/typeorm">typeorm</a></li>
<li><a href="https://github.com/nestjs/typeorm">@nestjs/typeorm</a></li>
<li><a href="https://github.com/jaredhanson/passport">passport</a></li>
<li><a href="http://www.passportjs.org/docs/">passport docs</a></li>
<li><a href="https://github.com/nestjs/swagger">@nestjs/swagger</a></li>
<li><a href="https://github.com/scottie1984/swagger-ui-express">swagger-ui-express</a></li>
</ul>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此文是对 <a href="https://floatsyi.com/2019/12/31/%E8%BD%AC%E5%9E%8B%E8%AE%A1%E5%88%92%E4%B9%8B%E5%88%9D%E7%BA%A7%E5%90%8E%E7%AB%AF-%E4%B8%AD/">转型计划之初级后端(中)</a> 的整理与补充, 措辞尽量精简以方便后续查阅。</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul>
<li><a href="https://floatsyi.com/2019/12/30/%E8%BD%AC%E5%9E%8B%E8%AE%A1%E5%88%92%E4%B9%8B%E5%88%9D%E7%BA%A7%E5%90%8E%E7%AB%AF-%E4%B8%8A/">转型计划之初级后端(上)</a></li>
<li><a href="https://floatsyi.com/2019/12/31/%E8%BD%AC%E5%9E%8B%E8%AE%A1%E5%88%92%E4%B9%8B%E5%88%9D%E7%BA%A7%E5%90%8E%E7%AB%AF-%E4%B8%AD/">转型计划之初级后端(中)</a></li>
<li><a href="https://docs.nestjs.com/cli/overview">nest-cli docs</a></li>
<li><a href="https://typeorm.io/#/">typeorm docs</a></li>
</ul>
<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>使用 <a href="https://github.com/npm/npm">npm</a> 全局安装一些命令行工具</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> @nestjs/<span class="built_in">cli</span></span><br><span class="line">npm install <span class="literal">-g</span> yarn</span><br><span class="line">npm install <span class="literal">-g</span> yarn<span class="literal">-upgrade</span><span class="literal">-all</span></span><br></pre></td></tr></table></figure>

<p>使用 <a href="https://github.com/nestjs/nest-cli">nest-cli</a> 初始化项目， 包管理器选 <a href="https://github.com/yarnpkg/yarn">yarn</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nest new desktop<span class="literal">-deployment</span><span class="literal">-management</span><span class="literal">-tool</span><span class="literal">-api</span></span><br><span class="line"><span class="built_in">cd</span> desktop<span class="literal">-deployment</span><span class="literal">-management</span><span class="literal">-tool</span><span class="literal">-api</span></span><br></pre></td></tr></table></figure>

<p>使用 <a href="https://github.com/tylerlong/yarn-upgrade-all">yarn-upgrade-all</a> 更新依赖</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn<span class="literal">-upgrade</span><span class="literal">-all</span></span><br></pre></td></tr></table></figure>

<p>修改 <a href="https://github.com/prettier/prettier">prettier</a> 配置文件 .prettierrc</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;semi&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建编辑器工作区配置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir .vscode;touch .vscode/setting.json</span><br></pre></td></tr></table></figure>

<p>配置 <a href="https://github.com/prettier/prettier">prettier</a> 的 <a href="https://github.com/microsoft/vscode">vscode</a> 插件: <a href="https://github.com/prettier/prettier-vscode">prettier-vscode</a></p>
<p>setting.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;[typescript]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <a href="https://github.com/nestjs/nest-cli">nest-cli</a> 生成 Interceptors, Exception filters, Pipes, Guards</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nest generate interceptor common/interceptors/logging</span><br><span class="line">nest generate <span class="keyword">filter</span> common/filters/all<span class="literal">-exception</span></span><br><span class="line">nest generate pipe common/pipes/body<span class="literal">-validation</span></span><br><span class="line">nest generate guard common/guard/auth</span><br></pre></td></tr></table></figure>

<p>运行 <a href="https://github.com/facebook/jest">jest</a> 测试</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn test</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>使用 <a href="https://github.com/yarnpkg/yarn">yarn</a> 添加运行时依赖 <a href="https://github.com/lorenwest/node-config">config</a> 和 <a href="https://github.com/motdotla/dotenv">dotenv</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn add config dotenv</span><br></pre></td></tr></table></figure>

<p>创建并编辑 <a href="https://github.com/lorenwest/node-config">config</a> 配置文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir config</span><br><span class="line">touch config/default.json</span><br><span class="line">touch config/production.json</span><br><span class="line">touch config/custom<span class="literal">-environment</span><span class="literal">-variables</span>.json</span><br><span class="line">touch src/config.ts</span><br><span class="line">touch .env</span><br></pre></td></tr></table></figure>

<p>default.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;env&quot;</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;port&quot;</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">&quot;logLevel&quot;</span>: <span class="string">&quot;debug&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;db&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ddmtdb&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;rootpass&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;port&quot;</span>: <span class="number">3307</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>production.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;env&quot;</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;port&quot;</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">&quot;logLevel&quot;</span>: <span class="string">&quot;debug&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;db&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;db&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ddmtdb&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;rootpass&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;port&quot;</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;jwt&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;secret&quot;</span>: <span class="string">&quot;secret-key&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>custom-environment-variables.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;env&quot;</span>: <span class="string">&quot;NODE_ENV&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;port&quot;</span>: <span class="string">&quot;PORT&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;logLevel&quot;</span>: <span class="string">&quot;LOG_LEVEL&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;db&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DB_NAME&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;DB_PASSWORD&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;port&quot;</span>: <span class="string">&quot;DB_PORT&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;DB_USERNAME&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>config.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> dotenv <span class="keyword">from</span> <span class="string">&quot;dotenv&quot;</span></span><br><span class="line">dotenv.config()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Config &#123;</span><br><span class="line">  <span class="attr">env</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">port</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">logLevel</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">db</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">password</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">port</span>: <span class="built_in">number</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config: Config = <span class="built_in">require</span>(<span class="string">&#x27;config&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>.env</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NODE_ENV=development</span><br><span class="line">PORT=3000</span><br><span class="line">SECRET=secret-key</span><br><span class="line">LOG_LEVEL=debug</span><br><span class="line">DB_NAME=ddmtdb</span><br><span class="line">DB_USERNAME=root</span><br><span class="line">DB_PASSWORD=rootpass</span><br><span class="line">DB_PORT=3307</span><br><span class="line">ADMINER_THEME=pepa-linha</span><br><span class="line">ADMINER_PORT=8081</span><br></pre></td></tr></table></figure>

<p>.env 中的值映射到 custom-environment-variables.json 对应的值上，<br>而 custom-environment-variables.json 中的值映射到 default.json 对应的值上.<br>最终 .env 中的值覆盖 default.json 中对应的值.</p>
<p>加密敏感信息请参考: <a href="https://github.com/lorenwest/node-config/wiki/Securing-Production-Config-Files">使用 Git-crypt 加密生产配置文件</a></p>
<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>使用 <a href="https://github.com/yarnpkg/yarn">yarn</a> 添加运行时依赖 <a href="https://github.com/gremo/nest-winston">nest-winston</a> 和 <a href="https://github.com/winstonjs/winston">winston</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn add nest<span class="literal">-winston</span> winston</span><br></pre></td></tr></table></figure>

<p>config.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> dotenv <span class="keyword">from</span> <span class="string">&#x27;dotenv&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; utilities <span class="keyword">as</span> nestWinstonModuleUtilities &#125; <span class="keyword">from</span> <span class="string">&#x27;nest-winston&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; format, transports &#125; <span class="keyword">from</span> <span class="string">&#x27;winston&#x27;</span></span><br><span class="line"></span><br><span class="line">dotenv.config()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Config &#123;</span><br><span class="line">  <span class="attr">env</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">port</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">logLevel</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">dbName</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">dbPassword</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">dbPort</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config: Config = <span class="built_in">require</span>(<span class="string">&#x27;config&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loggerConfig = &#123;</span><br><span class="line">  <span class="comment">// options here</span></span><br><span class="line">  <span class="attr">level</span>: config.logLevel,</span><br><span class="line">  <span class="attr">transports</span>: [</span><br><span class="line">    <span class="keyword">new</span> transports.Console(&#123;</span><br><span class="line">      <span class="attr">format</span>: format.combine(</span><br><span class="line">        format.colorize(),</span><br><span class="line">        nestWinstonModuleUtilities.format.nestLike(),</span><br><span class="line">      ),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> transports.File(&#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;combined.log&#x27;</span>,</span><br><span class="line">      <span class="attr">level</span>: config.logLevel,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>logging.interceptor.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Injectable,</span><br><span class="line">  NestInterceptor,</span><br><span class="line">  ExecutionContext,</span><br><span class="line">  CallHandler,</span><br><span class="line">  LoggerService,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; tap &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingInterceptor</span> <span class="title">implements</span> <span class="title">NestInterceptor</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> logger: LoggerService</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  intercept(context: ExecutionContext, <span class="attr">next</span>: CallHandler): Observable&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = context.switchToHttp()</span><br><span class="line">    <span class="keyword">const</span> response = ctx.getResponse&lt;Response&gt;()</span><br><span class="line">    <span class="keyword">const</span> request = ctx.getRequest&lt;Request&gt;()</span><br><span class="line">    <span class="keyword">const</span> method = request.method</span><br><span class="line">    <span class="keyword">const</span> url = request.url</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> requestTime = <span class="built_in">Date</span>.now()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add request time to params to be used in exception filters</span></span><br><span class="line">    request.params.requestTime = <span class="built_in">Date</span>.now().toString()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">      .handle()</span><br><span class="line">      .pipe(</span><br><span class="line">        tap(<span class="function">() =&gt;</span></span><br><span class="line">          <span class="built_in">this</span>.logger.log(</span><br><span class="line">            <span class="string">`<span class="subst">$&#123;method&#125;</span> <span class="subst">$&#123;url&#125;</span> - <span class="subst">$&#123;response.statusCode&#125;</span> - <span class="subst">$&#123;<span class="built_in">Date</span>.now() -</span></span></span><br><span class="line"><span class="subst"><span class="string">              requestTime&#125;</span>ms`</span>,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NestFactory &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; WINSTON_MODULE_NEST_PROVIDER, WinstonModule &#125; <span class="keyword">from</span> <span class="string">&#x27;nest-winston&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; LoggingInterceptor &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/interceptors/logging.interceptor&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; config, loggerConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = WinstonModule.createLogger(loggerConfig)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule)</span><br><span class="line"></span><br><span class="line">  app.useLogger(app.get(WINSTON_MODULE_NEST_PROVIDER))</span><br><span class="line">  app.useGlobalInterceptors(<span class="keyword">new</span> LoggingInterceptor(logger))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> app.listen(config.port)</span><br><span class="line">  logger.log(<span class="string">`Server started on port <span class="subst">$&#123;config.port&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">bootstrap()</span><br></pre></td></tr></table></figure>

<p>app.module.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; WinstonModule &#125; <span class="keyword">from</span> <span class="string">&#x27;nest-winston&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; loggerConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [WinstonModule.forRoot(loggerConfig)],</span><br><span class="line">  <span class="attr">controllers</span>: [AppController],</span><br><span class="line">  <span class="attr">providers</span>: [AppService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h2><p>all-exception.filter.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  ArgumentsHost,</span><br><span class="line">  Catch,</span><br><span class="line">  ExceptionFilter,</span><br><span class="line">  HttpException,</span><br><span class="line">  HttpStatus,</span><br><span class="line">  LoggerService,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Catch</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AllExceptionFilter</span> <span class="title">implements</span> <span class="title">ExceptionFilter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> logger: LoggerService</span>)</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">catch</span>(exception: HttpException | <span class="built_in">Error</span>, <span class="attr">host</span>: ArgumentsHost) &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = host.switchToHttp()</span><br><span class="line">    <span class="keyword">const</span> response = ctx.getResponse&lt;Response&gt;()</span><br><span class="line">    <span class="keyword">const</span> request = ctx.getRequest&lt;Request&gt;()</span><br><span class="line">    <span class="keyword">const</span> status =</span><br><span class="line">      exception <span class="keyword">instanceof</span> HttpException</span><br><span class="line">        ? exception.getStatus()</span><br><span class="line">        : HttpStatus.INTERNAL_SERVER_ERROR</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the location where the error was thrown from to use as a logging tag</span></span><br><span class="line">    <span class="keyword">const</span> stackTop = exception.stack</span><br><span class="line">      .split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">      .split(<span class="string">&#x27;at &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">      .split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> message = exception.message.message || exception.message</span><br><span class="line">    <span class="keyword">const</span> meta = exception.message.meta || exception.message.errors</span><br><span class="line">    <span class="keyword">const</span> logMessage = &#123;</span><br><span class="line">      status,</span><br><span class="line">      message,</span><br><span class="line">      meta,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.logger.error(<span class="built_in">JSON</span>.stringify(logMessage), stackTop, <span class="string">&#x27;TRACE&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> method = request.method</span><br><span class="line">    <span class="keyword">const</span> url = request.url</span><br><span class="line">    <span class="keyword">const</span> requestTime = request.params.requestTime</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.logger.log(</span><br><span class="line">      <span class="string">`<span class="subst">$&#123;method&#125;</span> <span class="subst">$&#123;url&#125;</span> - <span class="subst">$&#123;status&#125;</span> - <span class="subst">$&#123;<span class="built_in">Date</span>.now() - <span class="built_in">Number</span>(requestTime)&#125;</span>ms`</span>,</span><br><span class="line">      <span class="string">&#x27;Access&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    response.status(status).send(logMessage)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NestFactory &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; WINSTON_MODULE_NEST_PROVIDER, WinstonModule &#125; <span class="keyword">from</span> <span class="string">&#x27;nest-winston&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; LoggingInterceptor &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/interceptors/logging.interceptor&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AllExceptionFilter &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/filters/all-exception.filter&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; config, loggerConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = WinstonModule.createLogger(loggerConfig)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule)</span><br><span class="line"></span><br><span class="line">  app.useLogger(app.get(WINSTON_MODULE_NEST_PROVIDER))</span><br><span class="line">  app.useGlobalInterceptors(<span class="keyword">new</span> LoggingInterceptor(logger))</span><br><span class="line">  app.useGlobalFilters(<span class="keyword">new</span> AllExceptionFilter(logger))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> app.listen(config.port)</span><br><span class="line">  logger.log(<span class="string">`Server started on port <span class="subst">$&#123;config.port&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">bootstrap()</span><br></pre></td></tr></table></figure>

<h2 id="请求体验证"><a href="#请求体验证" class="headerlink" title="请求体验证"></a>请求体验证</h2><p>使用 <a href="https://github.com/yarnpkg/yarn">yarn</a> 添加运行时依赖 <a href="https://github.com/typestack/class-validator">class-validator</a> 和 <a href="https://github.com/typestack/class-transformer">class-transformer</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn add <span class="class"><span class="keyword">class</span>-<span class="title">validator</span> <span class="title">class</span>-<span class="title">transformer</span></span></span><br></pre></td></tr></table></figure>

<p>body-validation.pipe.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  PipeTransform,</span><br><span class="line">  Injectable,</span><br><span class="line">  ArgumentMetadata,</span><br><span class="line">  BadRequestException,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; validate &#125; <span class="keyword">from</span> <span class="string">&#x27;class-validator&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; plainToClass &#125; <span class="keyword">from</span> <span class="string">&#x27;class-transformer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationPipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span>&lt;<span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">transform</span>(<span class="params">value: <span class="built_in">any</span>, metadata: ArgumentMetadata</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Account for an empty request body</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">      value = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; metatype &#125; = metadata</span><br><span class="line">    <span class="keyword">if</span> (!metatype || !<span class="built_in">this</span>.toValidate(metatype)) &#123;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">object</span> = plainToClass(metatype, value)</span><br><span class="line">    <span class="keyword">const</span> errors = <span class="keyword">await</span> validate(<span class="built_in">object</span>)</span><br><span class="line">    <span class="keyword">if</span> (errors.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// Top-level errors</span></span><br><span class="line">      <span class="keyword">const</span> topLevelErrors = errors</span><br><span class="line">        .filter(<span class="function"><span class="params">v</span> =&gt;</span> v.constraints)</span><br><span class="line">        .map(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">property</span>: error.property,</span><br><span class="line">            <span class="attr">constraints</span>: <span class="built_in">Object</span>.values(error.constraints),</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Nested errors</span></span><br><span class="line">      <span class="keyword">const</span> nestedErrors = errors</span><br><span class="line">        .filter(<span class="function"><span class="params">v</span> =&gt;</span> !v.constraints)</span><br><span class="line">        .map(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> validationErrors = <span class="built_in">this</span>.getValidationErrorsFromChildren(</span><br><span class="line">            error.property,</span><br><span class="line">            error.children,</span><br><span class="line">          )</span><br><span class="line">          <span class="keyword">return</span> validationErrors</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(&#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;Validation failed&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: topLevelErrors.concat(...nestedErrors),</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> toValidate(metatype: <span class="built_in">any</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> types: <span class="built_in">Function</span>[] = [<span class="built_in">String</span>, <span class="built_in">Boolean</span>, <span class="built_in">Number</span>, <span class="built_in">Array</span>, <span class="built_in">Object</span>]</span><br><span class="line">    <span class="keyword">return</span> !types.includes(metatype)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getValidationErrorsFromChildren</span>(<span class="params">parent, children, errors = []</span>)</span> &#123;</span><br><span class="line">    children.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (child.constraints) &#123;</span><br><span class="line">        errors.push(&#123;</span><br><span class="line">          <span class="attr">property</span>: <span class="string">`<span class="subst">$&#123;parent&#125;</span>.<span class="subst">$&#123;child.property&#125;</span>`</span>,</span><br><span class="line">          <span class="attr">constraints</span>: <span class="built_in">Object</span>.values(child.constraints),</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getValidationErrorsFromChildren(</span><br><span class="line">          <span class="string">`<span class="subst">$&#123;parent&#125;</span>.<span class="subst">$&#123;child.property&#125;</span>`</span>,</span><br><span class="line">          child.children,</span><br><span class="line">          errors,</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> errors</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NestFactory &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; WINSTON_MODULE_NEST_PROVIDER, WinstonModule &#125; <span class="keyword">from</span> <span class="string">&#x27;nest-winston&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; LoggingInterceptor &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/interceptors/logging.interceptor&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AllExceptionFilter &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/filters/all-exception.filter&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; BodyValidationPipe &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/pipes/body-validation.pipe&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; config, loggerConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = WinstonModule.createLogger(loggerConfig)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule)</span><br><span class="line"></span><br><span class="line">  app.useLogger(app.get(WINSTON_MODULE_NEST_PROVIDER))</span><br><span class="line">  app.useGlobalInterceptors(<span class="keyword">new</span> LoggingInterceptor(logger))</span><br><span class="line">  app.useGlobalFilters(<span class="keyword">new</span> AllExceptionFilter(logger))</span><br><span class="line">  app.useGlobalPipes(<span class="keyword">new</span> BodyValidationPipe())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> app.listen(config.port)</span><br><span class="line">  logger.log(<span class="string">`Server started on port <span class="subst">$&#123;config.port&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">bootstrap()</span><br></pre></td></tr></table></figure>

<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="使用-image-mysql-和-image-adminer-创建-docker-容器"><a href="#使用-image-mysql-和-image-adminer-创建-docker-容器" class="headerlink" title="使用 image:mysql 和 image:adminer 创建 docker 容器"></a>使用 <a href="https://hub.docker.com/_/mysql">image:mysql</a> 和 <a href="https://hub.docker.com/_/adminer">image:adminer</a> 创建 <a href="https://github.com/topics/docker">docker</a> 容器</h3><p>创建文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir mysql</span><br><span class="line">touch docker<span class="literal">-compose</span>.yml</span><br></pre></td></tr></table></figure>

<p>docker-compose.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use root/example as user/password credentials</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">$&#123;DB_PASSWORD&#125;</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">$&#123;DB_NAME&#125;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$&#123;DB_PORT&#125;:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">adminer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">adminer</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ADMINER_DESIGN:</span> <span class="string">$&#123;ADMINER_THEME&#125;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;ADMINER_PORT&#125;:8080</span></span><br></pre></td></tr></table></figure>

<p>package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripit&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;db&quot;</span>: <span class="string">&quot;docker-compose up -d&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成并运行容器</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn db</span><br></pre></td></tr></table></figure>

<h3 id="访问-image-adminer-以管理数据库"><a href="#访问-image-adminer-以管理数据库" class="headerlink" title="访问 image:adminer 以管理数据库"></a>访问 <a href="https://hub.docker.com/_/adminer">image:adminer</a> 以管理数据库</h3><p>打开 <a href="http://127.0.0.1:8081/">http://127.0.0.1:8081/</a> 登录即可</p>
<h3 id="使用-typeorm-连接数据库"><a href="#使用-typeorm-连接数据库" class="headerlink" title="使用 typeorm 连接数据库"></a>使用 <a href="https://github.com/typeorm/typeorm">typeorm</a> 连接数据库</h3><p>参考: <a href="https://typeorm.io/#/">typeorm docs</a> 以及 <a href="https://docs.nestjs.com/techniques/database">https://docs.nestjs.com/techniques/database</a></p>
<p>添加运行时依赖 <a href="https://github.com/typeorm/typeorm">typeorm</a> 和 <a href="https://github.com/nestjs/typeorm">@nestjs/typeorm</a> 和 <a href="https://github.com/mysqljs/mysql">mysql</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn add typeorm @nestjs/typeorm mysql</span><br></pre></td></tr></table></figure>

<p>config.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> dotenv <span class="keyword">from</span> <span class="string">&#x27;dotenv&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; utilities <span class="keyword">as</span> nestWinstonModuleUtilities &#125; <span class="keyword">from</span> <span class="string">&#x27;nest-winston&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; format, transports &#125; <span class="keyword">from</span> <span class="string">&#x27;winston&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; TypeOrmModuleOptions &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span></span><br><span class="line"></span><br><span class="line">dotenv.config()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isDev = process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Config &#123;</span><br><span class="line">  <span class="attr">env</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">port</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">logLevel</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">db</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">password</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">port</span>: <span class="built_in">number</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attr">jwt</span>: &#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config: Config = <span class="built_in">require</span>(<span class="string">&#x27;config&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loggerConfig = &#123;</span><br><span class="line">  <span class="comment">// options here</span></span><br><span class="line">  <span class="attr">level</span>: config.logLevel,</span><br><span class="line">  <span class="attr">transports</span>: [</span><br><span class="line">    <span class="keyword">new</span> transports.Console(&#123;</span><br><span class="line">      <span class="attr">format</span>: format.combine(</span><br><span class="line">        format.colorize(),</span><br><span class="line">        format.timestamp(),</span><br><span class="line">        nestWinstonModuleUtilities.format.nestLike(),</span><br><span class="line">      ),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> transports.File(&#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;combined.log&#x27;</span>,</span><br><span class="line">      <span class="attr">level</span>: config.logLevel,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> dbConfig: TypeOrmModuleOptions = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">  <span class="attr">host</span>: config.db.host,</span><br><span class="line">  <span class="attr">port</span>: config.db.port,</span><br><span class="line">  <span class="attr">username</span>: config.db.username,</span><br><span class="line">  <span class="attr">password</span>: config.db.password,</span><br><span class="line">  <span class="attr">database</span>: config.db.name,</span><br><span class="line">  <span class="attr">entities</span>: [<span class="string">&#x27;dist/**/**.entity&#123;.ts,.js&#125;&#x27;</span>],</span><br><span class="line">  <span class="attr">synchronize</span>: isDev ? <span class="literal">true</span> : <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>app.module.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; WinstonModule &#125; <span class="keyword">from</span> <span class="string">&#x27;nest-winston&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; TypeOrmModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; loggerConfig, dbConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    TypeOrmModule.forRoot(dbConfig),</span><br><span class="line">    WinstonModule.forRoot(loggerConfig),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">controllers</span>: [AppController],</span><br><span class="line">  <span class="attr">providers</span>: [AppService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="swagger-文档"><a href="#swagger-文档" class="headerlink" title="swagger 文档"></a>swagger 文档</h2><p>参考: <a href="https://docs.nestjs.com/recipes/swagger#openapi-swagger">https://docs.nestjs.com/recipes/swagger#openapi-swagger</a><br>添加运行时依赖 <a href="https://github.com/nestjs/swagger">@nestjs/swagger</a> <a href="https://github.com/scottie1984/swagger-ui-express">swagger-ui-express</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn add @nestjs/swagger swagger<span class="literal">-ui</span><span class="literal">-express</span></span><br></pre></td></tr></table></figure>

<p>main.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NestFactory &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; WINSTON_MODULE_NEST_PROVIDER, WinstonModule &#125; <span class="keyword">from</span> <span class="string">&#x27;nest-winston&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; LoggingInterceptor &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/interceptors/logging.interceptor&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AllExceptionFilter &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/filters/all-exception.filter&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; BodyValidationPipe &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/pipes/body-validation.pipe&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; config, loggerConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; SwaggerModule, DocumentBuilder &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/swagger&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = WinstonModule.createLogger(loggerConfig)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule)</span><br><span class="line"></span><br><span class="line">  app.useLogger(app.get(WINSTON_MODULE_NEST_PROVIDER))</span><br><span class="line">  app.useGlobalInterceptors(<span class="keyword">new</span> LoggingInterceptor(logger))</span><br><span class="line">  app.useGlobalFilters(<span class="keyword">new</span> AllExceptionFilter(logger))</span><br><span class="line">  app.useGlobalPipes(<span class="keyword">new</span> BodyValidationPipe())</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize Swagger UI</span></span><br><span class="line">  <span class="keyword">const</span> options = <span class="keyword">new</span> DocumentBuilder()</span><br><span class="line">    .setTitle(<span class="string">&#x27;NestJS Realworld Example App&#x27;</span>)</span><br><span class="line">    .setDescription(<span class="string">&#x27;The Realworld API description&#x27;</span>)</span><br><span class="line">    .setVersion(<span class="string">&#x27;1.0&#x27;</span>)</span><br><span class="line">    .addBearerAuth()</span><br><span class="line">    .build()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">document</span> = SwaggerModule.createDocument(app, options)</span><br><span class="line">  SwaggerModule.setup(<span class="string">&#x27;/docs&#x27;</span>, app, <span class="built_in">document</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> app.listen(config.port)</span><br><span class="line">  logger.log(<span class="string">`Server started on port <span class="subst">$&#123;config.port&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">bootstrap()</span><br></pre></td></tr></table></figure>

<h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>参考: <a href="http://www.passportjs.org/docs/">passport docs</a> 以及 <a href="https://docs.nestjs.com/techniques/authentication">https://docs.nestjs.com/techniques/authentication</a><br>添加运行时依赖 [@nestjs/passport][] 和 <a href="https://github.com/jaredhanson/passport">passport</a> 和 [passport-local][] 和 [@nestjs/jwt][] 和 [passport-jwt][]<br>添加开发时依赖 [@types/passport-local][] 和 [@types/passport-jwt][]</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn add @nestjs/passport passport passport<span class="literal">-local</span> @nestjs/jwt passport<span class="literal">-jwt</span></span><br><span class="line">yarn add @types/passport<span class="literal">-local</span> @types/passport<span class="literal">-jwt</span> -<span class="literal">-save</span><span class="literal">-dev</span></span><br></pre></td></tr></table></figure>

<p>生成 auth 与 users 模块文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nest g module auth</span><br><span class="line">nest g service auth</span><br><span class="line">nest g module user</span><br><span class="line">nest g service user</span><br><span class="line">nest g controller user</span><br><span class="line">touch src/auth/local.strategy.ts</span><br><span class="line">touch src/auth/jwt.strategy.ts</span><br></pre></td></tr></table></figure>

<h3 id="user"><a href="#user" class="headerlink" title="user"></a>user</h3><p>user.entity.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Entity, PrimaryGeneratedColumn, Column, BeforeInsert &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; IsEmail &#125; <span class="keyword">from</span> <span class="string">&#x27;class-validator&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> crypto <span class="keyword">from</span> <span class="string">&#x27;crypto&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> </span>&#123;</span><br><span class="line">  <span class="meta">@PrimaryGeneratedColumn</span>()</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>()</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>()</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(&#123; <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span> &#125;)</span><br><span class="line">  <span class="attr">bio</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(&#123; <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span> &#125;)</span><br><span class="line">  <span class="attr">image</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>()</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@BeforeInsert</span>()</span><br><span class="line">  <span class="function"><span class="title">hashPassword</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.password = crypto.createHmac(<span class="string">&#x27;sha256&#x27;</span>, <span class="built_in">this</span>.password).digest(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>user.decorator.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createParamDecorator &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> User = createParamDecorator(<span class="function">(<span class="params">data, req</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// if route is protected, there is a user set in auth.middleware</span></span><br><span class="line">  <span class="keyword">if</span> (req.user) &#123;</span><br><span class="line">    <span class="keyword">return</span> data ? req.user[data] : req.user</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>user.controller.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Get,</span><br><span class="line">  Post,</span><br><span class="line">  Body,</span><br><span class="line">  Put,</span><br><span class="line">  Delete,</span><br><span class="line">  Param,</span><br><span class="line">  Controller,</span><br><span class="line">  UseGuards,</span><br><span class="line">  Request,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserRO &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.interface&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; CreateUserDto, UpdateUserDto &#125; <span class="keyword">from</span> <span class="string">&#x27;./dto&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; User &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.decorator&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AuthGuard &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/passport&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AuthService &#125; <span class="keyword">from</span> <span class="string">&#x27;../auth/auth.service&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ApiTags, ApiBearerAuth, ApiBody &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/swagger&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiBearerAuth</span>()</span><br><span class="line"><span class="meta">@ApiTags</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> userService: UserService,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> authService: AuthService,</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@UseGuards</span>(AuthGuard(<span class="string">&#x27;jwt&#x27;</span>))</span><br><span class="line">  <span class="meta">@Put</span>(<span class="string">&#x27;user/profile&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">update</span>(<span class="params"><span class="meta">@User</span>(<span class="string">&#x27;email&#x27;</span>) email: <span class="built_in">string</span>, <span class="meta">@Body</span>() userData: UpdateUserDto</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> newUser = <span class="keyword">await</span> <span class="built_in">this</span>.userService.update(email, userData)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.authService.buildUserRO(newUser)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// @UsePipes(new ValidationPipe())</span></span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;users/sign_up&#x27;</span>)</span><br><span class="line">  <span class="meta">@ApiBody</span>(&#123; <span class="attr">type</span>: CreateUserDto &#125;)</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params"><span class="meta">@Body</span>() userData: CreateUserDto</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> newUser = <span class="keyword">await</span> <span class="built_in">this</span>.userService.create(userData)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.authService.buildUserRO(newUser)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@UseGuards</span>(AuthGuard(<span class="string">&#x27;jwt&#x27;</span>))</span><br><span class="line">  <span class="meta">@Delete</span>(<span class="string">&#x27;user/cancel&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">delete</span>(<span class="params"><span class="meta">@User</span>(<span class="string">&#x27;email&#x27;</span>) email: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.userService.delete(email)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@UseGuards</span>(AuthGuard(<span class="string">&#x27;local&#x27;</span>))</span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;user/sign_in&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> login(<span class="meta">@Request</span>() req): <span class="built_in">Promise</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.authService.buildUserRO(req.user)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>user.service.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, HttpStatus &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; InjectRepository &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Repository, getRepository, DeleteResult &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserEntity &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.entity&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; CreateUserDto, LoginUserDto, UpdateUserDto &#125; <span class="keyword">from</span> <span class="string">&#x27;./dto&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; config &#125; <span class="keyword">from</span> <span class="string">&#x27;../config&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserRO &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.interface&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; validate &#125; <span class="keyword">from</span> <span class="string">&#x27;class-validator&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; HttpException &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common/exceptions/http.exception&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> crypto <span class="keyword">from</span> <span class="string">&#x27;crypto&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> jwt <span class="keyword">from</span> <span class="string">&#x27;jsonwebtoken&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@InjectRepository</span>(UserEntity)</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> userRepository: Repository&lt;UserEntity&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> findAll(): <span class="built_in">Promise</span>&lt;UserEntity[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.userRepository.find()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> findOne(loginUserDto: LoginUserDto): <span class="built_in">Promise</span>&lt;UserEntity&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> findOneOptions = &#123;</span><br><span class="line">      <span class="attr">email</span>: loginUserDto.email,</span><br><span class="line">      <span class="attr">password</span>: crypto</span><br><span class="line">        .createHmac(<span class="string">&#x27;sha256&#x27;</span>, loginUserDto.password)</span><br><span class="line">        .digest(<span class="string">&#x27;hex&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="built_in">this</span>.userRepository.findOne(findOneOptions)</span><br><span class="line">    <span class="keyword">return</span> user</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> create(dto: CreateUserDto): <span class="built_in">Promise</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// check uniqueness of username/email</span></span><br><span class="line">    <span class="keyword">const</span> &#123; username, email, password &#125; = dto</span><br><span class="line">    <span class="keyword">const</span> qb = <span class="keyword">await</span> getRepository(UserEntity)</span><br><span class="line">      .createQueryBuilder(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">      .where(<span class="string">&#x27;user.username = :username&#x27;</span>, &#123; username &#125;)</span><br><span class="line">      .orWhere(<span class="string">&#x27;user.email = :email&#x27;</span>, &#123; email &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> qb.getOne()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user) &#123;</span><br><span class="line">      <span class="keyword">const</span> errors = &#123; <span class="attr">username</span>: <span class="string">&#x27;Username and email must be unique.&#x27;</span> &#125;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(</span><br><span class="line">        &#123; <span class="attr">message</span>: <span class="string">&#x27;Input data validation failed&#x27;</span>, errors &#125;,</span><br><span class="line">        HttpStatus.BAD_REQUEST,</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create new user</span></span><br><span class="line">    <span class="keyword">const</span> newUser = <span class="keyword">new</span> UserEntity()</span><br><span class="line">    newUser.username = username</span><br><span class="line">    newUser.email = email</span><br><span class="line">    newUser.password = password</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> errors = <span class="keyword">await</span> validate(newUser)</span><br><span class="line">    <span class="keyword">if</span> (errors.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> _errors = &#123; <span class="attr">username</span>: <span class="string">&#x27;Userinput is not valid.&#x27;</span> &#125;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(</span><br><span class="line">        &#123; <span class="attr">message</span>: <span class="string">&#x27;Input data validation failed&#x27;</span>, <span class="attr">meta</span>: _errors &#125;,</span><br><span class="line">        HttpStatus.BAD_REQUEST,</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> savedUser = <span class="keyword">await</span> <span class="built_in">this</span>.userRepository.save(newUser)</span><br><span class="line">      <span class="keyword">return</span> savedUser</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> update(email: <span class="built_in">string</span>, <span class="attr">dto</span>: UpdateUserDto): <span class="built_in">Promise</span>&lt;UserEntity&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> toUpdate = <span class="keyword">await</span> <span class="built_in">this</span>.userRepository.findOne(email)</span><br><span class="line">    <span class="keyword">delete</span> toUpdate.password</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> updated = <span class="built_in">Object</span>.assign(toUpdate, dto)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.userRepository.save(updated)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">delete</span>(email: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;DeleteResult&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.userRepository.delete(&#123; <span class="attr">email</span>: email &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>user.module.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module, forwardRef &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserController &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.controller&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; TypeOrmModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserEntity &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.entity&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AuthModule &#125; <span class="keyword">from</span> <span class="string">&#x27;../auth/auth.module&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    TypeOrmModule.forFeature([UserEntity]),</span><br><span class="line">    forwardRef(<span class="function">() =&gt;</span> AuthModule),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [UserService],</span><br><span class="line">  <span class="attr">controllers</span>: [UserController],</span><br><span class="line">  <span class="attr">exports</span>: [UserService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="auth"><a href="#auth" class="headerlink" title="auth"></a>auth</h3><p>auth.module.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module, forwardRef &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AuthService &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; LocalStrategy &#125; <span class="keyword">from</span> <span class="string">&#x27;./local.strategy&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; JwtStrategy &#125; <span class="keyword">from</span> <span class="string">&#x27;./jwt.strategy&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserModule &#125; <span class="keyword">from</span> <span class="string">&#x27;../user/user.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; PassportModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/passport&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; JwtModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/jwt&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; config &#125; <span class="keyword">from</span> <span class="string">&#x27;../config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    forwardRef(<span class="function">() =&gt;</span> UserModule),</span><br><span class="line">    PassportModule,</span><br><span class="line">    JwtModule.register(&#123;</span><br><span class="line">      <span class="attr">secret</span>: config.jwt.secret,</span><br><span class="line">      <span class="attr">signOptions</span>: &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;60s&#x27;</span> &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [AuthService, LocalStrategy, JwtStrategy],</span><br><span class="line">  <span class="attr">exports</span>: [AuthService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>auth.service.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, Inject &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">&#x27;../user/user.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; JwtService &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/jwt&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; LoginUserDto, UserRO &#125; <span class="keyword">from</span> <span class="string">&#x27;../user/dto&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> userService: UserService,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> jwtService: JwtService,</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> validateUser(&#123; email, password &#125;: LoginUserDto): <span class="built_in">Promise</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="built_in">this</span>.userService.findOne(&#123; email, password &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; id, email, username, bio, image &#125; = user</span><br><span class="line">      <span class="keyword">return</span> &#123; id, email, username, bio, image &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> buildUserRO(user): <span class="built_in">Promise</span>&lt;UserRO&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id, email, username, bio, image &#125; = user</span><br><span class="line">    <span class="keyword">const</span> payload = &#123; id, email, username &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      username,</span><br><span class="line">      email,</span><br><span class="line">      bio,</span><br><span class="line">      image,</span><br><span class="line">      <span class="attr">access_token</span>: <span class="built_in">this</span>.jwtService.sign(payload),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="local-strategy"><a href="#local-strategy" class="headerlink" title="local.strategy"></a>local.strategy</h4><p>local.strategy.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Strategy &#125; <span class="keyword">from</span> <span class="string">&#x27;passport-local&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; PassportStrategy &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/passport&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable, UnauthorizedException &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AuthService &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.service&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalStrategy</span> <span class="keyword">extends</span> <span class="title">PassportStrategy</span>(<span class="title">Strategy</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> authService: AuthService</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(&#123;</span><br><span class="line">      <span class="attr">usernameField</span>: <span class="string">&#x27;email&#x27;</span>,</span><br><span class="line">      <span class="attr">passwordField</span>: <span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">      <span class="attr">session</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> validate(email, password): <span class="built_in">Promise</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="built_in">this</span>.authService.validateUser(&#123;</span><br><span class="line">      email,</span><br><span class="line">      password,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedException(&#123;</span><br><span class="line">        <span class="attr">error</span>: <span class="string">&#x27;Incorrect username or password&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="jwt-strategy"><a href="#jwt-strategy" class="headerlink" title="jwt.strategy"></a>jwt.strategy</h4><p>jwt.strategy.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ExtractJwt, Strategy &#125; <span class="keyword">from</span> <span class="string">&#x27;passport-jwt&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; PassportStrategy &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/passport&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; config &#125; <span class="keyword">from</span> <span class="string">&#x27;../config&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; JwtPayload &#125; <span class="keyword">from</span> <span class="string">&#x27;../user/dto&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtStrategy</span> <span class="keyword">extends</span> <span class="title">PassportStrategy</span>(<span class="title">Strategy</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(&#123;</span><br><span class="line">      <span class="attr">jwtFromRequest</span>: ExtractJwt.fromAuthHeaderAsBearerToken(),</span><br><span class="line">      <span class="attr">ignoreExpiration</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">secretOrKey</span>: config.jwt.secret,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  validate(payload: JwtPayload): JwtPayload &#123;</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Dockerizing"><a href="#Dockerizing" class="headerlink" title="Dockerizing"></a>Dockerizing</h2><p>参考: <a href="https://nodejs.org/zh-cn/docs/guides/nodejs-docker-webapp/">把一个 Node.js web 应用程序给 Docker 化</a><br>新建文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">touch Dockerfile</span><br><span class="line">touch .dockerignore</span><br><span class="line">touch docker<span class="literal">-compose</span>.prod.yml</span><br></pre></td></tr></table></figure>

<p>.env</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NODE_ENV=production</span><br><span class="line">PORT=3000</span><br><span class="line">SECRET=secret-key</span><br><span class="line">LOG_LEVEL=debug</span><br><span class="line"># DB_HOST=db</span><br><span class="line">DB_NAME=ddmtdb</span><br><span class="line">DB_USERNAME=root</span><br><span class="line">DB_PASSWORD=rootpass</span><br><span class="line">DB_PORT=3306</span><br><span class="line">ADMINER_THEME=pepa-linha</span><br><span class="line">ADMINER_PORT=8080</span><br></pre></td></tr></table></figure>

<p>.dockerignore</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node_modules</span><br><span class="line">npm-debug.log</span><br><span class="line">yarn-error.log</span><br></pre></td></tr></table></figure>

<p>Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create app directory</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A wildcard is used to ensure both package.json AND package-lock.json are copied</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> package*.json ./</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install necessary tools for bcrypt to run in docker before npm install</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y build-essential &amp;&amp; apt-get install -y python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install app dependencies</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">10</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create app directory</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=0 /usr/src/app .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">&quot;npm&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;start:prod&quot;</span> ]</span></span><br></pre></td></tr></table></figure>

<p>docker-compose.prod.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use root/example as user/password credentials</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nest-web-api:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">adminer</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">$&#123;DB_PASSWORD&#125;</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">$&#123;DB_NAME&#125;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$&#123;DB_PORT&#125;:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">adminer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">adminer</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ADMINER_DESIGN:</span> <span class="string">$&#123;ADMINER_THEME&#125;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;ADMINER_PORT&#125;:8080</span></span><br></pre></td></tr></table></figure>

<p>package.json script</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;start:prod&quot;</span>: <span class="string">&quot;npm run build &amp;&amp; node dist/main&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;db&quot;</span>: <span class="string">&quot;docker-compose up -d&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;deploy&quot;</span>: <span class="string">&quot;docker-compose -f docker-compose.prod.yml up&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>README.md</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section">## Dockerizing</span></span><br><span class="line"></span><br><span class="line"><span class="section">### development</span></span><br><span class="line">.env</span><br><span class="line"><span class="code">```</span></span><br><span class="line"><span class="code">NODE_ENV=development</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="code">```bash</span></span><br><span class="line"><span class="code">yarn db</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="section">### deploy</span></span><br><span class="line">.env</span><br><span class="line"><span class="code">```</span></span><br><span class="line"><span class="code">NODE_ENV=production</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="code">```bash</span></span><br><span class="line"><span class="code">yarn deploy</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li><a href="https://www.jianshu.com/p/92ca0bfbd52f">单体架构,SOA架构,微服务架构,分布式架构,集群架构</a></li>
<li><a href="https://www.zhihu.com/question/62041885/answer/579606144">云服务器都能用来做什么？</a></li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到这种程度就足够支撑基本的单体架构应用的开发了， 更多的应用优化(如缓存, 日志监控分析)与开发概念(如 DDD, microservices, serverless)，则需要到业务中去沉淀一番才能有所总结。<br>再进一步: [DDD and Microservices][]</p>
]]></content>
      <tags>
        <tag>初级后端</tag>
        <tag>转型计划</tag>
      </tags>
  </entry>
  <entry>
    <title>转型计划之初级后端(中)</title>
    <url>/2019/12/31/%E8%BD%AC%E5%9E%8B%E8%AE%A1%E5%88%92%E4%B9%8B%E5%88%9D%E7%BA%A7%E5%90%8E%E7%AB%AF-%E4%B8%AD/</url>
    <content><![CDATA[<p><img src="http://r.photo.store.qq.com/psc?/V12iDrZG1mzmnh/uMeul31pGB4ZvQm8Ou4xcdR2daHKd13U6t.v6WRly*a.CgaDhpSzGeas6iqBV.dNLGWNm5.BojkFMm6lUpcbLd0uFVhQzCZ07NWNUWrADSs!/r" alt="年轻人， 你渴望力量吗"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://floatsyi.com/2019/12/30/%E8%BD%AC%E5%9E%8B%E8%AE%A1%E5%88%92%E4%B9%8B%E5%88%9D%E7%BA%A7%E5%90%8E%E7%AB%AF-%E4%B8%8A/">转型计划之初级后端(上)</a></li>
<li><a href="https://floatsyi.com/2019/12/29/Securely-build-share-and-run-any-application-anywhere-docker/">Securely build, share and run any application, anywhere: docker</a></li>
<li><a href="https://floatsyi.com/2019/10/07/%E6%9C%89%E7%B1%BB%E5%9E%8B%E7%9A%84-javascript-typescript/">有类型的 javascript : typescript</a></li>
<li><a href="https://docs.nestjs.com/">docs.nestjs.com</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/28621374">精读 《Nestjs 文档》</a></li>
<li><a href="https://github.com/OAI/OpenAPI-Specification">OpenAPI-Specification</a></li>
<li><a href="https://docs.nestjs.com/recipes/swagger">OpenAPI（Swagger）</a></li>
<li><a href="https://github.com/MarkNjunge/nest-starter">nest-starter</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/nodejs/node">nodejs</a></li>
<li><a href="https://github.com/microsoft/TypeScript">typescript</a></li>
<li><a href="https://github.com/nestjs/nest">nestjs</a></li>
<li><a href="https://github.com/typeorm/typeorm">typeorm</a></li>
<li><a href="https://github.com/mysqljs/mysql">mysql</a></li>
<li><a href="https://github.com/topics/docker">docker</a></li>
<li><a href="https://github.com/lujakob/nestjs-realworld-example-app">nestjs-realworld-example-app</a></li>
<li><a href="https://yeoman.io/">yeoman</a></li>
<li><a href="https://hub.docker.com/_/mysql">hub.docker.com: mysql</a></li>
<li><a href="https://github.com/babel/babel">babel</a></li>
<li><a href="https://github.com/TypeStrong/ts-node">ts-node</a></li>
<li><a href="https://github.com/topcoder-platform/challenge-api">challenge-api</a></li>
<li><a href="https://www.getpostman.com/">postman</a></li>
<li><a href="https://github.com/winstonjs/winston">winston</a></li>
<li><a href="https://github.com/gremo/nest-winston">nestjs-winston</a></li>
<li><a href="https://github.com/remy/nodemon">nodemon</a></li>
<li><a href="https://github.com/ReactiveX/rxjs">rxjs</a></li>
<li><a href="https://github.com/typestack/class-validator">class-validator</a></li>
<li><a href="https://github.com/typestack/class-transformer">class-transformer</a></li>
</ul>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://floatsyi.com/2019/12/30/%E8%BD%AC%E5%9E%8B%E8%AE%A1%E5%88%92%E4%B9%8B%E5%88%9D%E7%BA%A7%E5%90%8E%E7%AB%AF-%E4%B8%8A/">转型计划之初级后端(上)</a> 是解剖分析部分， 这篇是重构部分，利用完整的重构来检验自己是否已经达到融会贯通的程度。</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul>
<li><a href="https://floatsyi.com/2019/12/30/%E8%BD%AC%E5%9E%8B%E8%AE%A1%E5%88%92%E4%B9%8B%E5%88%9D%E7%BA%A7%E5%90%8E%E7%AB%AF-%E4%B8%8A/">转型计划之初级后端(上)</a></li>
<li><a href="https://floatsyi.com/2019/12/29/Securely-build-share-and-run-any-application-anywhere-docker/">Securely build, share and run any application, anywhere: docker</a></li>
<li><a href="https://floatsyi.com/2019/10/07/%E6%9C%89%E7%B1%BB%E5%9E%8B%E7%9A%84-javascript-typescript/">有类型的 javascript : typescript</a></li>
<li><a href="https://docs.nestjs.com/">docs.nestjs.com</a></li>
<li><a href="https://github.com/OAI/OpenAPI-Specification">OpenAPI-Specification</a></li>
<li><a href="https://cn.rx.js.org/">rxjs 中文网</a></li>
</ul>
<h2 id="分析样板"><a href="#分析样板" class="headerlink" title="分析样板"></a>分析样板</h2><h3 id="寻找合适的样板"><a href="#寻找合适的样板" class="headerlink" title="寻找合适的样板"></a>寻找合适的样板</h3><p>第一步当然是要找一个好的 Boilerplate， 一般情况下是在 <a href="https://yeoman.io/">yeoman</a> 这个网站找<br>这里我在了解学习 nestjs 的过程中在 github 上发现了一个很不错的 Boilerplate: <a href="https://github.com/lujakob/nestjs-realworld-example-app">nestjs-realworld-example-app</a>, 所以就决定是它了。</p>
<h3 id="使用-mysql-容器"><a href="#使用-mysql-容器" class="headerlink" title="使用 mysql 容器"></a>使用 mysql 容器</h3><p>先把 <a href="https://github.com/lujakob/nestjs-realworld-example-app">nestjs-realworld-example-app</a> <code>git clone https://github.com/lujakob/nestjs-realworld-example-app.git</code> 到本地<br>然后读 README.md 文档，查看开发环境是否符合要求，然后按照 README.md 文档的提示将这个 Boilerplate 运行起来, 确保没有错误发生。</p>
<p>按照  README.md 文档的要求， 需要安装 mysql 数据库，这里我一开始是决定使用 WSL 来做这件事情， 但不久前，我看完了 docker 的文档，所以决定使用 docker 来做这件事情， 这样更符合现代的开发部署流程。<br>docker 的安装与使用请参考: <a href="https://floatsyi.com/2019/12/29/Securely-build-share-and-run-any-application-anywhere-docker/">Securely build, share and run any application, anywhere: docker</a><br>在项目根目录 <code>mkdir mysql</code> <code>touch docker-compose.yml</code><br>docker-compose.yml:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">rootpassword</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">nestjsrealworld</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">adminer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">adminer</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure>
<p>  docker-compose.yml 配置文件的编写请参考: <a href="https://hub.docker.com/_/mysql">hub.docker.com: mysql</a><br>  然后按照 README.md 要求 <code>cp ormconfig.json.example ormconfig.json</code><br>  然后修改 ormconfig.json 内容如下:<br>  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;mysql&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;port&quot;</span>: <span class="number">3306</span>,</span><br><span class="line">  <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;rootpassword&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;database&quot;</span>: <span class="string">&quot;nestjsrealworld&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;entities&quot;</span>: [<span class="string">&quot;src/**/**.entity&#123;.ts,.js&#125;&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;synchronize&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在 README.md 要求的开发环境已经准备好了， 只需查看 package.json 的 script 字段<br>在这里加入了 <code>&quot;db&quot;: &quot;docker-compose up -d&quot;</code> 一行<br>package.json:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;node index.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start:watch&quot;</span>: <span class="string">&quot;nodemon&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;prestart:prod&quot;</span>: <span class="string">&quot;tsc&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start:prod&quot;</span>: <span class="string">&quot;node dist/main.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;jest --config=jest.config.json --forceExit&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test:watch&quot;</span>: <span class="string">&quot;jest --watch --config=jest.config.json&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test:coverage&quot;</span>: <span class="string">&quot;jest --config=jest.config.json --coverage --coverageDirectory=coverage&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;db&quot;</span>: <span class="string">&quot;docker-compose up -d&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  现在先后执行 <code>npm run db</code> <code>npm run start</code>  项目就运行起来了。<br>  默认情况下 docker 是开机自启动的， 这样子就算你重启计算机 docker 也会自动运行你设置的 <code>restart: always</code> 容器<br>  因此 <code>npm run db</code> 只需要首次执行时， 执行一次即可.</p>
<h3 id="分析入口文件"><a href="#分析入口文件" class="headerlink" title="分析入口文件"></a>分析入口文件</h3><p>确保项目能够运行后， 打开入口文件 <a href="https://sourcegraph.com/github.com/lujakob/nestjs-realworld-example-app/-/blob/index.js">index.js</a><br>index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;ts-node/register&#x27;</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./src/main&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>  竟然是个 js 文件， 而不是 ts.<br>  可以看到这里引入了一个 <a href="https://github.com/TypeStrong/ts-node">ts-node</a> 的 register， 然后才是真正的入口文件 <a href="https://sourcegraph.com/github.com/lujakob/nestjs-realworld-example-app/-/blob/src/main.ts">‘./src/main’</a><br>  如果你用过 <a href="https://github.com/babel/babel">babel</a> 的话， 你就会知道 <a href="https://github.com/babel/babel">babel</a> 也有一个 @babel/register， 可以直接运行 ES Next 的代码.<br>  那么这个 <a href="https://github.com/TypeStrong/ts-node">ts-node</a> 应该就是可以直接运行 <a href="https://github.com/microsoft/TypeScript">ts</a> 的 <a href="https://github.com/nodejs/node">nodejs</a> 了.<br>  这可是一个好东西， 所以点开 <a href="https://github.com/TypeStrong/ts-node">ts-node</a> 点个 star 然后继续查看真正的入口文件 <a href="https://sourcegraph.com/github.com/lujakob/nestjs-realworld-example-app/-/blob/src/main.ts">‘./src/main’</a><br>main.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NestFactory &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ApplicationModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; SwaggerModule, DocumentBuilder &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/swagger&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span> (<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">void</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> appOptions = &#123; <span class="attr">cors</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(ApplicationModule, appOptions)</span><br><span class="line">  app.setGlobalPrefix(<span class="string">&#x27;api&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = <span class="keyword">new</span> DocumentBuilder()</span><br><span class="line">    .setTitle(<span class="string">&#x27;NestJS Realworld Example App&#x27;</span>)</span><br><span class="line">    .setDescription(<span class="string">&#x27;The Realworld API description&#x27;</span>)</span><br><span class="line">    .setVersion(<span class="string">&#x27;1.0&#x27;</span>)</span><br><span class="line">    .setBasePath(<span class="string">&#x27;api&#x27;</span>)</span><br><span class="line">    .addBearerAuth()</span><br><span class="line">    .build()</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">document</span> = SwaggerModule.createDocument(app, options)</span><br><span class="line">  SwaggerModule.setup(<span class="string">&#x27;/docs&#x27;</span>, app, <span class="built_in">document</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> app.listen(<span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/no-floating-promises</span></span><br><span class="line">bootstrap()</span><br></pre></td></tr></table></figure>
<p>  这里我们可以看到入口文件的意图很明显， 定义并执行了一个 bootstrap 函数， bootstrap 函数做了两件事情:</p>
<ol>
<li><p>一个是使用 NestFactory 工厂类的静态方法 create 返回一个实现 INestApplication 接口的应用程序对象</p>
</li>
<li><p>还有一件事情是添加了一个新的路由 ‘/docs’, 指向 Swagger UI 页面。<br>Swagger UI 这里不做展开， 请参考: <a href="https://docs.nestjs.com/recipes/swagger">OpenAPI（Swagger）</a></p>
</li>
</ol>
<p>值得一提的是， nest 官网文档 <a href="https://docs.nestjs.com/">docs.nestjs.com</a> 说:</p>
<blockquote>
<p>NestFactory exposes a few static methods that allow creating an application instance. The create() method returns an application object, which fulfills the INestApplication interface.</p>
</blockquote>
<p>关键字 <strong>static methods</strong>, 这里我看了 NestFactory 方法的实现: <a href="https://sourcegraph.com/github.com/nestjs/nest/-/blob/packages/core/nest-factory.ts#L252:14">github.com/nestjs/nest/-/blob/packages/core/nest-factory.ts#L252:14</a> 发现并不是我想象的 <em>类 NestFactory 上定义了一个 NestFactory.create 的静态方法</em>，而是 NestFactory 只是类 NestFactoryStatic 的实例， 而所谓的静态方法只是 NestFactoryStatic 类的成员方法。<br>可是 typescript 明明支持 static 关键字啊！！为什么要定义一个 NestFactoryStatic 类？ NestFactoryStatic类的名字里有个 Static， 所以它的成员方法就变为静态方法也是比较有意思的地方。<em>静态</em>类的成员方法简称静态方法， 很合理。哈哈。<br>同样值得一提的是，静态方法 create 是一个多态方法， 这一点文档里面没有提到， 而且它的返回值竟然是一个被 new Proxy 代理包装后的对象: [github.com/nestjs/nest/-/blob/packages/core/nest-factory.ts#L228:17]:<a href="https://sourcegraph.com/github.com/nestjs/nest/-/blob/packages/core/nest-factory.ts#L228:17">https://sourcegraph.com/github.com/nestjs/nest/-/blob/packages/core/nest-factory.ts#L228:17</a><br>其实 NestFactory 的实现是没必要去知道的， 如果一个 api 必须看源码才能知道怎么用， 这是违反最小知识原则， 只是觉得有趣纪录一下。<br><img src="http://r.photo.store.qq.com/psc?/V12iDrZG1mzmnh/uMeul31pGB4ZvQm8Ou4xcbjLXnvGTHkHhtZOEjIHS1aECdpA3zT9vAep9ksCH7F9.2ulP3cU34*17Ls1cSqSgcbGmBfh6JT*pHbyyKwd7zA!/r" alt="wczgsxhnba"><br>真正需要了解的是 create 的参数: appOptions, 这个时候静态类型语言的优势就体现出来了， 可以选中 create 直接按快捷键 <code>F12</code> 找到 create 的类型定义</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">create&lt;T <span class="keyword">extends</span> INestApplication = INestApplication&gt;(<span class="built_in">module</span>: <span class="built_in">any</span>, options?: NestApplicationOptions): <span class="built_in">Promise</span>&lt;T&gt;;</span><br></pre></td></tr></table></figure>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">create&lt;T <span class="keyword">extends</span> INestApplication = INestApplication&gt;(<span class="built_in">module</span>: <span class="built_in">any</span>, <span class="attr">httpAdapter</span>: AbstractHttpAdapter, options?: NestApplicationOptions): <span class="built_in">Promise</span>&lt;T&gt;;</span><br></pre></td></tr></table></figure>

<p>options 是一个可选的， 需要尊重 NestApplicationOptions 类型的对象， 选中 NestApplicationOptions 继续按快捷键 <code>F12</code>：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CorsOptions &#125; <span class="keyword">from</span> <span class="string">&#x27;./external/cors-options.interface&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpsOptions &#125; <span class="keyword">from</span> <span class="string">&#x27;./external/https-options.interface&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NestApplicationContextOptions &#125; <span class="keyword">from</span> <span class="string">&#x27;./nest-application-context-options.interface&#x27;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@publicApi</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> NestApplicationOptions <span class="keyword">extends</span> NestApplicationContextOptions &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * CORS options from [CORS package](https://github.com/expressjs/cors#configuration-options)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    cors?: <span class="built_in">boolean</span> | CorsOptions;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Whether to use underlying platform body parser.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    bodyParser?: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set of configurable HTTPS options</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    httpsOptions?: HttpsOptions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>写的很明白， 没什么好说的。<br>入口文件分析完毕， 服务器运行在 3000 端口， 所以可以点开 <a href="http://127.0.0.1:3000/docs/">http://127.0.0.1:3000/docs/</a> 玩玩 Swagger UI</p>
<h3 id="分析-module"><a href="#分析-module" class="headerlink" title="分析 module"></a>分析 module</h3><p>接下来就可以看一看入口文件中导入的 <a href="https://sourcegraph.com/github.com/lujakob/nestjs-realworld-example-app/-/blob/src/app.module.ts">‘./app.module’</a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ArticleModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./article/article.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; UserModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./user/user.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TypeOrmModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Connection &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ProfileModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile/profile.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TagModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./tag/tag.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    TypeOrmModule.forRoot(),</span><br><span class="line">    ArticleModule,</span><br><span class="line">    UserModule,</span><br><span class="line">    ProfileModule,</span><br><span class="line">    TagModule</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">controllers</span>: [</span><br><span class="line">    AppController</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: []</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationModule</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> connection: Connection</span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  可以看到 app.module 导入了所有的业务模块（module 与 controller）， 这里可以对照一下项目结构</p>
<p>  可以发现所有的业务模块都使用单独一个文件夹区分， 每个业务模块中都有 module controller service entity interface 和 dto， 同样的所有的单个业务模块的这些文件在 module 里面被注入。 module 是单个业务模块的中心， 而所有的业务模块都向 app.module 汇集。<br>  从单个业务模块向入口文件看， 应用逻辑呈收敛状， 反之则呈放射状。<br>  而且可以看到 module implements NestModule  的 configure(consumer: MiddlewareConsumer)  方法 有一个被注入的 consumer: MiddlewareConsumer<br>  对象， 这个 consumer 对象, 可以给所有在此声明的路径与方法应用中间件。 如果要用一个词形容 module 的话， 那就是中心化。<br>article.module.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [TypeOrmModule.forFeature([ArticleEntity, Comment, UserEntity, FollowsEntity]), UserModule],</span><br><span class="line">  <span class="attr">providers</span>: [ArticleService],</span><br><span class="line">  <span class="attr">controllers</span>: [</span><br><span class="line">    ArticleController</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleModule</span> <span class="title">implements</span> <span class="title">NestModule</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">configure</span>(<span class="params">consumer: MiddlewareConsumer</span>)</span> &#123;</span><br><span class="line">    consumer</span><br><span class="line">      .apply(AuthMiddleware)</span><br><span class="line">      .forRoutes(</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;articles/feed&#x27;</span>, <span class="attr">method</span>: RequestMethod.GET&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;articles&#x27;</span>, <span class="attr">method</span>: RequestMethod.POST&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;articles/:slug&#x27;</span>, <span class="attr">method</span>: RequestMethod.DELETE&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;articles/:slug&#x27;</span>, <span class="attr">method</span>: RequestMethod.PUT&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;articles/:slug/comments&#x27;</span>, <span class="attr">method</span>: RequestMethod.POST&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;articles/:slug/comments/:id&#x27;</span>, <span class="attr">method</span>: RequestMethod.DELETE&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;articles/:slug/favorite&#x27;</span>, <span class="attr">method</span>: RequestMethod.POST&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;articles/:slug/favorite&#x27;</span>, <span class="attr">method</span>: RequestMethod.DELETE&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  值得注意的是这一行中 <code>imports: [TypeOrmModule.forFeature([ArticleEntity, Comment, UserEntity, FollowsEntity]), UserModule],</code> 除了 UserModule 其他都是与数据库对应的 Entity， 这个 UserModule 的特殊之处是通过 <code>exports: [UserService]</code> 导出了 UserService (在 user.module.ts 文件中)， 使得所有 imports UserModule 的 Controller 都可以使用 UserService。 这一点(Shared modules)在 <a href="https://github.com/nestjs/nest">nestjs</a> 的官方文档中已经说的很清楚了: <a href="https://docs.nestjs.com/modules">https://docs.nestjs.com/modules</a>:</p>
<blockquote>
<p>Now any module that imports the CatsModule has access to the CatsService and will share the same instance with all other modules that import it as well.</p>
</blockquote>
<h3 id="分析-controller"><a href="#分析-controller" class="headerlink" title="分析 controller"></a>分析 controller</h3><p>module 看完后看 controller<br>article.controller.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Get, Post, Body, Put, Delete, Query, Param, Controller &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Request &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ArticleService &#125; <span class="keyword">from</span> <span class="string">&#x27;./article.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; CreateArticleDto, CreateCommentDto &#125; <span class="keyword">from</span> <span class="string">&#x27;./dto&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ArticlesRO, ArticleRO, CommentsRO &#125; <span class="keyword">from</span> <span class="string">&#x27;./article.interface&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; User &#125; <span class="keyword">from</span> <span class="string">&#x27;../user/user.decorator&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  ApiUseTags,</span><br><span class="line">  ApiBearerAuth,</span><br><span class="line">  ApiResponse,</span><br><span class="line">  ApiOperation</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/swagger&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiBearerAuth</span>()</span><br><span class="line"><span class="meta">@ApiUseTags</span>(<span class="string">&#x27;articles&#x27;</span>)</span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;articles&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> articleService: ArticleService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiOperation</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;Get all articles&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@ApiResponse</span>(&#123; <span class="attr">status</span>: <span class="number">200</span>, <span class="attr">description</span>: <span class="string">&#x27;Return all articles.&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="keyword">async</span> findAll (<span class="meta">@Query</span>() query): <span class="built_in">Promise</span>&lt;ArticlesRO&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.articleService.findAll(query)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;:slug&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> findOne (<span class="meta">@Param</span>(<span class="string">&#x27;slug&#x27;</span>) slug): <span class="built_in">Promise</span>&lt;ArticleRO&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.articleService.findOne(&#123; slug &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;:slug/comments&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> findComments (<span class="meta">@Param</span>(<span class="string">&#x27;slug&#x27;</span>) slug): <span class="built_in">Promise</span>&lt;CommentsRO&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.articleService.findComments(slug)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiOperation</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;Create article&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@ApiResponse</span>(&#123; <span class="attr">status</span>: <span class="number">201</span>, <span class="attr">description</span>: <span class="string">&#x27;The article has been successfully created.&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@ApiResponse</span>(&#123; <span class="attr">status</span>: <span class="number">403</span>, <span class="attr">description</span>: <span class="string">&#x27;Forbidden.&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="keyword">async</span> create (<span class="meta">@User</span>(<span class="string">&#x27;id&#x27;</span>) userId: <span class="built_in">number</span>, <span class="meta">@Body</span>(<span class="string">&#x27;article&#x27;</span>) articleData: CreateArticleDto) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.articleService.create(userId, articleData)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiOperation</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;Update article&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@ApiResponse</span>(&#123; <span class="attr">status</span>: <span class="number">201</span>, <span class="attr">description</span>: <span class="string">&#x27;The article has been successfully updated.&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@ApiResponse</span>(&#123; <span class="attr">status</span>: <span class="number">403</span>, <span class="attr">description</span>: <span class="string">&#x27;Forbidden.&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@Put</span>(<span class="string">&#x27;:slug&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> update (<span class="meta">@Param</span>() params, <span class="meta">@Body</span>(<span class="string">&#x27;article&#x27;</span>) articleData: CreateArticleDto) &#123;</span><br><span class="line">    <span class="comment">// Todo: update slug also when title gets changed</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.articleService.update(params.slug, articleData)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiOperation</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;Delete article&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@ApiResponse</span>(&#123; <span class="attr">status</span>: <span class="number">201</span>, <span class="attr">description</span>: <span class="string">&#x27;The article has been successfully deleted.&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@ApiResponse</span>(&#123; <span class="attr">status</span>: <span class="number">403</span>, <span class="attr">description</span>: <span class="string">&#x27;Forbidden.&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@Delete</span>(<span class="string">&#x27;:slug&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">delete</span> (<span class="meta">@Param</span>() params) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.articleService.delete(params.slug)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiOperation</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;Create comment&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@ApiResponse</span>(&#123; <span class="attr">status</span>: <span class="number">201</span>, <span class="attr">description</span>: <span class="string">&#x27;The comment has been successfully created.&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@ApiResponse</span>(&#123; <span class="attr">status</span>: <span class="number">403</span>, <span class="attr">description</span>: <span class="string">&#x27;Forbidden.&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;:slug/comments&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> createComment (<span class="meta">@Param</span>(<span class="string">&#x27;slug&#x27;</span>) slug, <span class="meta">@Body</span>(<span class="string">&#x27;comment&#x27;</span>) commentData: CreateCommentDto) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.articleService.addComment(slug, commentData)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiOperation</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;Delete comment&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@ApiResponse</span>(&#123; <span class="attr">status</span>: <span class="number">201</span>, <span class="attr">description</span>: <span class="string">&#x27;The article has been successfully deleted.&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@ApiResponse</span>(&#123; <span class="attr">status</span>: <span class="number">403</span>, <span class="attr">description</span>: <span class="string">&#x27;Forbidden.&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@Delete</span>(<span class="string">&#x27;:slug/comments/:id&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> deleteComment (<span class="meta">@Param</span>() params) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; slug, id &#125; = params</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.articleService.deleteComment(slug, id)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiOperation</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;Favorite article&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@ApiResponse</span>(&#123; <span class="attr">status</span>: <span class="number">201</span>, <span class="attr">description</span>: <span class="string">&#x27;The article has been successfully favorited.&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@ApiResponse</span>(&#123; <span class="attr">status</span>: <span class="number">403</span>, <span class="attr">description</span>: <span class="string">&#x27;Forbidden.&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;:slug/favorite&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> favorite (<span class="meta">@User</span>(<span class="string">&#x27;id&#x27;</span>) userId: <span class="built_in">number</span>, <span class="meta">@Param</span>(<span class="string">&#x27;slug&#x27;</span>) slug) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.articleService.favorite(userId, slug)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiOperation</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;Unfavorite article&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@ApiResponse</span>(&#123; <span class="attr">status</span>: <span class="number">201</span>, <span class="attr">description</span>: <span class="string">&#x27;The article has been successfully unfavorited.&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@ApiResponse</span>(&#123; <span class="attr">status</span>: <span class="number">403</span>, <span class="attr">description</span>: <span class="string">&#x27;Forbidden.&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@Delete</span>(<span class="string">&#x27;:slug/favorite&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> unFavorite (<span class="meta">@User</span>(<span class="string">&#x27;id&#x27;</span>) userId: <span class="built_in">number</span>, <span class="meta">@Param</span>(<span class="string">&#x27;slug&#x27;</span>) slug) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.articleService.unFavorite(userId, slug)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiOperation</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;Get article feed&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@ApiResponse</span>(&#123; <span class="attr">status</span>: <span class="number">200</span>, <span class="attr">description</span>: <span class="string">&#x27;Return article feed.&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@ApiResponse</span>(&#123; <span class="attr">status</span>: <span class="number">403</span>, <span class="attr">description</span>: <span class="string">&#x27;Forbidden.&#x27;</span> &#125;)</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;feed&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> getFeed (<span class="meta">@User</span>(<span class="string">&#x27;id&#x27;</span>) userId: <span class="built_in">number</span>, <span class="meta">@Query</span>() query): <span class="built_in">Promise</span>&lt;ArticlesRO&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.articleService.findFeed(userId, query)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  在 <a href="https://floatsyi.com/2019/12/30/%E8%BD%AC%E5%9E%8B%E8%AE%A1%E5%88%92%E4%B9%8B%E5%88%9D%E7%BA%A7%E5%90%8E%E7%AB%AF-%E4%B8%8A/">转型计划之初级后端(上)</a> 分析的那个 <a href="https://github.com/topcoder-platform/challenge-api">challenge-api</a> 项目中， 路由注册是通过 app-routes.js 遍历一个中心化的 <a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/src/routes.js#L2:4">‘./src/routes’</a> 将 ‘./src/controllers’ 中定义的 controllers 与 ‘./src/routes’ 中定义的 routes 给一一对应上的这种方式实现的。<br>  而 nest 中的 controller 却恰恰相反， 路由是完全去中心化的， 中心化的工作交给了 module 去做。<br>  可以看到 ArticleController 的  constructor 中莫名其妙多了一个 articleService， 这是通过 module 注入进来的，即所谓的控制反转， 依赖注入。<br>  具体请参考: <a href="https://docs.nestjs.com/controllers">https://docs.nestjs.com/controllers</a></p>
<h3 id="分析-service"><a href="#分析-service" class="headerlink" title="分析 service"></a>分析 service</h3><p>接下来看 Service， Service 是大部分业务逻辑的承载者。<br>article.service.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; InjectRepository &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Repository, getRepository, DeleteResult &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ArticleEntity &#125; <span class="keyword">from</span> <span class="string">&#x27;./article.entity&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Comment &#125; <span class="keyword">from</span> <span class="string">&#x27;./comment.entity&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserEntity &#125; <span class="keyword">from</span> <span class="string">&#x27;../user/user.entity&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; FollowsEntity &#125; <span class="keyword">from</span> <span class="string">&#x27;../profile/follows.entity&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; CreateArticleDto &#125; <span class="keyword">from</span> <span class="string">&#x27;./dto&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ArticleRO, ArticlesRO, CommentsRO &#125; <span class="keyword">from</span> <span class="string">&#x27;./article.interface&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> slug <span class="keyword">from</span> <span class="string">&#x27;slug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleService</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@InjectRepository</span>(ArticleEntity)</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> articleRepository: Repository&lt;ArticleEntity&gt;,</span></span><br><span class="line"><span class="params">    <span class="meta">@InjectRepository</span>(Comment)</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> commentRepository: Repository&lt;Comment&gt;,</span></span><br><span class="line"><span class="params">    <span class="meta">@InjectRepository</span>(UserEntity)</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> userRepository: Repository&lt;UserEntity&gt;,</span></span><br><span class="line"><span class="params">    <span class="meta">@InjectRepository</span>(FollowsEntity)</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> followsRepository: Repository&lt;FollowsEntity&gt;</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> findAll (query): <span class="built_in">Promise</span>&lt;ArticlesRO&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> qb = <span class="keyword">await</span> getRepository(ArticleEntity)</span><br><span class="line">      .createQueryBuilder(<span class="string">&#x27;article&#x27;</span>)</span><br><span class="line">      .leftJoinAndSelect(<span class="string">&#x27;article.author&#x27;</span>, <span class="string">&#x27;author&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    qb.where(<span class="string">&#x27;1 = 1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;tag&#x27;</span> <span class="keyword">in</span> query) &#123;</span><br><span class="line">      qb.andWhere(<span class="string">&#x27;article.tagList LIKE :tag&#x27;</span>, &#123; <span class="attr">tag</span>: <span class="string">`%<span class="subst">$&#123;query.tag&#125;</span>%`</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;author&#x27;</span> <span class="keyword">in</span> query) &#123;</span><br><span class="line">      <span class="keyword">const</span> author = <span class="keyword">await</span> <span class="built_in">this</span>.userRepository.findOne(&#123;</span><br><span class="line">        <span class="attr">username</span>: query.author</span><br><span class="line">      &#125;)</span><br><span class="line">      qb.andWhere(<span class="string">&#x27;article.authorId = :id&#x27;</span>, &#123; <span class="attr">id</span>: author.id &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;favorited&#x27;</span> <span class="keyword">in</span> query) &#123;</span><br><span class="line">      <span class="keyword">const</span> author = <span class="keyword">await</span> <span class="built_in">this</span>.userRepository.findOne(&#123;</span><br><span class="line">        <span class="attr">username</span>: query.favorited</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">const</span> ids = author.favorites.map(<span class="function"><span class="params">el</span> =&gt;</span> el.id)</span><br><span class="line">      qb.andWhere(<span class="string">&#x27;article.authorId IN (:ids)&#x27;</span>, &#123; ids &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    qb.orderBy(<span class="string">&#x27;article.created&#x27;</span>, <span class="string">&#x27;DESC&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> articlesCount = <span class="keyword">await</span> qb.getCount()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;limit&#x27;</span> <span class="keyword">in</span> query) &#123;</span><br><span class="line">      qb.limit(query.limit)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;offset&#x27;</span> <span class="keyword">in</span> query) &#123;</span><br><span class="line">      qb.offset(query.offset)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> articles = <span class="keyword">await</span> qb.getMany()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; articles, articlesCount &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> findFeed (userId: <span class="built_in">number</span>, query): <span class="built_in">Promise</span>&lt;ArticlesRO&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> _follows = <span class="keyword">await</span> <span class="built_in">this</span>.followsRepository.find(&#123; <span class="attr">followerId</span>: userId &#125;)</span><br><span class="line">    <span class="keyword">const</span> ids = _follows.map(<span class="function"><span class="params">el</span> =&gt;</span> el.followingId)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> qb = <span class="keyword">await</span> getRepository(ArticleEntity)</span><br><span class="line">      .createQueryBuilder(<span class="string">&#x27;article&#x27;</span>)</span><br><span class="line">      .where(<span class="string">&#x27;article.authorId IN (:ids)&#x27;</span>, &#123; ids &#125;)</span><br><span class="line"></span><br><span class="line">    qb.orderBy(<span class="string">&#x27;article.created&#x27;</span>, <span class="string">&#x27;DESC&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> articlesCount = <span class="keyword">await</span> qb.getCount()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;limit&#x27;</span> <span class="keyword">in</span> query) &#123;</span><br><span class="line">      qb.limit(query.limit)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;offset&#x27;</span> <span class="keyword">in</span> query) &#123;</span><br><span class="line">      qb.offset(query.offset)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> articles = <span class="keyword">await</span> qb.getMany()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; articles, articlesCount &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> findOne (where): <span class="built_in">Promise</span>&lt;ArticleRO&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> article = <span class="keyword">await</span> <span class="built_in">this</span>.articleRepository.findOne(where)</span><br><span class="line">    <span class="keyword">return</span> &#123; article &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> addComment (slug: <span class="built_in">string</span>, commentData): <span class="built_in">Promise</span>&lt;ArticleRO&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> article = <span class="keyword">await</span> <span class="built_in">this</span>.articleRepository.findOne(&#123; slug &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> comment = <span class="keyword">new</span> Comment()</span><br><span class="line">    comment.body = commentData.body</span><br><span class="line"></span><br><span class="line">    article.comments.push(comment)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.commentRepository.save(comment)</span><br><span class="line">    article = <span class="keyword">await</span> <span class="built_in">this</span>.articleRepository.save(article)</span><br><span class="line">    <span class="keyword">return</span> &#123; article &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> deleteComment (slug: <span class="built_in">string</span>, <span class="attr">id</span>: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;ArticleRO&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> article = <span class="keyword">await</span> <span class="built_in">this</span>.articleRepository.findOne(&#123; slug &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> comment = <span class="keyword">await</span> <span class="built_in">this</span>.commentRepository.findOne(id)</span><br><span class="line">    <span class="keyword">const</span> deleteIndex = article.comments.findIndex(</span><br><span class="line">      <span class="function"><span class="params">_comment</span> =&gt;</span> _comment.id === comment.id</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deleteIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> deleteComments = article.comments.splice(deleteIndex, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">await</span> <span class="built_in">this</span>.commentRepository.delete(deleteComments[<span class="number">0</span>].id)</span><br><span class="line">      article = <span class="keyword">await</span> <span class="built_in">this</span>.articleRepository.save(article)</span><br><span class="line">      <span class="keyword">return</span> &#123; article &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; article &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> favorite (id: <span class="built_in">number</span>, <span class="attr">slug</span>: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;ArticleRO&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> article = <span class="keyword">await</span> <span class="built_in">this</span>.articleRepository.findOne(&#123; slug &#125;)</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="built_in">this</span>.userRepository.findOne(id)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> isNewFavorite =</span><br><span class="line">      user.favorites.findIndex(<span class="function"><span class="params">_article</span> =&gt;</span> _article.id === article.id) &lt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (isNewFavorite) &#123;</span><br><span class="line">      user.favorites.push(article)</span><br><span class="line">      article.favoriteCount++</span><br><span class="line"></span><br><span class="line">      <span class="keyword">await</span> <span class="built_in">this</span>.userRepository.save(user)</span><br><span class="line">      article = <span class="keyword">await</span> <span class="built_in">this</span>.articleRepository.save(article)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; article &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> unFavorite (id: <span class="built_in">number</span>, <span class="attr">slug</span>: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;ArticleRO&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> article = <span class="keyword">await</span> <span class="built_in">this</span>.articleRepository.findOne(&#123; slug &#125;)</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="built_in">this</span>.userRepository.findOne(id)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> deleteIndex = user.favorites.findIndex(</span><br><span class="line">      <span class="function"><span class="params">_article</span> =&gt;</span> _article.id === article.id</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deleteIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      user.favorites.splice(deleteIndex, <span class="number">1</span>)</span><br><span class="line">      article.favoriteCount--</span><br><span class="line"></span><br><span class="line">      <span class="keyword">await</span> <span class="built_in">this</span>.userRepository.save(user)</span><br><span class="line">      article = <span class="keyword">await</span> <span class="built_in">this</span>.articleRepository.save(article)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; article &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> findComments (slug: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;CommentsRO&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> article = <span class="keyword">await</span> <span class="built_in">this</span>.articleRepository.findOne(&#123; slug &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">comments</span>: article.comments &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> create (</span><br><span class="line">    userId: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">articleData</span>: CreateArticleDto</span><br><span class="line">  ): <span class="built_in">Promise</span>&lt;ArticleEntity&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> article = <span class="keyword">new</span> ArticleEntity()</span><br><span class="line">    article.title = articleData.title</span><br><span class="line">    article.description = articleData.description</span><br><span class="line">    article.slug = <span class="built_in">this</span>.slugify(articleData.title)</span><br><span class="line">    article.tagList = articleData.tagList || []</span><br><span class="line">    article.comments = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> newArticle = <span class="keyword">await</span> <span class="built_in">this</span>.articleRepository.save(article)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> author = <span class="keyword">await</span> <span class="built_in">this</span>.userRepository.findOne(&#123; <span class="attr">where</span>: &#123; <span class="attr">id</span>: userId &#125; &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(author.articles)) &#123;</span><br><span class="line">      author.articles.push(article)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      author.articles = [article]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.userRepository.save(author)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newArticle</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> update (slug: <span class="built_in">string</span>, <span class="attr">articleData</span>: <span class="built_in">any</span>): <span class="built_in">Promise</span>&lt;ArticleRO&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> toUpdate = <span class="keyword">await</span> <span class="built_in">this</span>.articleRepository.findOne(&#123; <span class="attr">slug</span>: slug &#125;)</span><br><span class="line">    <span class="keyword">const</span> updated = <span class="built_in">Object</span>.assign(toUpdate, articleData)</span><br><span class="line">    <span class="keyword">const</span> article = <span class="keyword">await</span> <span class="built_in">this</span>.articleRepository.save(updated)</span><br><span class="line">    <span class="keyword">return</span> &#123; article &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">delete</span> (slug: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;DeleteResult&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.articleRepository.delete(&#123; <span class="attr">slug</span>: slug &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  slugify (title: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;slug(title, &#123; lower: <span class="literal">true</span> &#125;)&#125;</span>-<span class="subst">$&#123;(</span></span></span><br><span class="line"><span class="subst"><span class="string">      (<span class="built_in">Math</span>.random() * <span class="built_in">Math</span>.pow(<span class="number">36</span>, <span class="number">6</span>)) |</span></span></span><br><span class="line"><span class="subst"><span class="string">      <span class="number">0</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    ).toString(<span class="number">36</span>)&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  可以看到， article.interface article.entity Dto 这些周边文件都是这个 article.service 的组成部分<br>  其中 article.entity 为与数据库表一一对应的实体， 可以直接根据 ER 图编写，打开 article.entity 你可以看到很多 @ManyToOne @OneToMany 这样的注解</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ManyToOne</span>(<span class="function"><span class="params">type</span> =&gt;</span> UserEntity, <span class="function"><span class="params">user</span> =&gt;</span> user.articles)</span><br><span class="line"><span class="attr">author</span>: UserEntity;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OneToMany</span>(<span class="function"><span class="params">type</span> =&gt;</span> Comment, <span class="function"><span class="params">comment</span> =&gt;</span> comment.article, &#123; <span class="attr">eager</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"><span class="meta">@JoinColumn</span>()</span><br><span class="line"><span class="attr">comments</span>: Comment[];</span><br></pre></td></tr></table></figure>
<p>  这些注解顾名思义就是用来描述数据库实体之间的关系的， 实体之间的关系这部分也在 ER 图中表现出来了。<br>  而 DTO (Data Transfer Object), 可以看到都是 service 里面一些函数需要操作的数据对象， 这部分是前端传递过来的。<br>  而 article.interface 定义了各种 RO， 所谓 RO 我的理解是 return object 的缩写。 这些都是返回给前端的数据对象。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  <strong>到这一步， 开发流程已经非常明朗了: 分析需求 &gt;&gt; 找出所有实体 &gt;&gt; 画 ER 图 &gt;&gt; 切分业务模块 &gt;&gt; 根据 ER 图编写 entity &gt;&gt; 编写 module 并在 app.module 导入 &gt;&gt; 编写 controller 的同时编写 service（此时按路由切分更细粒度的业务模块， 写好一个路由测试一个路由， 当然需要协同的除外）写完后在 module 导入 &gt;&gt; 使用 postman 测试路由 &gt;&gt; 完</strong></p>
<h2 id="改造样板"><a href="#改造样板" class="headerlink" title="改造样板"></a>改造样板</h2><p>现在已经分析完 <a href="https://github.com/lujakob/nestjs-realworld-example-app">nestjs-realworld-example-app</a> 这个样板的基本开发逻辑， 可以开始动手改造了</p>
<h3 id="日志与异常捕获-exception-filters-and-logger"><a href="#日志与异常捕获-exception-filters-and-logger" class="headerlink" title="日志与异常捕获(exception-filters and logger)"></a>日志与异常捕获(exception-filters and logger)</h3><p>首先要做的是将 <a href="https://github.com/topcoder-platform/challenge-api">challenge-api</a> 中的<a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/src/common/errors.js">error.js</a> 和 <a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/src/common/logger.js">logger.js</a> 重构过来<br><a href="https://github.com/nestjs/nest">nestjs</a> 其实已经做了这件事情， error.js 对应 <a href="https://docs.nestjs.com/exception-filters%EF%BC%8C">https://docs.nestjs.com/exception-filters，</a> 而 logger.js 对应 <a href="https://docs.nestjs.com/techniques/logger">https://docs.nestjs.com/techniques/logger</a></p>
<p>  继续回过头来看 <a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/src/common/logger.js#L10:55">logger.js</a><br>  logger.js<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createLogger, format, transports &#125; = <span class="built_in">require</span>(<span class="string">&#x27;winston&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = createLogger(&#123;</span><br><span class="line">  <span class="attr">level</span>: config.LOG_LEVEL,</span><br><span class="line">  <span class="attr">transports</span>: [</span><br><span class="line">    <span class="keyword">new</span> transports.Console(&#123;</span><br><span class="line">      <span class="attr">format</span>: format.combine(</span><br><span class="line">        format.colorize(),</span><br><span class="line">        format.simple()</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>  可以发现 logger.js 的引擎盖下(under the bonnet, 非常有意思的英语描述， 而中文习惯说: 驱动)是 <a href="https://github.com/winstonjs/winston">winston</a>.<br>  <a href="https://github.com/winstonjs/winston">winston</a> 可是一个好东西， 所以点开 <a href="https://github.com/winstonjs/winston">winston</a>  点个 star， 然后继续<br>  知道 logger.js 是使用了 <a href="https://github.com/winstonjs/winston">winston</a> 实现的后， 现在可以去 <a href="https://www.npmjs.com/">npm</a> 搜索下关键词 <strong>nest winston</strong> 或者 <strong>Nest Logging</strong>。<br>  如果没有的话， 就需要自己实现了。不过一直很幸运， 找到一个 <a href="https://github.com/gremo/nest-winston">nestjs-winston</a> 看 README.md 是符合要求的，点个 star 然后继续</p>
<blockquote>
<p>当你发现可见的人越来越少时，你就需要警惕了， 因为你不是走在时代的前沿， 就是走在未开垦的荒漠。其实这两点并不冲突。</p>
</blockquote>
<p>  安装运行时依赖: <code>npm install --save nest-winston winston</code> 然后根据 <a href="https://github.com/gremo/nest-winston/blob/master/README.md">README.md</a> 文档的指示结合 <a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/src/common/logger.js#L10:55">logger.js</a> 编写:<br>  config.ts<br>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SECRET = <span class="string">&#x27;secret-key&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> LOG_LEVEL = process.env.LOG_LEVEL || <span class="string">&#x27;debug&#x27;</span></span><br></pre></td></tr></table></figure></p>
<p>  app.controller.ts<br>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Get, Controller, Inject, HttpException, HttpStatus &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Logger &#125; <span class="keyword">from</span> <span class="string">&#x27;winston&#x27;</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;api&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppController</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="meta">@Inject</span>(<span class="string">&#x27;winston&#x27;</span>) <span class="keyword">private</span> <span class="keyword">readonly</span> logger: Logger</span>)</span> &#123; &#125;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  root (): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.logger.info(<span class="string">&#x27;access &#123;/, GET&#125; route&#x27;</span>, [AppController.name])</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="string">&#x27;Forbidden&#x27;</span>, HttpStatus.FORBIDDEN)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>  app.module.ts<br>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Connection &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; TypeOrmModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ArticleModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./article/article.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./user/user.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ProfileModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile/profile.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; TagModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./tag/tag.module&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; utilities <span class="keyword">as</span> nestWinstonModuleUtilities, WinstonModule &#125; <span class="keyword">from</span> <span class="string">&#x27;nest-winston&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> winston <span class="keyword">from</span> <span class="string">&#x27;winston&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; LOG_LEVEL &#125; <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; format, transports &#125; = winston</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    WinstonModule.forRoot(&#123;</span><br><span class="line">      <span class="comment">// options here</span></span><br><span class="line">      <span class="attr">level</span>: LOG_LEVEL,</span><br><span class="line">      <span class="attr">transports</span>: [</span><br><span class="line">        <span class="keyword">new</span> transports.Console(&#123;</span><br><span class="line">          <span class="attr">format</span>: format.combine(</span><br><span class="line">            format.colorize(),</span><br><span class="line">            nestWinstonModuleUtilities.format.nestLike()</span><br><span class="line">          )</span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;),</span><br><span class="line">    TypeOrmModule.forRoot(),</span><br><span class="line">    ArticleModule,</span><br><span class="line">    UserModule,</span><br><span class="line">    ProfileModule,</span><br><span class="line">    TagModule</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">controllers</span>: [</span><br><span class="line">    AppController</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: []</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationModule</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> connection: Connection</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>  main.ts<br>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NestFactory &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ApplicationModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; SwaggerModule, DocumentBuilder &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/swagger&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; WINSTON_MODULE_NEST_PROVIDER &#125; <span class="keyword">from</span> <span class="string">&#x27;nest-winston&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span> (<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">void</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> appOptions = &#123; <span class="attr">cors</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(ApplicationModule, appOptions)</span><br><span class="line">  app.setGlobalPrefix(<span class="string">&#x27;api&#x27;</span>)</span><br><span class="line">  app.useLogger(app.get(WINSTON_MODULE_NEST_PROVIDER))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = <span class="keyword">new</span> DocumentBuilder()</span><br><span class="line">    .setTitle(<span class="string">&#x27;NestJS Realworld Example App&#x27;</span>)</span><br><span class="line">    .setDescription(<span class="string">&#x27;The Realworld API description&#x27;</span>)</span><br><span class="line">    .setVersion(<span class="string">&#x27;1.0&#x27;</span>)</span><br><span class="line">    .setBasePath(<span class="string">&#x27;api&#x27;</span>)</span><br><span class="line">    .addBearerAuth()</span><br><span class="line">    .build()</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">document</span> = SwaggerModule.createDocument(app, options)</span><br><span class="line">  SwaggerModule.setup(<span class="string">&#x27;/docs&#x27;</span>, app, <span class="built_in">document</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> app.listen(<span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/no-floating-promises</span></span><br><span class="line">bootstrap()</span><br></pre></td></tr></table></figure></p>
<p>  修改完成后，执行 <code>npm run start:watch</code>, 可以在 package.json 的 scripts 字段中看到<br>  package.json<br>  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;node index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;start:watch&quot;</span>: <span class="string">&quot;nodemon&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>  npm run start:watch 实际执行的是 <a href="https://github.com/remy/nodemon">nodemon</a>， 而 <a href="https://github.com/remy/nodemon">nodemon</a> 实际执行的是 nodemon index.js -w ./src ， 而 nodemon index.js -w .src/ 实际执行的是 <code>require(&#39;ts-node/register&#39;);require(&#39;./src/main.ts&#39;)</code> 而…… 禁止套娃！！<br>  <a href="https://github.com/remy/nodemon">nodemon</a> 可是一个好东西，<a href="https://github.com/remy/nodemon">nodemon</a> 可以让应用支持热重载，这对节省开发时间很有帮助！ 所以点开  <a href="https://github.com/remy/nodemon">nodemon</a> 点个 star， 然后继续</p>
<p>  服务启动后访问 <a href="http://127.0.0.1:3000/api/api">http://127.0.0.1:3000/api/api</a>, 可以看到如下内容<br>  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;statusCode&quot;</span>: <span class="number">403</span>,</span><br><span class="line">  <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;Forbidden&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>  没错, 响应了一个带有错误消息的 json， 这是因为我刚在 app.controller.ts 中硬编码了一个错误 <code>throw new HttpException(&#39;Forbidden&#39;, HttpStatus.FORBIDDEN)</code><br>  可以看到终端控制台上， 我主动调用的 <code>this.logger.info(&#39;access &#123;/, GET&#125; route&#39;, [AppController.name])</code> 日志被打印出来了，但是硬编码抛出的错误并没有被捕获处理！<br>  回过头来看 <a href="https://github.com/topcoder-platform/challenge-api">challenge-api</a> 的入口文件 <a href="https://sourcegraph.com/github.com/topcoder-platform/challenge-api/-/blob/app.js#L68:5">topcoder-platform/challenge-api/-/blob/app.js#L68:5</a> 可以发现 <a href="https://github.com/topcoder-platform/challenge-api">challenge-api</a> 的作者是通过自定义一个全局中间件来做这件事情的，而 <a href="https://github.com/nestjs/nest">nestjs</a> 中也有做这件事情的东西， 也就是上面链接的异常过滤器: <a href="https://docs.nestjs.com/exception-filters">https://docs.nestjs.com/exception-filters</a><br>  所以任务来了， 我们实现一个异常过滤器来捕获并纪录程序抛出的错误:<br>  先创建好文件: <code>mkdir -p src/common/filters/;touch src/common/filters/all-exception.filter.ts</code><br>  all-exception.filter.ts<br>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ExceptionFilter, Catch, ArgumentsHost, HttpException, HttpStatus, LoggerService  &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Catch</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AllExceptionsFilter</span> <span class="title">implements</span> <span class="title">ExceptionFilter</span> </span>&#123;</span><br><span class="line">    <span class="title">constructor</span> (<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> logger: LoggerService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">catch</span> (exception: HttpException | <span class="built_in">Error</span>, <span class="attr">host</span>: ArgumentsHost) &#123;</span><br><span class="line">      <span class="keyword">const</span> ctx = host.switchToHttp()</span><br><span class="line">      <span class="keyword">const</span> response = ctx.getResponse&lt;Response&gt;()</span><br><span class="line">      <span class="keyword">const</span> request = ctx.getRequest&lt;Request&gt;()</span><br><span class="line">      <span class="keyword">const</span> status =</span><br><span class="line">        exception <span class="keyword">instanceof</span> HttpException</span><br><span class="line">          ? exception.getStatus()</span><br><span class="line">          : HttpStatus.INTERNAL_SERVER_ERROR</span><br><span class="line">      <span class="comment">// Get the location where the error was thrown from to use as a logging tag</span></span><br><span class="line">      <span class="keyword">const</span> stackTop =</span><br><span class="line">        exception.stack</span><br><span class="line">          .split(<span class="string">&quot;\n&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">          .split(<span class="string">&#x27;at &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">          .split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> message = exception.message.message || exception.message</span><br><span class="line">      <span class="keyword">const</span> meta = exception.message.meta</span><br><span class="line">      <span class="keyword">const</span> logMessage = &#123;</span><br><span class="line">        status,</span><br><span class="line">        message,</span><br><span class="line">        meta,</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.logger.error(<span class="built_in">JSON</span>.stringify(logMessage), stackTop, <span class="string">&quot;TRACE&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> method = request.method</span><br><span class="line">      <span class="keyword">const</span> url = request.url</span><br><span class="line">      <span class="keyword">const</span> requestTime = request.params.requestTime || <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.logger.log(</span><br><span class="line">        <span class="string">`<span class="subst">$&#123;method&#125;</span> <span class="subst">$&#123;url&#125;</span> - <span class="subst">$&#123;status&#125;</span> - <span class="subst">$&#123;<span class="built_in">Date</span>.now() - requestTime&#125;</span>ms`</span>,</span><br><span class="line">        <span class="string">&quot;Access&quot;</span></span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      response.status(status).send(&#123;</span><br><span class="line">        ...logMessage,</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>  config.ts<br>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; utilities <span class="keyword">as</span> nestWinstonModuleUtilities &#125; <span class="keyword">from</span> <span class="string">&#x27;nest-winston&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> winston <span class="keyword">from</span> <span class="string">&#x27;winston&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; format, transports &#125; = winston</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SECRET = <span class="string">&#x27;secret-key&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> LOG_LEVEL = process.env.LOG_LEVEL || <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> PORT = <span class="number">3000</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> LOGGER_CONFIG = &#123;</span><br><span class="line">  <span class="comment">// options here</span></span><br><span class="line">  <span class="attr">level</span>: LOG_LEVEL,</span><br><span class="line">  <span class="attr">transports</span>: [</span><br><span class="line">    <span class="keyword">new</span> transports.Console(&#123;</span><br><span class="line">      <span class="attr">format</span>: format.combine(</span><br><span class="line">        format.colorize(),</span><br><span class="line">        nestWinstonModuleUtilities.format.nestLike()</span><br><span class="line">      )</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> transports.File(&#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;combined.log&#x27;</span>,</span><br><span class="line">      <span class="attr">level</span>: <span class="string">&#x27;info&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>  main.ts<br>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NestFactory &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ApplicationModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; SwaggerModule, DocumentBuilder &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/swagger&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; WINSTON_MODULE_NEST_PROVIDER, WinstonModule &#125; <span class="keyword">from</span> <span class="string">&#x27;nest-winston&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AllExceptionsFilter &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/filters/all-exception.filter&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; LOGGER_CONFIG, PORT &#125; <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = WinstonModule.createLogger(LOGGER_CONFIG)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span> (<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">void</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> appOptions = &#123; <span class="attr">cors</span>: <span class="literal">true</span>, logger &#125;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(ApplicationModule, appOptions)</span><br><span class="line">  app.setGlobalPrefix(<span class="string">&#x27;api&#x27;</span>)</span><br><span class="line">  app.useLogger(app.get(WINSTON_MODULE_NEST_PROVIDER))</span><br><span class="line">  app.useGlobalFilters(<span class="keyword">new</span> AllExceptionsFilter(logger))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = <span class="keyword">new</span> DocumentBuilder()</span><br><span class="line">    .setTitle(<span class="string">&#x27;NestJS Realworld Example App&#x27;</span>)</span><br><span class="line">    .setDescription(<span class="string">&#x27;The Realworld API description&#x27;</span>)</span><br><span class="line">    .setVersion(<span class="string">&#x27;1.0&#x27;</span>)</span><br><span class="line">    .setBasePath(<span class="string">&#x27;api&#x27;</span>)</span><br><span class="line">    .addBearerAuth()</span><br><span class="line">    .build()</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">document</span> = SwaggerModule.createDocument(app, options)</span><br><span class="line">  SwaggerModule.setup(<span class="string">&#x27;/docs&#x27;</span>, app, <span class="built_in">document</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> app.listen(<span class="number">3000</span>)</span><br><span class="line">  logger.log(<span class="string">`Server started on port <span class="subst">$&#123;PORT&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/no-floating-promises</span></span><br><span class="line">bootstrap()</span><br></pre></td></tr></table></figure></p>
<p>  app.module.ts<br>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Connection &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; TypeOrmModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ArticleModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./article/article.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./user/user.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ProfileModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile/profile.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; TagModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./tag/tag.module&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; utilities <span class="keyword">as</span> nestWinstonModuleUtilities, WinstonModule &#125; <span class="keyword">from</span> <span class="string">&#x27;nest-winston&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> winston <span class="keyword">from</span> <span class="string">&#x27;winston&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; LOGGER_CONFIG &#125; <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; format, transports &#125; = winston</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    WinstonModule.forRoot(LOGGER_CONFIG),</span><br><span class="line">    TypeOrmModule.forRoot(),</span><br><span class="line">    ArticleModule,</span><br><span class="line">    UserModule,</span><br><span class="line">    ProfileModule,</span><br><span class="line">    TagModule</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">controllers</span>: [</span><br><span class="line">    AppController</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: []</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationModule</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> connection: Connection</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>  再次打开 <a href="http://127.0.0.1:3000/api/api">http://127.0.0.1:3000/api/api</a> 可以看到抛出的错误已经被成功捕获。但是这里有一个小问题， 那就是请求耗时并不准确， 下一步就是要解决这个问题。</p>
<h3 id="使用-interceptors-修复请求耗时不准的问题"><a href="#使用-interceptors-修复请求耗时不准的问题" class="headerlink" title="使用 interceptors 修复请求耗时不准的问题"></a>使用 interceptors 修复请求耗时不准的问题</h3><p>请求耗时不准确的原因是在 all-exception.filter.ts 文件中的这一行代码 <code>const requestTime = request.params.requestTime || 0</code><br>  很明显请求参数并没有带上 requestTime 这个属性， 这里我为了让 requestTime 有值设了一个 0。<br>  既然问题是请求参数没有 requestTime 这个属性，那么我们只要在服务器接受这个请求的时候， 给请求参数加上这个属性就行了<br>  这件事情可以由 <a href="https://github.com/nestjs/nest">nestjs</a> 中的拦截器来做: <a href="https://docs.nestjs.com/interceptors">https://docs.nestjs.com/interceptors</a><br>  由于 <a href="https://github.com/nestjs/nest">nestjs</a> 中的拦截器用到了 <a href="https://github.com/ReactiveX/rxjs">rxjs</a>， 而我因为没有使用的 <a href="https://github.com/ReactiveX/rxjs">rxjs</a> 场景， 所以并没有仔细的读过 <a href="https://github.com/ReactiveX/rxjs">rxjs</a> 文档，<br>  对里面的一些操作细节还不是很熟悉， 所以先花一两天时间把 <a href="https://cn.rx.js.org/">rxjs 中文网</a> 的文档读一遍， 然后再继续写。<br>  突然感觉 <a href="https://github.com/ReactiveX/rxjs">rxjs</a> 真的很热门， flutter app 里面也有使用 <a href="https://github.com/ReactiveX/rxjs">rxjs</a> 管理数据状态的方案.<br>  花了半天时间， RxJS 的基本概念和基本使用都了解的差不多了， 继续：<br>  先新建文件 <code>mkdir -p src/common/interceptors/;touch src/common/interceptors/logging.interceptor.ts</code><br>  logging.interceptor.ts<br>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">import</span> &#123;</span><br><span class="line">  Injectable,</span><br><span class="line">  NestInterceptor,</span><br><span class="line">  ExecutionContext,</span><br><span class="line">  CallHandler,</span><br><span class="line">  LoggerService</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; tap &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs/operators&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingInterceptor</span> <span class="title">implements</span> <span class="title">NestInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> logger: LoggerService</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  intercept(context: ExecutionContext, <span class="attr">next</span>: CallHandler): Observable&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = context.switchToHttp()</span><br><span class="line">    <span class="keyword">const</span> response = ctx.getResponse&lt;Response&gt;()</span><br><span class="line">    <span class="keyword">const</span> request = ctx.getRequest&lt;Request&gt;()</span><br><span class="line">    <span class="keyword">const</span> method = request.method</span><br><span class="line">    <span class="keyword">const</span> url = request.url</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> requestTime = <span class="built_in">Date</span>.now()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add request time to params to be used in exception filters</span></span><br><span class="line">    request.params.requestTime = requestTime</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">      .handle()</span><br><span class="line">      .pipe(</span><br><span class="line">        tap(<span class="function">() =&gt;</span></span><br><span class="line">          <span class="built_in">this</span>.logger.log(</span><br><span class="line">            <span class="string">`<span class="subst">$&#123;method&#125;</span> <span class="subst">$&#123;url&#125;</span> - <span class="subst">$&#123;response.res.statusCode&#125;</span> - <span class="subst">$&#123;<span class="built_in">Date</span>.now() - requestTime&#125;</span>ms`</span>,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  main.ts<br>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NestFactory &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ApplicationModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; SwaggerModule, DocumentBuilder &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/swagger&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; WINSTON_MODULE_NEST_PROVIDER, WinstonModule &#125; <span class="keyword">from</span> <span class="string">&#x27;nest-winston&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; LoggingInterceptor &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/interceptors/logging.interceptor&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AllExceptionsFilter &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/filters/all-exception.filter&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; LOGGER_CONFIG, PORT &#125; <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = WinstonModule.createLogger(LOGGER_CONFIG)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span> (<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">void</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> appOptions = &#123; <span class="attr">cors</span>: <span class="literal">true</span>, logger &#125;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(ApplicationModule, appOptions)</span><br><span class="line">  app.setGlobalPrefix(<span class="string">&#x27;api&#x27;</span>)</span><br><span class="line">  app.useLogger(app.get(WINSTON_MODULE_NEST_PROVIDER))</span><br><span class="line">  app.useGlobalInterceptors(<span class="keyword">new</span> LoggingInterceptor(logger))</span><br><span class="line">  app.useGlobalFilters(<span class="keyword">new</span> AllExceptionsFilter(logger))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = <span class="keyword">new</span> DocumentBuilder()</span><br><span class="line">    .setTitle(<span class="string">&#x27;NestJS Realworld Example App&#x27;</span>)</span><br><span class="line">    .setDescription(<span class="string">&#x27;The Realworld API description&#x27;</span>)</span><br><span class="line">    .setVersion(<span class="string">&#x27;1.0&#x27;</span>)</span><br><span class="line">    .setBasePath(<span class="string">&#x27;api&#x27;</span>)</span><br><span class="line">    .addBearerAuth()</span><br><span class="line">    .build()</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">document</span> = SwaggerModule.createDocument(app, options)</span><br><span class="line">  SwaggerModule.setup(<span class="string">&#x27;/docs&#x27;</span>, app, <span class="built_in">document</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> app.listen(<span class="number">3000</span>)</span><br><span class="line">  logger.log(<span class="string">`Server started on port <span class="subst">$&#123;PORT&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/no-floating-promises</span></span><br><span class="line">bootstrap()</span><br></pre></td></tr></table></figure><br>  添加了这个全局拦截器后， 就能看到控制打印出每次请求的耗时了<br>  要想理解拦截器的执行过程还得看官方文档:  <a href="https://docs.nestjs.com/interceptors#call-handler">https://docs.nestjs.com/interceptors#call-handler</a></p>
<blockquote>
<p>Consider, for example, an incoming POST /cats request. This request is destined for the create() handler defined inside the CatsController. If an interceptor which does not call the handle() method is called anywhere along the way, the create() method won’t be executed. Once handle() is called (and its Observable has been returned), the create() handler will be triggered. And once the response stream is received via the Observable, additional operations can be performed on the stream, and a final result returned to the caller.</p>
</blockquote>
<p>  当 HTTP 请求到达请求的路由方法之前，会被拦截器拦截， 并执行拦截器实现的 intercept 方法， intercept 执行完成后将 next.handle() 返回的 Observable 添加一些 <a href="https://github.com/ReactiveX/rxjs">RxJS</a> operators(Pipeable 操作符)， 根据<a href="https://cn.rx.js.org/">rxjs 中文网</a> 的文档我们知道 <a href="https://github.com/ReactiveX/rxjs">RxJS</a> operators 将返回一个新的 Observable, <a href="https://github.com/nestjs/nest">nestjs</a> 框架得到了intercept 方法返回的 Observable，然后执行请求的路由方法，并在此之后， 将得到的 Observable 进行 subscribe(订阅执行)， 因此我们在路由方法之前与之后插入了代码逻辑， 既所谓的 面向切面编程(AOP).</p>
<h3 id="使用-pipes-处理错误的请求体"><a href="#使用-pipes-处理错误的请求体" class="headerlink" title="使用 pipes 处理错误的请求体"></a>使用 pipes 处理错误的请求体</h3><p>接下来， 试想这样一个场景， 前端请求一个路由， 但是传递了一个错误的，不符合要求的请求体参数，一般情况下我们会在路由方法中做参数验证，如果验证未通过，就将错误响应给前端。但是，如果每个路由都这么做，会有很多冗余代码, 不够优雅。而 <a href="https://github.com/nestjs/nest">nestjs</a> 有一个东西叫 pipes 可以解决这个问题: <a href="https://docs.nestjs.com/pipes">https://docs.nestjs.com/pipes</a><br><code>mkdir -p src/common/pipes/;touch src/common/pipes/body-validation.pipe.ts</code><br>body-validation.pipe.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  PipeTransform,</span><br><span class="line">  Injectable,</span><br><span class="line">  ArgumentMetadata,</span><br><span class="line">  BadRequestException,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; validate &#125; <span class="keyword">from</span> <span class="string">&quot;class-validator&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; plainToClass &#125; <span class="keyword">from</span> <span class="string">&quot;class-transformer&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationPipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span>&lt;<span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">transform</span>(<span class="params">value: <span class="built_in">any</span>, &#123; metatype &#125;: ArgumentMetadata</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Account for an empty request body</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">      value = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!metatype || !<span class="built_in">this</span>.toValidate(metatype)) &#123;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">object</span> = plainToClass(metatype, value)</span><br><span class="line">    <span class="keyword">const</span> errors = <span class="keyword">await</span> validate(<span class="built_in">object</span>, &#123;</span><br><span class="line">      <span class="attr">forbidUnknownValues</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">whitelist</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">forbidNonWhitelisted</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errors.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// Top-level errors</span></span><br><span class="line">      <span class="keyword">const</span> topLevelErrors = errors</span><br><span class="line">        .filter(<span class="function"><span class="params">v</span> =&gt;</span> v.constraints)</span><br><span class="line">        .map(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">property</span>: error.property,</span><br><span class="line">            <span class="attr">constraints</span>: <span class="built_in">Object</span>.values(error.constraints),</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Nested errors</span></span><br><span class="line">      <span class="keyword">const</span> nestedErrors = errors</span><br><span class="line">        .filter(<span class="function"><span class="params">v</span> =&gt;</span> !v.constraints)</span><br><span class="line">        .map(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> validationErrors = <span class="built_in">this</span>.getValidationErrorsFromChildren(</span><br><span class="line">            error.property,</span><br><span class="line">            error.children,</span><br><span class="line">          )</span><br><span class="line">          <span class="keyword">return</span> validationErrors</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(&#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;Validation failed&quot;</span>,</span><br><span class="line">        <span class="attr">meta</span>: topLevelErrors.concat(...nestedErrors),</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> toValidate(metatype: <span class="built_in">any</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> types: <span class="built_in">Array</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">any</span>&gt; = [<span class="built_in">String</span>, <span class="built_in">Boolean</span>, <span class="built_in">Number</span>, <span class="built_in">Array</span>, <span class="built_in">Object</span>]</span><br><span class="line">    <span class="keyword">return</span> !types.includes(metatype)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getValidationErrorsFromChildren</span>(<span class="params">parent, children, errors = []</span>)</span> &#123;</span><br><span class="line">    children.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (child.constraints) &#123;</span><br><span class="line">        errors.push(&#123;</span><br><span class="line">          <span class="attr">property</span>: <span class="string">`<span class="subst">$&#123;parent&#125;</span>.<span class="subst">$&#123;child.property&#125;</span>`</span>,</span><br><span class="line">          <span class="attr">constraints</span>: <span class="built_in">Object</span>.values(child.constraints),</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getValidationErrorsFromChildren(</span><br><span class="line">          <span class="string">`<span class="subst">$&#123;parent&#125;</span>.<span class="subst">$&#123;child.property&#125;</span>`</span>,</span><br><span class="line">          child.children,</span><br><span class="line">          errors,</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> errors</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  main.ts<br>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NestFactory &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ApplicationModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; SwaggerModule, DocumentBuilder &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/swagger&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; WINSTON_MODULE_NEST_PROVIDER, WinstonModule &#125; <span class="keyword">from</span> <span class="string">&#x27;nest-winston&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; LoggingInterceptor &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/interceptors/logging.interceptor&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AllExceptionsFilter &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/filters/all-exception.filter&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ValidationPipe &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/pipes/body-validation.pipe&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; LOGGER_CONFIG, PORT &#125; <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = WinstonModule.createLogger(LOGGER_CONFIG)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span> (<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">void</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> appOptions = &#123; <span class="attr">cors</span>: <span class="literal">true</span>, logger &#125;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(ApplicationModule, appOptions)</span><br><span class="line">  app.setGlobalPrefix(<span class="string">&#x27;api&#x27;</span>)</span><br><span class="line">  app.useLogger(app.get(WINSTON_MODULE_NEST_PROVIDER))</span><br><span class="line">  app.useGlobalInterceptors(<span class="keyword">new</span> LoggingInterceptor(logger))</span><br><span class="line">  app.useGlobalFilters(<span class="keyword">new</span> AllExceptionsFilter(logger))</span><br><span class="line">  app.useGlobalPipes(<span class="keyword">new</span> ValidationPipe())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = <span class="keyword">new</span> DocumentBuilder()</span><br><span class="line">    .setTitle(<span class="string">&#x27;NestJS Realworld Example App&#x27;</span>)</span><br><span class="line">    .setDescription(<span class="string">&#x27;The Realworld API description&#x27;</span>)</span><br><span class="line">    .setVersion(<span class="string">&#x27;1.0&#x27;</span>)</span><br><span class="line">    .setBasePath(<span class="string">&#x27;api&#x27;</span>)</span><br><span class="line">    .addBearerAuth()</span><br><span class="line">    .build()</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">document</span> = SwaggerModule.createDocument(app, options)</span><br><span class="line">  SwaggerModule.setup(<span class="string">&#x27;/docs&#x27;</span>, app, <span class="built_in">document</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> app.listen(<span class="number">3000</span>)</span><br><span class="line">  logger.log(<span class="string">`Server started on port <span class="subst">$&#123;PORT&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/no-floating-promises</span></span><br><span class="line">bootstrap()</span><br></pre></td></tr></table></figure></p>
<p>  点开 <a href="http://127.0.0.1:3000/docs">http://127.0.0.1:3000/docs</a> 找到 POST ​/users​/login 点击 Try it out， 然后 Execute，可以看到 Response body 如下:<br>  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;Validation failed&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;meta&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;property&quot;</span>: <span class="string">&quot;username&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;constraints&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;username should not be empty&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;property&quot;</span>: <span class="string">&quot;email&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;constraints&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;email should not be empty&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;property&quot;</span>: <span class="string">&quot;password&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;constraints&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;password should not be empty&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  pipes 与 exception filters 基本上是一样的， 只不过是一个验证或转换请求体，一个捕获异常。pipes 中使用了两个库: <a href="https://github.com/typestack/class-validator">class-validator</a> 和 <a href="https://github.com/typestack/class-transformer">class-transformer</a>，<br>  一个是对类成员的赋值进行验证， 一个是将字面量对象转为类对象或其实例。都是很好的东西， 所以点个 star 继续。</p>
<h3 id="其他-Guards-and-Middleware"><a href="#其他-Guards-and-Middleware" class="headerlink" title="其他(Guards and Middleware)"></a>其他(Guards and Middleware)</h3><p>到这里这篇文章就可以结束了，基本概念只有 Guards 与 Middleware 没有涉及， Middleware 可以参考这个样板的:<br>auth.middleware.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HttpException &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common/exceptions/http.exception&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; NestMiddleware, HttpStatus, Injectable &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ExtractJwt, Strategy &#125; <span class="keyword">from</span> <span class="string">&#x27;passport-jwt&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Request, Response, NextFunction &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> jwt <span class="keyword">from</span> <span class="string">&#x27;jsonwebtoken&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; SECRET &#125; <span class="keyword">from</span> <span class="string">&#x27;../config&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthMiddleware</span> <span class="title">implements</span> <span class="title">NestMiddleware</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> userService: UserService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> use (req: Request, <span class="attr">res</span>: Response, <span class="attr">next</span>: NextFunction) &#123;</span><br><span class="line">    <span class="keyword">const</span> authHeaders = req.headers.authorization</span><br><span class="line">    <span class="keyword">if</span> (authHeaders &amp;&amp; (authHeaders <span class="keyword">as</span> <span class="built_in">string</span>).split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">const</span> token = (authHeaders <span class="keyword">as</span> <span class="built_in">string</span>).split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">      <span class="keyword">const</span> decoded: <span class="built_in">any</span> = jwt.verify(token, SECRET)</span><br><span class="line">      <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="built_in">this</span>.userService.findById(decoded.id)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="string">&#x27;User not found.&#x27;</span>, HttpStatus.UNAUTHORIZED)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      req.user = user.user</span><br><span class="line">      next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="string">&#x27;Not authorized.&#x27;</span>, HttpStatus.UNAUTHORIZED)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  而使用也可以在 module 中看到:<br>  user.module.ts<br>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MiddlewareConsumer, Module, NestModule, RequestMethod &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserController &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.controller&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; TypeOrmModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserEntity &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.entity&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AuthMiddleware &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.middleware&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [TypeOrmModule.forFeature([UserEntity])],</span><br><span class="line">  <span class="attr">providers</span>: [UserService],</span><br><span class="line">  <span class="attr">controllers</span>: [</span><br><span class="line">    UserController</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">exports</span>: [UserService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModule</span> <span class="title">implements</span> <span class="title">NestModule</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> configure (consumer: MiddlewareConsumer) &#123;</span><br><span class="line">    consumer</span><br><span class="line">      .apply(AuthMiddleware)</span><br><span class="line">      .forRoutes(&#123; <span class="attr">path</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">method</span>: RequestMethod.GET &#125;, &#123; <span class="attr">path</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">method</span>: RequestMethod.PUT &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>  Guards 与 Middleware 区别在官方文档里说的很清楚: <a href="https://docs.nestjs.com/guards">https://docs.nestjs.com/guards</a><br>  还有一个区别就是 Middleware 的应用是中心化的， 而 Guards 的应用是去中心化的，就和路由的 HTTP 方法注解一样。</p>
<h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3><p>本篇完。</p>
]]></content>
      <tags>
        <tag>初级后端</tag>
        <tag>转型计划</tag>
      </tags>
  </entry>
</search>
